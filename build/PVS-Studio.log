{"code":"V001","currLine":"extern __inline __m512h","falseAlarm":false,"level":3,"message":"A code fragment cannot be analyzed.","nextLine":"__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))","positions":[{"file":"C:\\ProgramData\\mingw64\\mingw64\\lib\\gcc\\x86_64-w64-mingw32\\13.2.0\\include\\avx512fp16intrin.h","lines":[7162]}]}
{"code":"V2506","currLine":"int main() ","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[23,144,154]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2533","currLine":"    const std::string bar((size_t)pos, '=');","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"    const std::string blank((size_t)totalCounter - (size_t)pos, ' ');","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[15]}],"prevLine":"    auto pos = (percentage / 100 * totalCounter);","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"    const std::string blank((size_t)totalCounter - (size_t)pos, ' ');","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[16]}],"prevLine":"    const std::string bar((size_t)pos, '=');","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"    std::cout << '[' << bar << '>' << blank << \"] \" << int(percentage) << \" %\\r\";","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"    std::cout.flush();","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[18]}],"sastId":"MISRA-CPP-5-2-4"}
{"code":"V2547","currLine":"    std::cout.flush();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'flush' should be used.","nextLine":"}","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[19]}],"prevLine":"    std::cout << '[' << bar << '>' << blank << \"] \" << int(percentage) << \" %\\r\";","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"    SetConsoleOutputCP(CP_UTF8);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'SetConsoleOutputCP' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[25]}],"prevLine":"{","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2564","currLine":"    float percentage = current_progress / totalCounter * 100;","falseAlarm":false,"level":1,"message":"There should be no 'integral to floating' implicit cast. Consider inspecting the right operand '100' of the operator '*'.","nextLine":"    auto pos = (percentage / 100 * totalCounter);","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[13]}],"prevLine":"{","sastId":"MISRA-CPP-5-0-5"}
{"code":"V2564","currLine":"    auto pos = (percentage / 100 * totalCounter);","falseAlarm":false,"level":1,"message":"There should be no 'integral to floating' implicit cast. Consider inspecting the right operand '100' of the operator '/'.","nextLine":"    const std::string bar((size_t)pos, '=');","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[14]}],"prevLine":"    float percentage = current_progress / totalCounter * 100;","sastId":"MISRA-CPP-5-0-5"}
{"code":"V2575","currLine":"using json = nlohmann::json;","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[9]}],"prevLine":"//","sastId":"MISRA-CPP-7-3-1"}
{"code":"V2575","currLine":"void progressBar(float current_progress, float totalCounter) ","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[11]}],"sastId":"MISRA-CPP-7-3-1"}
{"code":"V3527","currLine":"    std::cout.flush();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'flush' should be used.","nextLine":"}","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[19]}],"prevLine":"    std::cout << '[' << bar << '>' << blank << \"] \" << int(percentage) << \" %\\r\";","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"    SetConsoleOutputCP(CP_UTF8);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'SetConsoleOutputCP' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[25]}],"prevLine":"{","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3540","currLine":"    float percentage = current_progress / totalCounter * 100;","falseAlarm":false,"level":1,"message":"There should be no 'integral to floating' implicit cast. Consider inspecting the right operand '100' of the operator '*'.","nextLine":"    auto pos = (percentage / 100 * totalCounter);","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[13]}],"prevLine":"{","sastId":"AUTOSAR-M5-0-5"}
{"code":"V3540","currLine":"    auto pos = (percentage / 100 * totalCounter);","falseAlarm":false,"level":1,"message":"There should be no 'integral to floating' implicit cast. Consider inspecting the right operand '100' of the operator '/'.","nextLine":"    const std::string bar((size_t)pos, '=');","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[14]}],"prevLine":"    float percentage = current_progress / totalCounter * 100;","sastId":"AUTOSAR-M5-0-5"}
{"code":"V3549","currLine":"using json = nlohmann::json;","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[9]}],"prevLine":"//","sastId":"AUTOSAR-M7-3-1"}
{"code":"V3549","currLine":"void progressBar(float current_progress, float totalCounter) ","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[11]}],"sastId":"AUTOSAR-M7-3-1"}
{"code":"V112","currLine":"        file << dataOpen.dump(4);","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: ...taOpen.dump(4);.","nextLine":"        file.close();","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[142]}],"prevLine":"        std::ofstream file(\"data.json\");"}
{"code":"V112","currLine":"        file << data.dump(4);","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: ...< data.dump(4);.","nextLine":"        file.close();","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[149]}],"prevLine":"        std::ofstream file(\"data.json\");"}
{"code":"V2003","currLine":"    std::cout << '[' << bar << '>' << blank << \"] \" << int(percentage) << \" %\\r\";","cwe":681,"falseAlarm":false,"level":2,"message":"Explicit conversion from 'float' type to signed integer type: int (percentage)","nextLine":"    std::cout.flush();","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[18]}],"sastId":"CERT-FLP34-C"}
{"code":"V2004","currLine":"    const std::string bar((size_t)pos, '=');","cwe":681,"falseAlarm":false,"level":2,"message":"Explicit conversion from 'float' type to unsigned integer type: (size_t) pos","nextLine":"    const std::string blank((size_t)totalCounter - (size_t)pos, ' ');","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[15]}],"prevLine":"    auto pos = (percentage / 100 * totalCounter);","sastId":"CERT-FLP34-C"}
{"code":"V2004","currLine":"    const std::string blank((size_t)totalCounter - (size_t)pos, ' ');","cwe":681,"falseAlarm":false,"level":2,"message":"Explicit conversion from 'float' type to unsigned integer type: (size_t) pos","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[16]}],"prevLine":"    const std::string bar((size_t)pos, '=');","sastId":"CERT-FLP34-C"}
{"code":"V2004","currLine":"    const std::string blank((size_t)totalCounter - (size_t)pos, ' ');","cwe":681,"falseAlarm":false,"level":2,"message":"Explicit conversion from 'float' type to unsigned integer type: (size_t) totalCounter","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[16]}],"prevLine":"    const std::string bar((size_t)pos, '=');","sastId":"CERT-FLP34-C"}
{"code":"V2005","currLine":"    const std::string bar((size_t)pos, '=');","falseAlarm":false,"level":2,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"    const std::string blank((size_t)totalCounter - (size_t)pos, ' ');","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[15]}],"prevLine":"    auto pos = (percentage / 100 * totalCounter);"}
{"code":"V2005","currLine":"    const std::string blank((size_t)totalCounter - (size_t)pos, ' ');","falseAlarm":false,"level":2,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[16]}],"prevLine":"    const std::string bar((size_t)pos, '=');"}
{"code":"V2005","currLine":"    std::cout << '[' << bar << '>' << blank << \"] \" << int(percentage) << \" %\\r\";","falseAlarm":false,"level":2,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"    std::cout.flush();","positions":[{"file":"Z:\\c++\\Project_Template\\SRC\\main.cpp","lines":[18]}]}
{"code":"V2008","currLine":"    token_type scan_string()","falseAlarm":false,"level":1,"message":"Cyclomatic complexity:   214. Consider refactoring the 'scan_string' function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7627]}],"prevLine":"    */"}
{"code":"V2008","currLine":"    token_type scan_number()  // lgtm [cpp/use-of-goto]","falseAlarm":false,"level":1,"message":"Cyclomatic complexity:   123. Consider refactoring the 'scan_number' function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8342]}],"prevLine":"    */"}
{"code":"V2008","currLine":"    bool parse_cbor_internal(const bool get_char,","falseAlarm":false,"level":1,"message":"Cyclomatic complexity:   242. Consider refactoring the 'parse_cbor_internal' function.","nextLine":"                             const cbor_tag_handler_t tag_handler)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9565]}],"prevLine":"    */"}
{"code":"V2008","currLine":"    bool parse_msgpack_internal()","falseAlarm":false,"level":1,"message":"Cyclomatic complexity:   273. Consider refactoring the 'parse_msgpack_internal' function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10341]}],"prevLine":"    */"}
{"code":"V2008","currLine":"    bool sax_parse_internal(SAX* sax)","falseAlarm":false,"level":1,"message":"Cyclomatic complexity:    51. Consider refactoring the 'sax_parse_internal' function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12349]}],"prevLine":"    JSON_HEDLEY_NON_NULL(2)"}
{"code":"V2008","currLine":"    void write_cbor(const BasicJsonType& j)","falseAlarm":false,"level":1,"message":"Cyclomatic complexity:    55. Consider refactoring the 'write_cbor' function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15129]}],"prevLine":"    */"}
{"code":"V2008","currLine":"    void write_msgpack(const BasicJsonType& j)","falseAlarm":false,"level":1,"message":"Cyclomatic complexity:    57. Consider refactoring the 'write_msgpack' function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15453]}],"prevLine":"    */"}
{"code":"V2505","currLine":"                goto scan_number_any1;","falseAlarm":false,"level":1,"message":"The 'goto' statement shouldn't jump to a label declared earlier.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8454,8438]}],"prevLine":"                add(current);","sastId":"MISRA-CPP-6-6-2"}
{"code":"V2505","currLine":"                goto scan_number_decimal2;","falseAlarm":false,"level":1,"message":"The 'goto' statement shouldn't jump to a label declared earlier.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8517,8501]}],"prevLine":"                add(current);","sastId":"MISRA-CPP-6-6-2"}
{"code":"V2505","currLine":"                goto scan_number_any2;","falseAlarm":false,"level":1,"message":"The 'goto' statement shouldn't jump to a label declared earlier.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8608,8592]}],"prevLine":"                add(current);","sastId":"MISRA-CPP-6-6-2"}
{"code":"V2506","currLine":"    inline std::partial_ordering operator<=>(const value_t lhs, const value_t rhs) noexcept // *NOPAD*","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"#else","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[2900,2917,2919]}],"prevLine":"#if JSON_HAS_THREE_WAY_COMPARISON","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    const string_type& key() const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5263,5277,5282,5294]}],"prevLine":"    /// return key of the iterator","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"std::size_t hash(const BasicJsonType& j)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6023,6036,6048,6058,6064,6070,6076,6082,6088,6101,6106]}],"prevLine":"template<typename BasicJsonType>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    typename char_traits<char_type>::int_type get_character()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6290,6296,6299]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    BasicJsonType* handle_value(Value&& v)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6948,6953,6961,6967]}],"prevLine":"    JSON_HEDLEY_RETURNS_NON_NULL","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    BasicJsonType* handle_value(Value&& v)","falseAlarm":false,"level":1,"message":"Instantiation of json_sax_dom_parser < basic_json >: A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6948,6953,6961,6967]}],"prevLine":"    JSON_HEDLEY_RETURNS_NON_NULL","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    std::pair<bool, BasicJsonType*> handle_value(Value&& v, const bool skip_callback = false)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7206,7214,7226,7232,7239,7249,7261,7266]}],"prevLine":"    template<typename Value>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    static const char* token_type_name(const token_type t) noexcept","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7435,7440,7442,7444,7446,7448,7452,7454,7456,7458,7460,7462,7464,7466,7468,7470,7473]}],"prevLine":"    JSON_HEDLEY_CONST","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    int get_codepoint()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7542,7567,7572]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool next_byte_in_range(std::initializer_list<char_int_type> ranges)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7590,7605,7609]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    token_type scan_string()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7627,7644,7650,7700,7714,7734,7740,7748,7789,7799,7805,7811,7817,7823,7829,7835,7841,7847,7853,7859,7865,7871,7877,7883,7889,7895,7901,7907,7913,7919,7925,7931,7937,7943,7949,7955,7961,7967,7973,7979,7985,8122,8132,8156,8166,8176,8188,8198,8207]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool scan_comment()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8217,8232,8251,8259,8279]}],"prevLine":"     */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    token_type scan_number()  // lgtm [cpp/use-of-goto]","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8342,8413,8497,8562,8588,8636,8652,8664]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    token_type scan_literal(const char_type* literal_text, const std::size_t length,","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"                            token_type return_type)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8673,8682,8685]}],"prevLine":"    JSON_HEDLEY_NON_NULL(2)","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool skip_bom()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8859,8864,8870]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    token_type scan()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8882,8888,8899,8910,8912,8914,8916,8918,8920,8926,8931,8936,8941,8955,8961,8966]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool sax_parse(const input_format_t format,","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"                   json_sax_t* sax_,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9250,9296,9301]}],"prevLine":"    JSON_HEDLEY_NON_NULL(3)","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool parse_bson_internal()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9313,9320,9325,9328]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_bson_cstr(string_t& result)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9338,9346,9350]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_bson_string(const NumberType len, string_t& result)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9368,9373,9377]}],"prevLine":"    template<typename NumberType>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_bson_binary(const NumberType len, binary_t& result)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9390,9395,9404]}],"prevLine":"    template<typename NumberType>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool parse_bson_element_internal(const char_int_type element_type,","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"                                     const std::size_t element_type_parse_position)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9417,9425,9432,9437,9442,9449,9454,9459,9465,9471,9479]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool parse_bson_element_list(const bool is_array)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9497,9505,9511,9516,9521,9528]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool parse_bson_array()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9535,9542,9547,9550]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool parse_cbor_internal(const bool get_char,","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"                             const cbor_tag_handler_t tag_handler)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9565,9572,9599,9604,9610,9616,9622,9650,9655,9661,9667,9673,9709,9744,9772,9778,9784,9790,9796,9800,9827,9832,9838,9844,9850,9854,9881,9917,9955,9958,9963,9968,9971,9974,9981,9986,10019,10027,10033,10039]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"                const double val = [&half]","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10001,10010,10012,10016]}],"prevLine":"                const auto half = static_cast<unsigned int>((byte1 << 8u) + byte2);","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_cbor_string(string_t& result)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10056,10060,10091,10097,10103,10109,10115,10125,10129,10135]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_cbor_binary(binary_t& result)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10152,10156,10187,10193,10200,10207,10214,10225,10229,10235]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_cbor_array(const std::size_t len,","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"                        const cbor_tag_handler_t tag_handler)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10247,10252,10261,10271,10276]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_cbor_object(const std::size_t len,","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"                         const cbor_tag_handler_t tag_handler)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10285,10290,10303,10308,10319,10324,10331]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool parse_msgpack_internal()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10341,10347,10478,10497,10516,10556,10560,10563,10566,10581,10587,10593,10599,10605,10611,10617,10623,10629,10635,10641,10647,10653,10659,10665,10701,10706]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_msgpack_string(string_t& result)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10722,10726,10765,10771,10777,10783,10789]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_msgpack_binary(binary_t& result)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10805,10819,10826,10833,10841,10851,10861,10870,10878,10886,10894,10902,10908]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_msgpack_array(const std::size_t len)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10916,10920,10927,10931]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_msgpack_object(const std::size_t len)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10938,10942,10951,10956,10961]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_ubjson_string(string_t& result, const bool get_char = true)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10994,11003,11011,11017,11023,11029,11035,11045,11055,11065,11082]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_ubjson_ndarray_size(std::vector<size_t>& dim)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11089,11097,11110,11122,11134,11140]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_ubjson_size_value(std::size_t& result, bool& is_ndarray, char_int_type prefix = 0)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11154,11168,11171,11179,11183,11187,11195,11199,11203,11211,11215,11219,11227,11231,11236,11240,11252,11255,11267,11270,11282,11286,11290,11301,11306,11311,11320,11327,11335,11339,11343,11346,11363]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_ubjson_size_type(std::pair<std::size_t, char_int_type>& result, bool inside_ndarray = false)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11377,11392,11398,11406,11409,11418,11423,11431,11434,11437]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_ubjson_value(const char_int_type prefix)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11444,11449,11452,11454,11457,11462,11468,11474,11480,11486,11496,11506,11516,11528,11533,11566,11574,11580,11585,11593,11598,11602,11608,11612,11615,11621]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"                const double val = [&half]","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11548,11557,11559,11563]}],"prevLine":"                const auto half = static_cast<unsigned int>((byte2 << 8u) + byte1);","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_ubjson_array()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11627,11632,11649,11656,11667,11674,11678,11685,11696,11707,11716,11723,11729]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_ubjson_object()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11735,11740,11747,11756,11765,11769,11780,11784,11794,11801,11805,11812]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_ubjson_high_precision_number()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11818,11826,11836,11852,11859,11861,11863,11879]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool get_number(const input_format_t format, NumberType& result)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11933,11942,11958]}],"prevLine":"    template<typename NumberType, bool InputIsLittleEndian = false>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool unexpect_eof(const input_format_t format, const char* context) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12033,12037,12040]}],"prevLine":"    JSON_HEDLEY_NON_NULL(3)","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    void parse(const bool strict, BasicJsonType& result)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12262,12282,12309]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool sax_parse(SAX* sax, const bool strict = true)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12330,12338,12343]}],"prevLine":"    JSON_HEDLEY_NON_NULL(2)","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool sax_parse_internal(SAX* sax)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12349,12368,12376,12384,12390,12396,12413,12421,12439,12446,12456,12465,12474,12483,12492,12501,12509,12517,12523,12535,12550,12568,12581,12594,12601,12607,12622,12635]}],"prevLine":"    JSON_HEDLEY_NON_NULL(2)","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    reference operator*() const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13149,13158,13164,13181]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    pointer operator->() const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13193,13202,13208,13223]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool operator==(const IterImpl& other) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13338,13351,13354,13365]}],"prevLine":"    template < typename IterImpl, detail::enable_if_t < (std::is_same<IterImpl, iter_impl>::value || std::is_same<IterImpl, other_iter_impl>::value), std::nullptr_t > = nullptr >","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool operator<(const iter_impl& other) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13383,13399,13410]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    difference_type operator-(const iter_impl& other) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13524,13534,13545]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    reference operator[](difference_type n) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13553,13563,13579]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    const typename object_t::key_type& key() const","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13591,13597]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    json_pointer parent_pointer() const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13951,13955,13960]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/json_pointer/parent_pointer/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool contains(const BasicJsonType* ptr) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14384,14395,14407,14412,14419,14426,14435,14454,14460]}],"prevLine":"    template<typename BasicJsonType>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    static std::vector<string_t> split(const string_t& reference_string)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14472,14479,14529]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    value_type moved_or_copied() const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14851,14855,14857]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    static std::size_t calc_bson_element_size(const string_t& name,","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"            const BasicJsonType& j)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16204,16211,16214,16217,16220,16223,16226,16229,16232,16235,16241]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    void write_bson_element(const string_t& name,","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"                            const BasicJsonType& j)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16252,16258,16261,16264,16267,16270,16273,16276,16279,16282,16288]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    CharType ubjson_prefix(const BasicJsonType& j, const bool use_bjdata) const noexcept","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16544,16549,16552,16558,16562,16566,16570,16574,16578,16582,16585,16592,16596,16600,16604,16608,16612,16616,16620,16623,16627,16630,16634,16637,16641]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool write_bjdata_ndarray(const typename BasicJsonType::object_t& value, const bool use_count, const bool use_type)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16658,16668,16682,16764]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"inline int find_largest_pow10(const std::uint32_t n, std::uint32_t& pow10)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17400,17406,17412,17417,17422,17427,17432,17437,17442,17447,17451]}],"prevLine":"*/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"inline void grisu2_digit_gen(char* buffer, int& length, int& decimal_exponent,","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"                             diyfp M_minus, diyfp w, diyfp M_plus)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17495,17610]}],"prevLine":"*/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"inline char* format_buffer(char* buf, int len, int decimal_exponent,","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"                           int min_exp, int max_exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17888,17910,17922,17934,17955]}],"prevLine":"JSON_HEDLEY_RETURNS_NON_NULL","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"char* to_chars(char* first, const char* last, FloatType value)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17973,17995,18022]}],"prevLine":"JSON_HEDLEY_RETURNS_NON_NULL","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    void dump(const BasicJsonType& val,","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"              const bool pretty_print,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18116,18129,18194,18202,18253,18261,18334,18347,18353,18359,18365,18371,18377]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    inline unsigned int count_digits(number_unsigned_t x) noexcept","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18655,18662,18666,18670,18674]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    void dump_integer(NumberType x)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18723,18745]}],"prevLine":"                   int > = 0 >","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    void dump_float(number_float_t x)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18808,18814]}],"prevLine":"    */","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    std::pair<iterator, bool> emplace(const key_type& key, T&& t)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19061,19067,19071]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    std::pair<iterator, bool> emplace(KeyType && key, T && t)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19076,19082,19086]}],"prevLine":"                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    T& at(const key_type& key)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19113,19119]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    T & at(KeyType && key) // NOLINT(cppcoreguidelines-missing-std-forward)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19128,19134]}],"prevLine":"                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    const T& at(const key_type& key) const","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19141,19147]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    const T & at(KeyType && key) const // NOLINT(cppcoreguidelines-missing-std-forward)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19156,19162]}],"prevLine":"                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    size_type erase(const key_type& key)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19169,19182,19185]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    size_type erase(KeyType && key) // NOLINT(cppcoreguidelines-missing-std-forward)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19190,19203,19206]}],"prevLine":"                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    iterator erase(iterator first, iterator last)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19214,19218,19264]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    size_type count(const key_type& key) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19267,19273,19276]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    size_type count(KeyType && key) const // NOLINT(cppcoreguidelines-missing-std-forward)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19281,19287,19290]}],"prevLine":"                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    iterator find(const key_type& key)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19293,19299,19302]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    iterator find(KeyType && key) // NOLINT(cppcoreguidelines-missing-std-forward)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19307,19313,19316]}],"prevLine":"                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    const_iterator find(const key_type& key) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19319,19325,19328]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    std::pair<iterator, bool> insert( const value_type& value )","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19336,19342,19346]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"        void destroy(value_t t)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19859,19869]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    boolean_t get_impl(boolean_t* /*unused*/) const","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20710,20714]}],"prevLine":"    /// get a boolean (explicit)","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    static ReferenceType get_ref_impl(ThisType& obj)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20828,20835]}],"prevLine":"    template<typename ReferenceType, typename ThisType>","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    reference operator[](size_type idx)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21365,21403]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    const_reference operator[](size_type idx) const","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21411,21416]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    reference operator[](typename object_t::key_type key)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21424,21438]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    const_reference operator[](const typename object_t::key_type& key) const","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21446,21453]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    reference operator[](KeyType && key)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21477,21491]}],"prevLine":"                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int > = 0 >","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    const_reference operator[](KeyType && key) const","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21501,21508]}],"prevLine":"                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int > = 0 >","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    ValueType value(const typename object_t::key_type& key, const ValueType& default_value) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21531,21540,21543]}],"prevLine":"                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    ReturnType value(const typename object_t::key_type& key, ValueType && default_value) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21556,21565,21568]}],"prevLine":"                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    ValueType value(KeyType && key, const ValueType& default_value) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21582,21591,21594]}],"prevLine":"                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    ReturnType value(KeyType && key, ValueType && default_value) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21609,21618,21621]}],"prevLine":"                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    ValueType value(const json_pointer& ptr, const ValueType& default_value) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21632,21640,21644]}],"prevLine":"                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    ReturnType value(const json_pointer& ptr, ValueType && default_value) const","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21657,21665,21669]}],"prevLine":"                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    size_type erase_internal(KeyType && key)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21888,21900,21902]}],"prevLine":"                   !detail::has_erase_with_key_type<basic_json_t, KeyType>::value, int > = 0 >","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool empty() const noexcept","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22211,22218,22224,22230,22243]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/empty/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    size_type size() const noexcept","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22250,22257,22263,22269,22282]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/size/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    size_type max_size() const noexcept","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22289,22296,22302,22316]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/max_size/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    iterator insert(const_iterator pos, const basic_json& val)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22590,22602]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/insert/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    iterator insert(const_iterator pos, size_type cnt, const basic_json& val)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22617,22629]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/insert/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    static bool compares_unordered(const_reference lhs, const_reference rhs, bool inverse = false) noexcept","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22962,22967,22973]}],"prevLine":"    // an operation is computed as an odd number of inverses of others","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool operator==(const_reference rhs) const noexcept","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22987,22994,22994]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    bool operator!=(const_reference rhs) const noexcept","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23011,23015,23017]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    std::partial_ordering operator<=>(const_reference rhs) const noexcept // *NOPAD*","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23022,23027,23027]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/operator_spaceship/","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    const char* type_name() const noexcept","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23463,23468,23470,23472,23474,23476,23478,23480,23485]}],"prevLine":"    JSON_HEDLEY_RETURNS_NON_NULL","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"        const auto get_op = [](const std::string & op)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24010,24014,24018,24022,24026,24030,24034,24037]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"        const auto operation_add = [&result](json_pointer & ptr, basic_json val)","falseAlarm":false,"level":1,"message":"The 'return' statement should be the last statement of a function.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24041,24047]}],"prevLine":"        // wrapper for \"add\" operation; add value at ptr","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"    static basic_json diff(const basic_json& source, const basic_json& target,","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"                           const std::string& path = \"\")","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24285,24294,24304,24414]}],"prevLine":"    JSON_HEDLEY_WARN_UNUSED_RESULT","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2513","currLine":"    return ::strlen(cstr) + concat_length(rest...);","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"}","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4255]}],"prevLine":"    // cppcheck-suppress ignoredReturnValue","sastId":"MISRA-CPP-18-0-5"}
{"code":"V2513","currLine":"    auto length = std::strlen(reinterpret_cast<const char*>(b));","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"    const auto* ptr = reinterpret_cast<const char*>(b);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6591]}],"prevLine":"{","sastId":"MISRA-CPP-18-0-5"}
{"code":"V2514","currLine":"    union json_value","falseAlarm":false,"level":1,"message":"Unions should not be used.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19728]}],"prevLine":"    */","sastId":"MISRA-CPP-9-5-1"}
{"code":"V2516","currLine":"        else if (number_type == token_type::value_integer)","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8640]}],"prevLine":"        }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                else if (N <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15288]}],"prevLine":"                // LCOV_EXCL_START","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                else if (N <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15326]}],"prevLine":"                // LCOV_EXCL_START","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                    else if (j.m_data.m_value.binary->subtype() <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15360]}],"prevLine":"                    }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                else if (N <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15389]}],"prevLine":"                // LCOV_EXCL_START","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                else if (N <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15428]}],"prevLine":"                // LCOV_EXCL_START","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                    else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15501]}],"prevLine":"                    }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                    else if (j.m_data.m_value.number_integer >= (std::numeric_limits<std::int64_t>::min)() &&","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                             j.m_data.m_value.number_integer <= (std::numeric_limits<std::int64_t>::max)())","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15536]}],"prevLine":"                    }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15572]}],"prevLine":"                }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                else if (N <= (std::numeric_limits<std::uint32_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15608]}],"prevLine":"                }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                else if (N <= (std::numeric_limits<std::uint32_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15637]}],"prevLine":"                }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                else if (N <= (std::numeric_limits<std::uint32_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15711]}],"prevLine":"                }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                else if (N <= (std::numeric_limits<std::uint32_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15750]}],"prevLine":"                }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"        else if (dtype == 'D')","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16757]}],"prevLine":"        }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                    else if (current_item.is_object())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19905]}],"prevLine":"                    }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                else if (is_binary())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21765]}],"prevLine":"                }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"                else if (is_binary())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21836]}],"prevLine":"                }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"        JSON_IMPLEMENT_OPERATOR( ==, true, false, false)","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"#ifdef __GNUC__","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22994]}],"prevLine":"        const_reference lhs = *this;","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"        JSON_IMPLEMENT_OPERATOR(<=>, // *NOPAD*","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                                std::partial_ordering::equivalent,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23027]}],"prevLine":"        // we compare types.","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2516","currLine":"            else if (parent.is_array())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24130]}],"prevLine":"            }","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2517","currLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u) & 0x1Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6347]}],"prevLine":"            {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes_filled = 2;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6348]}],"prevLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u) & 0x1Fu));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u) & 0x0Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6353]}],"prevLine":"            {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6354]}],"prevLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u) & 0x0Fu));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes_filled = 3;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6355]}],"prevLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | ((static_cast<unsigned int>(wc) >> 18u) & 0x07u));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 12u) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6360]}],"prevLine":"            {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 12u) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6361]}],"prevLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | ((static_cast<unsigned int>(wc) >> 18u) & 0x07u));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6362]}],"prevLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 12u) & 0x3Fu));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes_filled = 4;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6363]}],"prevLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6405]}],"prevLine":"            {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes_filled = 2;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6406]}],"prevLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u)));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6411]}],"prevLine":"            {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6412]}],"prevLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u)));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes_filled = 3;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6413]}],"prevLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                    const auto charcode = 0x10000u + (((static_cast<unsigned int>(wc) & 0x3FFu) << 10u) | (wc2 & 0x3FFu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | (charcode >> 18u));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6421]}],"prevLine":"                    const auto wc2 = static_cast<unsigned int>(input.get_character());","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | (charcode >> 18u));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 12u) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6422]}],"prevLine":"                    const auto charcode = 0x10000u + (((static_cast<unsigned int>(wc) & 0x3FFu) << 10u) | (wc2 & 0x3FFu));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                    utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 12u) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 6u) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6423]}],"prevLine":"                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | (charcode >> 18u));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                    utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 6u) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (charcode & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6424]}],"prevLine":"                    utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 12u) & 0x3Fu));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                    utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (charcode & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    utf8_bytes_filled = 4;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6425]}],"prevLine":"                    utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 6u) & 0x3Fu));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        const auto factors = { 12u, 8u, 4u, 0u };","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        for (const auto factor : factors)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7548]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x30u) << factor);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7555]}],"prevLine":"            {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x37u) << factor);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7559]}],"prevLine":"            {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x57u) << factor);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7563]}],"prevLine":"            {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                                        (static_cast<unsigned int>(codepoint1) << 10u)","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                                        // low surrogate occupies the least significant 15 bits","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7723]}],"prevLine":"                                                        // high surrogate occupies the most significant 22 bits","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                                        - 0x35FDC00u);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7729]}],"prevLine":"                                                        // (0xD800 << 10) + DC00 - 0x10000 = 0x35FDC00","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                add(static_cast<char_int_type>(0xC0u | (static_cast<unsigned int>(codepoint) >> 6u)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7764]}],"prevLine":"                                // 2-byte characters: 110xxxxx 10xxxxxx","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7765]}],"prevLine":"                                add(static_cast<char_int_type>(0xC0u | (static_cast<unsigned int>(codepoint) >> 6u)));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                add(static_cast<char_int_type>(0xE0u | (static_cast<unsigned int>(codepoint) >> 12u)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7770]}],"prevLine":"                                // 3-byte characters: 1110xxxx 10xxxxxx 10xxxxxx","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7771]}],"prevLine":"                                add(static_cast<char_int_type>(0xE0u | (static_cast<unsigned int>(codepoint) >> 12u)));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7772]}],"prevLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                add(static_cast<char_int_type>(0xF0u | (static_cast<unsigned int>(codepoint) >> 18u)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 12u) & 0x3Fu)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7777]}],"prevLine":"                                // 4-byte characters: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 12u) & 0x3Fu)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7778]}],"prevLine":"                                add(static_cast<char_int_type>(0xF0u | (static_cast<unsigned int>(codepoint) >> 18u)));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7779]}],"prevLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 12u) & 0x3Fu)));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7780]}],"prevLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                           conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9773]}],"prevLine":"                return get_cbor_array(","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                return get_cbor_object(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9827]}],"prevLine":"            case 0xB7:","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                const auto half = static_cast<unsigned int>((byte1 << 8u) + byte2);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                const double val = [&half]","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10000]}],"prevLine":"                // is shown in Fig. 3.","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                    const int exp = (half >> 10u) & 0x1Fu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    const unsigned int mant = half & 0x3FFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10003]}],"prevLine":"                {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                    const unsigned int mant = half & 0x3FFu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10004]}],"prevLine":"                    const int exp = (half >> 10u) & 0x1Fu;","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                return sax->number_float((half & 0x8000u) != 0","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                         ? static_cast<number_float_t>(-val)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10019]}],"prevLine":"                }();","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                return get_string(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10091]}],"prevLine":"            {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                return get_binary(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10187]}],"prevLine":"            {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                return get_msgpack_object(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10497]}],"prevLine":"            case 0x8F:","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                return get_msgpack_array(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10516]}],"prevLine":"            case 0x9F:","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                return get_string(input_format_t::msgpack, static_cast<unsigned int>(current) & 0x1Fu, result);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10765]}],"prevLine":"            {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                const auto half = static_cast<unsigned int>((byte2 << 8u) + byte1);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                const double val = [&half]","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11547]}],"prevLine":"                // is shown in Fig. 3.","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                    const int exp = (half >> 10u) & 0x1Fu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    const unsigned int mant = half & 0x3FFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11550]}],"prevLine":"                {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                    const unsigned int mant = half & 0x3FFu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11551]}],"prevLine":"                    const int exp = (half >> 10u) & 0x1Fu;","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                return sax->number_float((half & 0x8000u) != 0","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                         ? static_cast<number_float_t>(-val)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11566]}],"prevLine":"                }();","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        return /*id*/ 1ul + name.size() + /*zero-terminator*/1u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16009]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        return /*id*/ 1ul + name.size() + /*zero-terminator*/1u;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16009]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"            name.size() + 1u);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16021]}],"prevLine":"            reinterpret_cast<const CharType*>(name.c_str()),","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        return sizeof(std::int32_t) + value.size() + 1ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16049]}],"prevLine":"    {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        write_number<std::int32_t>(static_cast<std::int32_t>(value.size() + 1ul), true);","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"        oa->write_characters(","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16060]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        std::size_t array_index = 0ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16149]}],"prevLine":"    {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        return sizeof(std::int32_t) + embedded_document_size + 1ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16156]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        return sizeof(std::int32_t) + value.size() + 1ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16164]}],"prevLine":"    {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        std::size_t array_index = 0ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16176]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                return header_size + 1ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16220]}],"prevLine":"            case value_t::boolean:","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                return header_size + 8ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16223]}],"prevLine":"            case value_t::number_float:","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                return header_size + 0ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16235]}],"prevLine":"            case value_t::null:","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                return 0ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"                // LCOV_EXCL_STOP","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16241]}],"prevLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        return sizeof(std::int32_t) + document_size + 1ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16307]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        const std::uint64_t u_lo = x.f & 0xFFFFFFFFu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t u_hi = x.f >> 32u;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17017]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        const std::uint64_t u_hi = x.f >> 32u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17018]}],"prevLine":"        const std::uint64_t u_lo = x.f & 0xFFFFFFFFu;","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t v_hi = y.f >> 32u;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17019]}],"prevLine":"        const std::uint64_t u_hi = x.f >> 32u;","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        const std::uint64_t v_hi = y.f >> 32u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17020]}],"prevLine":"        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        const std::uint64_t p0_hi = p0 >> 32u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17027]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t p1_hi = p1 >> 32u;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17028]}],"prevLine":"        const std::uint64_t p0_hi = p0 >> 32u;","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        const std::uint64_t p1_hi = p1 >> 32u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17029]}],"prevLine":"        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t p2_hi = p2 >> 32u;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17030]}],"prevLine":"        const std::uint64_t p1_hi = p1 >> 32u;","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        const std::uint64_t p2_hi = p2 >> 32u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17031]}],"prevLine":"        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        Q += std::uint64_t{1} << (64u - 32u - 1u); // round, ties up","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17044]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        const std::uint64_t h = p3 + p2_hi + p1_hi + (Q >> 32u);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17046]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        while ((x.f >> 63u) == 0)","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17059]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"            x.f <<= 1u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            x.e--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17061]}],"prevLine":"        {","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                                                      static_cast<std::uint16_t>(0xDC00u + (codepoint & 0x3FFu))));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18486]}],"prevLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 13, \"\\\\u%04x\\\\u%04x\",","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                                                                      static_cast<std::uint16_t>(0xDC00u + (codepoint & 0x3FFu))));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                    bytes += 12;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18487]}],"prevLine":"                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"            x = x / 10000u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            n_digits += 4;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18676]}],"prevLine":"            }","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                ? (byte & 0x3fu) | (codep << 6u)","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                : (0xFFu >> type) & (byte);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18937]}],"prevLine":"        codep = (state != UTF8_ACCEPT)","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"                : (0xFFu >> type) & (byte);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18938]}],"prevLine":"                ? (byte & 0x3fu) | (codep << 6u)","sastId":"MISRA-CPP-2-13-4"}
{"code":"V2517","currLine":"        const std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        JSON_ASSERT(index < utf8d.size());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18940]}],"sastId":"MISRA-CPP-2-13-4"}
{"code":"V2520","currLine":"        switch (anchor.m_object->type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5267,5270,5281,5293]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"    switch (j.type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6031,6034,6039,6051,6061,6067,6073,6079,6085,6091,6104]}],"prevLine":"    const auto type = static_cast<std::size_t>(j.type());","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (t)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7437,7439,7441,7443,7445,7447,7451,7453,7455,7457,7459,7461,7463,7465,7467,7469,7472]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"            switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7638,7641,7648,7796,7802,7808,7814,7820,7826,7832,7838,7844,7850,7856,7862,7868,7874,7880,7886,7892,7898,7904,7910,7916,7922,7928,7934,7940,7946,7952,7958,7964,7970,7976,7982,8204]}],"prevLine":"            // get next character","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"                    switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7656,7787]}],"prevLine":"                {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8219,8222,8241,8276]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"                    switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8226,8231]}],"prevLine":"                {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"                    switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8245,8248,8254,8269]}],"prevLine":"                {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"                            switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8256,8258,8261]}],"prevLine":"                        {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8352,8354,8360,8374,8381]}],"prevLine":"        // state (init): we just found out we need to scan a number","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8388,8390,8404,8410]}],"prevLine":"        number_type = token_type::value_integer;","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8419,8421,8428,8434]}],"prevLine":"        // state: we just parse a zero (maybe with a leading minus sign)","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8440,8451,8457,8464,8470]}],"prevLine":"        // state: we just parsed a number 0-9 (maybe with a leading minus sign)","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8477,8488,8494]}],"prevLine":"        number_type = token_type::value_float;","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8503,8514,8521,8527]}],"prevLine":"        // we just parsed at least one number after a decimal point","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8534,8537,8552,8558]}],"prevLine":"        number_type = token_type::value_float;","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8568,8579,8585]}],"prevLine":"        // we just parsed an exponent sign","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8594,8605,8611]}],"prevLine":"        // we just parsed a number after the exponent or exponent sign","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8906,8909,8911,8913,8915,8917,8919,8923,8928,8933,8940,8954,8960,8964]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (format)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9258,9278]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (element_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9420,9422,9428,9435,9440,9445,9452,9457,9462,9468,9474]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (get_char ? get() : current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9568,9571,9598,9601,9607,9613,9619,9649,9652,9658,9664,9670,9706,9741,9771,9775,9781,9787,9793,9799,9826,9829,9835,9841,9847,9853,9874,9967,9970,9973,9976,10024,10030,10036]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"                switch (tag_handler)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9876,9878,9885,9920,9961]}],"prevLine":"            {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"                        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9924,9954]}],"prevLine":"                        // use binary subtype and store in binary container","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"                    switch (exp)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10007,10009,10011,10015]}],"prevLine":"                    JSON_ASSERT(mant <= 1024);","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10063,10089,10094,10100,10106,10112,10118,10132]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10159,10185,10190,10197,10204,10211,10218,10232]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10343,10346,10477,10496,10515,10553,10559,10562,10565,10578,10584,10590,10596,10602,10608,10614,10620,10626,10632,10638,10644,10650,10656,10662,10700,10703]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10729,10763,10768,10774,10780,10786]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10814,10816,10823,10830,10837,10847,10857,10867,10875,10883,10891,10899,10907]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11006,11008,11014,11020,11026,11032,11038,11048,11058]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (prefix)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11161,11163,11174,11190,11206,11222,11243,11258,11273,11293]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (prefix)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11446,11448,11451,11453,11456,11459,11465,11471,11477,11483,11489,11499,11509,11519,11571,11577,11583,11588,11605,11611,11614]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"                    switch (exp)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11554,11556,11558,11562]}],"prevLine":"                    JSON_ASSERT(mant <= 1024);","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (result_number)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11856,11858,11860,11862,11878]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (format)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12065,12088]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"                switch (last_token)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12362,12364,12409,12506,12513,12533]}],"prevLine":"                // invariant: get_token() was called before each iteration","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (m_object->m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13153,13155,13161]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (m_object->m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13197,13199,13205]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (m_object->m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13348,13350,13353,13364]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (m_object->m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13393,13398,13409]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (m_object->m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13528,13533,13544]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (m_object->m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13557,13562]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"            switch (ptr->type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14388,14450]}],"prevLine":"        {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (j.type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16208,16210,16213,16216,16219,16222,16225,16228,16231,16234,16239]}],"prevLine":"        const auto header_size = calc_bson_entry_header_size(name, j);","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (j.type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16255,16257,16260,16263,16266,16269,16272,16275,16278,16281,16286]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (j.type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16546,16548,16551,16554,16588,16626,16629,16633,16636,16640]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (val.m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18122,18124,18197,18256,18264,18337,18350,18356,18362,18368,18374,18380]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"            switch (decode(state, codepoint, byte))","falseAlarm":false,"level":1,"message":"Instantiation of serializer < basic_json >: Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18414,18416]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"                    switch (codepoint)","falseAlarm":false,"level":1,"message":"Instantiation of serializer < basic_json >: Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18418,18469]}],"prevLine":"                {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"                    switch (error_handler)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18518,18579]}],"prevLine":"                {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"            switch (error_handler)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18610,18640]}],"prevLine":"            // we finish reading, but do not accept: string was incomplete","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (val.type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20165,20197]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22213,22215,22221,22227,22240]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22252,22254,22260,22266,22279]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22291,22293,22299,22313]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        JSON_IMPLEMENT_OPERATOR( ==, true, false, false)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"#ifdef __GNUC__","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22994]}],"prevLine":"        const_reference lhs = *this;","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        JSON_IMPLEMENT_OPERATOR(<=>, // *NOPAD*","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                                std::partial_ordering::equivalent,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23027]}],"prevLine":"        // we compare types.","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"        switch (m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23465,23467,23469,23471,23473,23475,23477,23479,23484]}],"prevLine":"    {","sastId":"MISRA-CPP-6-4-5"}
{"code":"V2520","currLine":"            switch (parent.m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24063,24103]}],"sastId":"MISRA-CPP-6-4-5"}
{"code":"V2522","currLine":"        default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"            JSON_THROW(type_error::create(302, concat(\"type must be number, but is \", j.type_name()), &j));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4705]}],"prevLine":"        case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"        default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"            JSON_THROW(type_error::create(302, concat(\"type must be number, but is \", j.type_name()), &j));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4998]}],"prevLine":"        case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"                        default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                            break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8234]}],"sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"                            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9914]}],"prevLine":"                            }","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11068]}],"sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11349]}],"sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"                default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                    JSON_THROW(detail::type_error::create(313, \"invalid value to unflatten\", &j));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14132]}],"prevLine":"                case detail::value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"                default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                    JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", reference_token, \"'\"), ptr));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14213]}],"prevLine":"                case detail::value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"                default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                    JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", reference_token, \"'\"), ptr));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14264]}],"prevLine":"                case detail::value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"                default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                    JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", reference_token, \"'\"), ptr));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14320]}],"prevLine":"                case detail::value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"                default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                    JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", reference_token, \"'\"), ptr));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14371]}],"prevLine":"                case detail::value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15119]}],"prevLine":"            case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15445]}],"prevLine":"            case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15767]}],"prevLine":"            case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15986]}],"prevLine":"            case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"                default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19960]}],"prevLine":"                case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20373]}],"prevLine":"            case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                JSON_THROW(invalid_iterator::create(206, detail::concat(\"cannot construct with iterators from \", first.m_object->type_name()), first.m_object));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20431]}],"prevLine":"            case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20509]}],"prevLine":"            case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                JSON_THROW(type_error::create(307, detail::concat(\"cannot use erase() with \", type_name()), this));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21792]}],"prevLine":"            case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                JSON_THROW(type_error::create(307, detail::concat(\"cannot use erase() with \", type_name()), this));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21865]}],"prevLine":"            case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2522","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22386]}],"prevLine":"            case value_t::discarded:","sastId":"MISRA-CPP-6-4-6"}
{"code":"V2523","currLine":"    seed ^= h + 0x9e3779b9 + (seed << 6U) + (seed >> 2U);","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"    return seed;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6007]}],"prevLine":"{","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xAB70FE17C79AC6CA, -1060, -300 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xFF77B1FCBEBCDC4F, -1034, -292 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17294]}],"prevLine":"        {","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xFF77B1FCBEBCDC4F, -1034, -292 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xBE5691EF416BD60C, -1007, -284 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17295]}],"prevLine":"            { 0xAB70FE17C79AC6CA, -1060, -300 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xBE5691EF416BD60C, -1007, -284 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x8DD01FAD907FFC3C,  -980, -276 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17296]}],"prevLine":"            { 0xFF77B1FCBEBCDC4F, -1034, -292 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x8DD01FAD907FFC3C,  -980, -276 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xD3515C2831559A83,  -954, -268 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17297]}],"prevLine":"            { 0xBE5691EF416BD60C, -1007, -284 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xD3515C2831559A83,  -954, -268 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x9D71AC8FADA6C9B5,  -927, -260 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17298]}],"prevLine":"            { 0x8DD01FAD907FFC3C,  -980, -276 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x9D71AC8FADA6C9B5,  -927, -260 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xEA9C227723EE8BCB,  -901, -252 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17299]}],"prevLine":"            { 0xD3515C2831559A83,  -954, -268 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xEA9C227723EE8BCB,  -901, -252 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xAECC49914078536D,  -874, -244 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17300]}],"prevLine":"            { 0x9D71AC8FADA6C9B5,  -927, -260 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xAECC49914078536D,  -874, -244 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x823C12795DB6CE57,  -847, -236 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17301]}],"prevLine":"            { 0xEA9C227723EE8BCB,  -901, -252 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x823C12795DB6CE57,  -847, -236 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xC21094364DFB5637,  -821, -228 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17302]}],"prevLine":"            { 0xAECC49914078536D,  -874, -244 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xC21094364DFB5637,  -821, -228 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x9096EA6F3848984F,  -794, -220 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17303]}],"prevLine":"            { 0x823C12795DB6CE57,  -847, -236 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x9096EA6F3848984F,  -794, -220 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xD77485CB25823AC7,  -768, -212 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17304]}],"prevLine":"            { 0xC21094364DFB5637,  -821, -228 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xD77485CB25823AC7,  -768, -212 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xA086CFCD97BF97F4,  -741, -204 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17305]}],"prevLine":"            { 0x9096EA6F3848984F,  -794, -220 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xA086CFCD97BF97F4,  -741, -204 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xEF340A98172AACE5,  -715, -196 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17306]}],"prevLine":"            { 0xD77485CB25823AC7,  -768, -212 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xEF340A98172AACE5,  -715, -196 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xB23867FB2A35B28E,  -688, -188 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17307]}],"prevLine":"            { 0xA086CFCD97BF97F4,  -741, -204 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xB23867FB2A35B28E,  -688, -188 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x84C8D4DFD2C63F3B,  -661, -180 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17308]}],"prevLine":"            { 0xEF340A98172AACE5,  -715, -196 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x84C8D4DFD2C63F3B,  -661, -180 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xC5DD44271AD3CDBA,  -635, -172 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17309]}],"prevLine":"            { 0xB23867FB2A35B28E,  -688, -188 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xC5DD44271AD3CDBA,  -635, -172 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x936B9FCEBB25C996,  -608, -164 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17310]}],"prevLine":"            { 0x84C8D4DFD2C63F3B,  -661, -180 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x936B9FCEBB25C996,  -608, -164 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xDBAC6C247D62A584,  -582, -156 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17311]}],"prevLine":"            { 0xC5DD44271AD3CDBA,  -635, -172 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xDBAC6C247D62A584,  -582, -156 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xA3AB66580D5FDAF6,  -555, -148 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17312]}],"prevLine":"            { 0x936B9FCEBB25C996,  -608, -164 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xA3AB66580D5FDAF6,  -555, -148 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xF3E2F893DEC3F126,  -529, -140 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17313]}],"prevLine":"            { 0xDBAC6C247D62A584,  -582, -156 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xF3E2F893DEC3F126,  -529, -140 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xB5B5ADA8AAFF80B8,  -502, -132 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17314]}],"prevLine":"            { 0xA3AB66580D5FDAF6,  -555, -148 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xB5B5ADA8AAFF80B8,  -502, -132 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x87625F056C7C4A8B,  -475, -124 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17315]}],"prevLine":"            { 0xF3E2F893DEC3F126,  -529, -140 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x87625F056C7C4A8B,  -475, -124 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xC9BCFF6034C13053,  -449, -116 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17316]}],"prevLine":"            { 0xB5B5ADA8AAFF80B8,  -502, -132 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xC9BCFF6034C13053,  -449, -116 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x964E858C91BA2655,  -422, -108 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17317]}],"prevLine":"            { 0x87625F056C7C4A8B,  -475, -124 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x964E858C91BA2655,  -422, -108 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xDFF9772470297EBD,  -396, -100 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17318]}],"prevLine":"            { 0xC9BCFF6034C13053,  -449, -116 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xDFF9772470297EBD,  -396, -100 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xA6DFBD9FB8E5B88F,  -369,  -92 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17319]}],"prevLine":"            { 0x964E858C91BA2655,  -422, -108 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xA6DFBD9FB8E5B88F,  -369,  -92 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xF8A95FCF88747D94,  -343,  -84 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17320]}],"prevLine":"            { 0xDFF9772470297EBD,  -396, -100 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xF8A95FCF88747D94,  -343,  -84 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xB94470938FA89BCF,  -316,  -76 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17321]}],"prevLine":"            { 0xA6DFBD9FB8E5B88F,  -369,  -92 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xB94470938FA89BCF,  -316,  -76 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x8A08F0F8BF0F156B,  -289,  -68 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17322]}],"prevLine":"            { 0xF8A95FCF88747D94,  -343,  -84 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x8A08F0F8BF0F156B,  -289,  -68 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xCDB02555653131B6,  -263,  -60 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17323]}],"prevLine":"            { 0xB94470938FA89BCF,  -316,  -76 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xCDB02555653131B6,  -263,  -60 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x993FE2C6D07B7FAC,  -236,  -52 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17324]}],"prevLine":"            { 0x8A08F0F8BF0F156B,  -289,  -68 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x993FE2C6D07B7FAC,  -236,  -52 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xE45C10C42A2B3B06,  -210,  -44 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17325]}],"prevLine":"            { 0xCDB02555653131B6,  -263,  -60 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xE45C10C42A2B3B06,  -210,  -44 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xAA242499697392D3,  -183,  -36 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17326]}],"prevLine":"            { 0x993FE2C6D07B7FAC,  -236,  -52 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xAA242499697392D3,  -183,  -36 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xFD87B5F28300CA0E,  -157,  -28 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17327]}],"prevLine":"            { 0xE45C10C42A2B3B06,  -210,  -44 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xFD87B5F28300CA0E,  -157,  -28 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xBCE5086492111AEB,  -130,  -20 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17328]}],"prevLine":"            { 0xAA242499697392D3,  -183,  -36 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xBCE5086492111AEB,  -130,  -20 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x8CBCCC096F5088CC,  -103,  -12 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17329]}],"prevLine":"            { 0xFD87B5F28300CA0E,  -157,  -28 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x8CBCCC096F5088CC,  -103,  -12 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xD1B71758E219652C,   -77,   -4 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17330]}],"prevLine":"            { 0xBCE5086492111AEB,  -130,  -20 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xD1B71758E219652C,   -77,   -4 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x9C40000000000000,   -50,    4 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17331]}],"prevLine":"            { 0x8CBCCC096F5088CC,  -103,  -12 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x9C40000000000000,   -50,    4 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xE8D4A51000000000,   -24,   12 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17332]}],"prevLine":"            { 0xD1B71758E219652C,   -77,   -4 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xE8D4A51000000000,   -24,   12 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xAD78EBC5AC620000,     3,   20 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17333]}],"prevLine":"            { 0x9C40000000000000,   -50,    4 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xAD78EBC5AC620000,     3,   20 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x813F3978F8940984,    30,   28 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17334]}],"prevLine":"            { 0xE8D4A51000000000,   -24,   12 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x813F3978F8940984,    30,   28 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xC097CE7BC90715B3,    56,   36 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17335]}],"prevLine":"            { 0xAD78EBC5AC620000,     3,   20 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xC097CE7BC90715B3,    56,   36 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x8F7E32CE7BEA5C70,    83,   44 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17336]}],"prevLine":"            { 0x813F3978F8940984,    30,   28 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x8F7E32CE7BEA5C70,    83,   44 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xD5D238A4ABE98068,   109,   52 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17337]}],"prevLine":"            { 0xC097CE7BC90715B3,    56,   36 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xD5D238A4ABE98068,   109,   52 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x9F4F2726179A2245,   136,   60 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17338]}],"prevLine":"            { 0x8F7E32CE7BEA5C70,    83,   44 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x9F4F2726179A2245,   136,   60 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xED63A231D4C4FB27,   162,   68 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17339]}],"prevLine":"            { 0xD5D238A4ABE98068,   109,   52 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xED63A231D4C4FB27,   162,   68 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xB0DE65388CC8ADA8,   189,   76 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17340]}],"prevLine":"            { 0x9F4F2726179A2245,   136,   60 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xB0DE65388CC8ADA8,   189,   76 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x83C7088E1AAB65DB,   216,   84 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17341]}],"prevLine":"            { 0xED63A231D4C4FB27,   162,   68 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x83C7088E1AAB65DB,   216,   84 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xC45D1DF942711D9A,   242,   92 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17342]}],"prevLine":"            { 0xB0DE65388CC8ADA8,   189,   76 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xC45D1DF942711D9A,   242,   92 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x924D692CA61BE758,   269,  100 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17343]}],"prevLine":"            { 0x83C7088E1AAB65DB,   216,   84 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x924D692CA61BE758,   269,  100 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xDA01EE641A708DEA,   295,  108 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17344]}],"prevLine":"            { 0xC45D1DF942711D9A,   242,   92 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xDA01EE641A708DEA,   295,  108 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xA26DA3999AEF774A,   322,  116 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17345]}],"prevLine":"            { 0x924D692CA61BE758,   269,  100 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xA26DA3999AEF774A,   322,  116 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xF209787BB47D6B85,   348,  124 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17346]}],"prevLine":"            { 0xDA01EE641A708DEA,   295,  108 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xF209787BB47D6B85,   348,  124 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xB454E4A179DD1877,   375,  132 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17347]}],"prevLine":"            { 0xA26DA3999AEF774A,   322,  116 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xB454E4A179DD1877,   375,  132 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x865B86925B9BC5C2,   402,  140 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17348]}],"prevLine":"            { 0xF209787BB47D6B85,   348,  124 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x865B86925B9BC5C2,   402,  140 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xC83553C5C8965D3D,   428,  148 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17349]}],"prevLine":"            { 0xB454E4A179DD1877,   375,  132 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xC83553C5C8965D3D,   428,  148 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x952AB45CFA97A0B3,   455,  156 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17350]}],"prevLine":"            { 0x865B86925B9BC5C2,   402,  140 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x952AB45CFA97A0B3,   455,  156 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xDE469FBD99A05FE3,   481,  164 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17351]}],"prevLine":"            { 0xC83553C5C8965D3D,   428,  148 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xDE469FBD99A05FE3,   481,  164 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xA59BC234DB398C25,   508,  172 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17352]}],"prevLine":"            { 0x952AB45CFA97A0B3,   455,  156 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xA59BC234DB398C25,   508,  172 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xF6C69A72A3989F5C,   534,  180 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17353]}],"prevLine":"            { 0xDE469FBD99A05FE3,   481,  164 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xF6C69A72A3989F5C,   534,  180 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xB7DCBF5354E9BECE,   561,  188 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17354]}],"prevLine":"            { 0xA59BC234DB398C25,   508,  172 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xB7DCBF5354E9BECE,   561,  188 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x88FCF317F22241E2,   588,  196 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17355]}],"prevLine":"            { 0xF6C69A72A3989F5C,   534,  180 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x88FCF317F22241E2,   588,  196 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xCC20CE9BD35C78A5,   614,  204 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17356]}],"prevLine":"            { 0xB7DCBF5354E9BECE,   561,  188 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xCC20CE9BD35C78A5,   614,  204 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x98165AF37B2153DF,   641,  212 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17357]}],"prevLine":"            { 0x88FCF317F22241E2,   588,  196 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xE2A0B5DC971F303A,   667,  220 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xA8D9D1535CE3B396,   694,  228 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17359]}],"prevLine":"            { 0x98165AF37B2153DF,   641,  212 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xA8D9D1535CE3B396,   694,  228 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xFB9B7CD9A4A7443C,   720,  236 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17360]}],"prevLine":"            { 0xE2A0B5DC971F303A,   667,  220 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xFB9B7CD9A4A7443C,   720,  236 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xBB764C4CA7A44410,   747,  244 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17361]}],"prevLine":"            { 0xA8D9D1535CE3B396,   694,  228 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xBB764C4CA7A44410,   747,  244 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x8BAB8EEFB6409C1A,   774,  252 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17362]}],"prevLine":"            { 0xFB9B7CD9A4A7443C,   720,  236 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x8BAB8EEFB6409C1A,   774,  252 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xD01FEF10A657842C,   800,  260 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17363]}],"prevLine":"            { 0xBB764C4CA7A44410,   747,  244 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xD01FEF10A657842C,   800,  260 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x9B10A4E5E9913129,   827,  268 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17364]}],"prevLine":"            { 0x8BAB8EEFB6409C1A,   774,  252 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x9B10A4E5E9913129,   827,  268 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xE7109BFBA19C0C9D,   853,  276 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17365]}],"prevLine":"            { 0xD01FEF10A657842C,   800,  260 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xE7109BFBA19C0C9D,   853,  276 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xAC2820D9623BF429,   880,  284 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17366]}],"prevLine":"            { 0x9B10A4E5E9913129,   827,  268 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xAC2820D9623BF429,   880,  284 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x80444B5E7AA7CF85,   907,  292 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17367]}],"prevLine":"            { 0xE7109BFBA19C0C9D,   853,  276 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x80444B5E7AA7CF85,   907,  292 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xBF21E44003ACDD2D,   933,  300 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17368]}],"prevLine":"            { 0xAC2820D9623BF429,   880,  284 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xBF21E44003ACDD2D,   933,  300 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x8E679C2F5E44FF8F,   960,  308 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17369]}],"prevLine":"            { 0x80444B5E7AA7CF85,   907,  292 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x8E679C2F5E44FF8F,   960,  308 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xD433179D9C8CB841,   986,  316 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17370]}],"prevLine":"            { 0xBF21E44003ACDD2D,   933,  300 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0xD433179D9C8CB841,   986,  316 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x9E19DB92B4E31BA9,  1013,  324 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17371]}],"prevLine":"            { 0x8E679C2F5E44FF8F,   960,  308 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2523","currLine":"            { 0x9E19DB92B4E31BA9,  1013,  324 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17372]}],"prevLine":"            { 0xD433179D9C8CB841,   986,  316 },","sastId":"MISRA-CPP-2-13-3"}
{"code":"V2525","currLine":"            switch (decode(state, codepoint, byte))","falseAlarm":false,"level":1,"message":"Instantiation of serializer < basic_json >: Every 'switch' statement should contain at least one non-empty case-clause.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18414]}],"sastId":"MISRA-CPP-6-4-8"}
{"code":"V2525","currLine":"                    switch (codepoint)","falseAlarm":false,"level":1,"message":"Instantiation of serializer < basic_json >: Every 'switch' statement should contain at least one non-empty case-clause.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18418]}],"prevLine":"                {","sastId":"MISRA-CPP-6-4-8"}
{"code":"V2533","currLine":"        j.m_data.m_value = typename BasicJsonType::binary_t(b);","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"        j.assert_invariant();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5475]}],"prevLine":"        j.m_data.m_type = value_t::binary;","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"        j.m_data.m_value = typename BasicJsonType::binary_t(std::move(b));","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"        j.assert_invariant();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5484]}],"prevLine":"        j.m_data.m_type = value_t::binary;","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"            root = BasicJsonType(std::forward<Value>(v));","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"            return &root;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6952]}],"prevLine":"        {","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"        *object_element = BasicJsonType(std::forward<Value>(v));","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"        return object_element;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6966]}],"prevLine":"        JSON_ASSERT(object_element);","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"        BasicJsonType k = BasicJsonType(val);","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7071]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"        auto value = BasicJsonType(std::forward<Value>(v));","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7218]}],"prevLine":"        // create value","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"            const auto number = BasicJsonType(n).dump();","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"            write_number_with_ubjson_prefix(number.size(), true, use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16450]}],"sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"            const auto number = BasicJsonType(n).dump();","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"            write_number_with_ubjson_prefix(number.size(), true, use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16531]}],"sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"        return operator[](typename object_t::key_type(key));","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21464]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"        return operator[](typename object_t::key_type(key));","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21470]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2537","currLine":"    static std::string diagnostics(std::nullptr_t /*leaf_element*/)","falseAlarm":false,"level":1,"message":"Functions should not have unused parameters. Consider inspecting the first unnamed parameter.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4392]}],"sastId":"MISRA-CPP-0-1-11"}
{"code":"V2537","currLine":"    primitive_iterator_t operator++(int)& noexcept // NOLINT(cert-dcl21-cpp)","falseAlarm":false,"level":1,"message":"Functions should not have unused parameters. Consider inspecting the first unnamed parameter.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12802]}],"sastId":"MISRA-CPP-0-1-11"}
{"code":"V2537","currLine":"    primitive_iterator_t operator--(int)& noexcept // NOLINT(cert-dcl21-cpp)","falseAlarm":false,"level":1,"message":"Functions should not have unused parameters. Consider inspecting the first unnamed parameter.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12815]}],"sastId":"MISRA-CPP-0-1-11"}
{"code":"V2546","currLine":"    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 10000000) + (minor * 100000) + (patch)))","falseAlarm":false,"level":1,"message":"Each parameter of the macro should be surrounded by parentheses. Consider inspecting parameters 'major', 'minor' of the 'JSON_HEDLEY_MSVC_VERSION_CHECK' macro.","nextLine":"#elif defined(_MSC_VER) && (_MSC_VER >= 1200)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[425]}],"prevLine":"#elif defined(_MSC_VER) && (_MSC_VER >= 1400)","sastId":"MISRA-CPP-16-0-6"}
{"code":"V2546","currLine":"    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 1000000) + (minor * 10000) + (patch)))","falseAlarm":false,"level":1,"message":"Each parameter of the macro should be surrounded by parentheses. Consider inspecting parameters 'major', 'minor' of the 'JSON_HEDLEY_MSVC_VERSION_CHECK' macro.","nextLine":"#else","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[427]}],"prevLine":"#elif defined(_MSC_VER) && (_MSC_VER >= 1200)","sastId":"MISRA-CPP-16-0-6"}
{"code":"V2546","currLine":"    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_VER >= ((major * 100) + (minor)))","falseAlarm":false,"level":1,"message":"Each parameter of the macro should be surrounded by parentheses. Consider inspecting the 'major' parameter of the 'JSON_HEDLEY_MSVC_VERSION_CHECK' macro.","nextLine":"#endif","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[429]}],"prevLine":"#else","sastId":"MISRA-CPP-16-0-6"}
{"code":"V2547","currLine":"    std::transform(j.rbegin(), j.rend(),","falseAlarm":false,"level":1,"message":"The return value of non-void function 'transform' should be used.","nextLine":"                   std::front_inserter(l), [](const BasicJsonType & i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4786]}],"prevLine":"    l.clear();","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"    std::transform(j.begin(), j.end(), std::begin(l),","falseAlarm":false,"level":1,"message":"The return value of non-void function 'transform' should be used.","nextLine":"                   [](const BasicJsonType & elem)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4803]}],"prevLine":"    l.resize(j.size());","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"    std::transform(j.begin(), j.end(),","falseAlarm":false,"level":1,"message":"The return value of non-void function 'transform' should be used.","nextLine":"                   std::inserter(ret, end(ret)), [](const BasicJsonType & i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4851]}],"prevLine":"    ret.reserve(j.size());","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"    std::transform(","falseAlarm":false,"level":1,"message":"The return value of non-void function 'transform' should be used.","nextLine":"        j.begin(), j.end(), std::inserter(ret, end(ret)),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4871]}],"prevLine":"    ConstructibleArrayType ret;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"    std::transform(","falseAlarm":false,"level":1,"message":"The return value of non-void function 'transform' should be used.","nextLine":"        inner_object->begin(), inner_object->end(),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4945]}],"prevLine":"    using value_type = typename ConstructibleObjectType::value_type;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'emplace' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5062]}],"prevLine":"        }","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'emplace' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5082]}],"prevLine":"        }","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            std::copy(std::begin(arr), std::end(arr), j.m_data.m_value.array->begin());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'copy' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5591]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7551]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_LIKELY(*range <= current && current <= *(++range))) // NOLINT(bugprone-inc-dec-in-conditions)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7597]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8877]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                get_ignore_noop();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_ignore_noop' should be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9287]}],"prevLine":"            {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9291]}],"prevLine":"            {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, \"cstring\")))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9343]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                        get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"                        return get_cbor_binary(b) && sax->binary(b);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9957]}],"prevLine":"                        }","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                    get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"                    if (JSON_HEDLEY_UNLIKELY(!get_cbor_string(key) || !sax->key(key)))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10300]}],"prevLine":"                {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(!get_msgpack_string(key) || !sax->key(key)))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10948]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            get(); ","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10998]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                get_ignore_noop();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_ignore_noop' should be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11137]}],"prevLine":"                dim.push_back(dimlen);","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        get_ignore_noop();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_ignore_noop' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11383]}],"sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            get_ignore_noop();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_ignore_noop' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(current != '#'))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11401]}],"sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, \"char\")))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11590]}],"prevLine":"            {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                get_ignore_noop();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_ignore_noop' should be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11725]}],"prevLine":"                }","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                get_ignore_noop();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_ignore_noop' should be used.","nextLine":"                key.clear();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11807]}],"prevLine":"                }","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, \"number\")))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11833]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11910]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, \"number\")))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11939]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        std::memcpy(&result, vec.data(), sizeof(NumberType));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memcpy' should be used.","nextLine":"        return true;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11957]}],"prevLine":"        // step 2: convert array into number of type T and return","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, \"string\")))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11983]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, \"binary\")))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12016]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        get_token();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_token' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12249]}],"prevLine":"        // read first token","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                sdp.parse_error(m_lexer.get_position(),","falseAlarm":false,"level":1,"message":"The return value of non-void function 'parse_error' should be used.","nextLine":"                                m_lexer.get_token_string(),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12272]}],"prevLine":"            {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                sdp.parse_error(m_lexer.get_position(),","falseAlarm":false,"level":1,"message":"The return value of non-void function 'parse_error' should be used.","nextLine":"                                m_lexer.get_token_string(),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12300]}],"prevLine":"            {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                        get_token();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_token' should be used.","nextLine":"                        continue;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12405]}],"prevLine":"                        // parse values","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                    get_token();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_token' should be used.","nextLine":"                    continue;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12559]}],"prevLine":"                    // parse a new value","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                get_token();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_token' should be used.","nextLine":"                continue;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12613]}],"prevLine":"                // parse values","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        reference_tokens.insert(reference_tokens.end(),","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"                                ptr.reference_tokens.begin(),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13906]}],"prevLine":"    {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        v.insert(v.end(), s, s + length);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14979]}],"prevLine":"    {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        stream.put(c);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'put' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14998]}],"prevLine":"    {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        stream.write(s, static_cast<std::streamsize>(length));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'write' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15004]}],"prevLine":"    {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        str.append(s, length);","falseAlarm":false,"level":1,"message":"Instantiation of output_string_adapter < uint8_t, basic_string < uint8_t, char_traits < uint8_t >, allocator < uint8_t > > >: The return value of non-void function 'append' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15029]}],"prevLine":"    {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        std::memcpy(vec.data(), &n, sizeof(NumberType));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memcpy' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16789]}],"prevLine":"        std::array<CharType, sizeof(NumberType)> vec{};","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        std::memcpy(&result, &x, sizeof(x));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memcpy' should be used.","nextLine":"        return result;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16847]}],"prevLine":"        CharType result;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"    std::memcpy(&target, &source, sizeof(Source));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memcpy' should be used.","nextLine":"    return target;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16961]}],"prevLine":"    Target target;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        std::memset(buf + k, '0', static_cast<size_t>(n) - static_cast<size_t>(k));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memset' should be used.","nextLine":"        // Make it look like a floating-point number (#362, #378)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17906]}],"sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memmove' should be used.","nextLine":"        buf[n] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17920]}],"sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        std::memmove(buf + (2 + static_cast<size_t>(-n)), buf, static_cast<size_t>(k));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memmove' should be used.","nextLine":"        buf[0] = '0';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17930]}],"sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        std::memset(buf + 2, '0', static_cast<size_t>(-n));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memset' should be used.","nextLine":"        return buf + (2U + static_cast<size_t>(-n) + static_cast<size_t>(k));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17933]}],"prevLine":"        buf[1] = '.';","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        std::memmove(buf + 2, buf + 1, static_cast<size_t>(k) - 1);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memmove' should be used.","nextLine":"        buf[1] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17949]}],"sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        Container::emplace_back(key, std::forward<T>(t));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'emplace_back' should be used.","nextLine":"        return {std::prev(this->end()), true};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19070]}],"prevLine":"        }","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        Container::emplace_back(std::forward<KeyType>(key), std::forward<T>(t));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'emplace_back' should be used.","nextLine":"        return {std::prev(this->end()), true};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19085]}],"prevLine":"        }","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            insert(*it);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19358]}],"prevLine":"        {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'construct' should be used.","nextLine":"        JSON_ASSERT(obj != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19693]}],"prevLine":"        std::unique_ptr<T, decltype(deleter)> obj(AllocatorTraits::allocate(alloc, 1), deleter);","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                    std::move(array->begin(), array->end(), std::back_inserter(stack));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'move' should be used.","nextLine":"                }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19880]}],"prevLine":"                    stack.reserve(array->size());","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                        std::move(current_item.m_data.m_value.array->begin(), current_item.m_data.m_value.array->end(), std::back_inserter(stack));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'move' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19901]}],"prevLine":"                    {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        swap(m_data.m_type, other.m_data.m_type);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        swap(m_data.m_value, other.m_data.m_value);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20548]}],"prevLine":"        using std::swap;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        swap(m_data.m_value, other.m_data.m_value);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        json_base_class_t::operator=(std::move(other));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20549]}],"prevLine":"        swap(m_data.m_type, other.m_data.m_type);","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        json_base_class_t::operator=(std::move(other));","falseAlarm":false,"level":1,"message":"The return value of non-void function '=' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20550]}],"prevLine":"        swap(m_data.m_value, other.m_data.m_value);","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        set_parent(m_data.m_value.array->back(), old_capacity);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'set_parent' should be used.","nextLine":"        // if val is moved from, basic_json move constructor marks it null, so we do not call the destructor","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22412]}],"prevLine":"        m_data.m_value.array->push_back(std::move(val));","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        set_parent(m_data.m_value.array->back(), old_capacity);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'set_parent' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22445]}],"prevLine":"        m_data.m_value.array->push_back(val);","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        set_parent(res.first->second);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'set_parent' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22476]}],"prevLine":"        auto res = m_data.m_value.object->insert(val);","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        set_parent(res.first->second);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'set_parent' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22557]}],"prevLine":"        auto res = m_data.m_value.object->emplace(std::forward<Args>(args)...);","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        std::swap(m_data.m_type, other.m_data.m_type);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        std::swap(m_data.m_value, other.m_data.m_value);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22774]}],"prevLine":"    {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        std::swap(m_data.m_value, other.m_data.m_value);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22775]}],"prevLine":"        std::swap(m_data.m_type, other.m_data.m_type);","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            swap(*(m_data.m_value.array), other);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22802]}],"prevLine":"            using std::swap;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            swap(*(m_data.m_value.object), other);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22818]}],"prevLine":"            using std::swap;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            swap(*(m_data.m_value.string), other);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22834]}],"prevLine":"            using std::swap;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            swap(*(m_data.m_value.binary), other);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22850]}],"prevLine":"            using std::swap;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"            swap(*(m_data.m_value.binary), other);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22866]}],"prevLine":"            using std::swap;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        o.width(0);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'width' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23287]}],"prevLine":"        // reset width to 0 for subsequent calls to this stream","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        to_cbor(j, result);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'to_cbor' should be used.","nextLine":"        return result;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23545]}],"prevLine":"        std::vector<std::uint8_t> result;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        to_msgpack(j, result);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'to_msgpack' should be used.","nextLine":"        return result;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23568]}],"prevLine":"        std::vector<std::uint8_t> result;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        to_ubjson(j, result, use_size, use_type);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'to_ubjson' should be used.","nextLine":"        return result;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23593]}],"prevLine":"        std::vector<std::uint8_t> result;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        to_bjdata(j, result, use_size, use_type);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'to_bjdata' should be used.","nextLine":"        return result;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23620]}],"prevLine":"        std::vector<std::uint8_t> result;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"        to_bson(j, result);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'to_bson' should be used.","nextLine":"        return result;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23645]}],"prevLine":"        std::vector<std::uint8_t> result;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                result.at(top_pointer);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'at' should be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24054]}],"prevLine":"            {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                        parent.insert(parent.begin() + static_cast<difference_type>(idx), val);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24090]}],"prevLine":"                        // default case: insert add offset","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                    parent.erase(it);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'erase' should be used.","nextLine":"                }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24123]}],"prevLine":"                {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                parent.erase(json_pointer::template array_index<basic_json_t>(last_path));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'erase' should be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24133]}],"prevLine":"                // note erase performs range check","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                    result.insert(result.end(), temp_diff.begin(), temp_diff.end());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"                    ++i;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24317]}],"prevLine":"                    auto temp_diff = diff(source[i], target[i], detail::concat(path, '/', std::to_string(i)));","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                    result.insert(result.begin() + end_index, object(","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24330]}],"prevLine":"                    // indices","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                        result.insert(result.end(), temp_diff.begin(), temp_diff.end());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24365]}],"prevLine":"                        auto temp_diff = diff(it.value(), target[it.key()], path_key);","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"                    erase(it.key());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'erase' should be used.","nextLine":"                }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24439]}],"prevLine":"                {","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2550","currLine":"                static_cast<double>(static_cast<float>(n)) == static_cast<double>(n))","falseAlarm":false,"level":1,"message":"Floating-point expressions should not be directly tested for equality or inequality. It is better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16809]}],"prevLine":"                static_cast<double>(n) <= static_cast<double>((std::numeric_limits<float>::max)()) &&","sastId":"MISRA-CPP-6-2-2"}
{"code":"V2561","currLine":"using string_can_append_op = decltype(std::declval<StringType&>() += std::declval < Arg && > ());","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4275]}],"prevLine":"template<typename StringType, typename Arg>","sastId":"MISRA-CPP-6-2-1"}
{"code":"V2561","currLine":"            object_element = &(ref_stack.back()->m_data.m_value.object->operator[](val) = discarded);","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7080]}],"prevLine":"        {","sastId":"MISRA-CPP-6-2-1"}
{"code":"V2561","currLine":"        return current = ia.get_character();","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used. Consider inspecting the expression: 'current = ia.get_character()'.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11900]}],"prevLine":"        ++chars_read;","sastId":"MISRA-CPP-6-2-1"}
{"code":"V2561","currLine":"        return last_token = m_lexer.scan();","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used. Consider inspecting the expression: 'last_token = m_lexer.scan()'.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12644]}],"prevLine":"    {","sastId":"MISRA-CPP-6-2-1"}
{"code":"V2561","currLine":"        return *this /= std::to_string(array_idx);","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used. Consider inspecting the expression: '* this /= std::to_string(array_idx)'.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13924]}],"prevLine":"    {","sastId":"MISRA-CPP-6-2-1"}
{"code":"V2561","currLine":"        return json_pointer(lhs) /= rhs;","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used. Consider inspecting the expression: 'json_pointer(lhs) /= rhs'.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13932]}],"prevLine":"    {","sastId":"MISRA-CPP-6-2-1"}
{"code":"V2561","currLine":"        return json_pointer(lhs) /= std::move(token);","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used. Consider inspecting the expression: 'json_pointer(lhs) /= std::move(token)'.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13939]}],"prevLine":"    {","sastId":"MISRA-CPP-6-2-1"}
{"code":"V2561","currLine":"        return json_pointer(lhs) /= array_idx;","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used. Consider inspecting the expression: 'json_pointer(lhs) /= array_idx'.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13946]}],"prevLine":"    {","sastId":"MISRA-CPP-6-2-1"}
{"code":"V2561","currLine":"            return result += calc_bson_element_size(el.first, el.second);","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used.","nextLine":"        });","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16304]}],"prevLine":"        {","sastId":"MISRA-CPP-6-2-1"}
{"code":"V2563","currLine":"    return input_adapter(ptr, ptr + length);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"}","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6593]}],"prevLine":"    const auto* ptr = reinterpret_cast<const char*>(b);","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"    return input_adapter(array, array + N);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"}","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6599]}],"prevLine":"{","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        : ia(reinterpret_cast<const char*>(b), reinterpret_cast<const char*>(b) + l) {}","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6615]}],"prevLine":"    span_input_adapter(CharT b, std::size_t l)","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        JSON_ASSERT(char_traits<char_type>::to_char_type(current) == literal_text[0]);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        for (std::size_t i = 1; i < length; ++i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8676]}],"prevLine":"    {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            if (JSON_HEDLEY_UNLIKELY(char_traits<char_type>::to_char_type(get()) != literal_text[i]))","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8679]}],"prevLine":"        {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        v.insert(v.end(), s, s + length);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14979]}],"prevLine":"    {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        JSON_ASSERT(buf[len - 1] != '0');","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf[len - 1]--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17485]}],"prevLine":"    {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        buf[len - 1]--;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        rest += ten_k;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17486]}],"prevLine":"        JSON_ASSERT(buf[len - 1] != '0');","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        //","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17572]}],"prevLine":"        JSON_ASSERT(d <= 9);","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        //","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17679]}],"prevLine":"        JSON_ASSERT(d <= 9);","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        std::memset(buf + k, '0', static_cast<size_t>(n) - static_cast<size_t>(k));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        // Make it look like a floating-point number (#362, #378)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17906]}],"sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        buf[n + 0] = '.';","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf[n + 1] = '0';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17908]}],"prevLine":"        // Make it look like a floating-point number (#362, #378)","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        buf[n + 1] = '0';","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return buf + (static_cast<size_t>(n) + 2);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17909]}],"prevLine":"        buf[n + 0] = '.';","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        return buf + (static_cast<size_t>(n) + 2);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17910]}],"prevLine":"        buf[n + 1] = '0';","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf[n] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17920]}],"sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        buf[n] = '.';","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return buf + (static_cast<size_t>(k) + 1U);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17921]}],"prevLine":"        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        return buf + (static_cast<size_t>(k) + 1U);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17922]}],"prevLine":"        buf[n] = '.';","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        std::memmove(buf + (2 + static_cast<size_t>(-n)), buf, static_cast<size_t>(k));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf[0] = '0';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17930]}],"sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        buf[0] = '0';","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf[1] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17931]}],"prevLine":"        std::memmove(buf + (2 + static_cast<size_t>(-n)), buf, static_cast<size_t>(k));","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        buf[1] = '.';","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        std::memset(buf + 2, '0', static_cast<size_t>(-n));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17932]}],"prevLine":"        buf[0] = '0';","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        std::memset(buf + 2, '0', static_cast<size_t>(-n));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return buf + (2U + static_cast<size_t>(-n) + static_cast<size_t>(k));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17933]}],"prevLine":"        buf[1] = '.';","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        return buf + (2U + static_cast<size_t>(-n) + static_cast<size_t>(k));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17934]}],"prevLine":"        std::memset(buf + 2, '0', static_cast<size_t>(-n));","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        buf += 1;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17942]}],"sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        std::memmove(buf + 2, buf + 1, static_cast<size_t>(k) - 1);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf[1] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17949]}],"sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        buf[1] = '.';","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf += 1 + static_cast<size_t>(k);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17950]}],"prevLine":"        std::memmove(buf + 2, buf + 1, static_cast<size_t>(k) - 1);","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        buf += 1 + static_cast<size_t>(k);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17951]}],"prevLine":"        buf[1] = '.';","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 7, \"\\\\u%04x\",","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                                                                      static_cast<std::uint16_t>(codepoint)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18478]}],"prevLine":"                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 13, \"\\\\u%04x\\\\u%04x\",","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18485]}],"prevLine":"                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        buffer_ptr += n_chars;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18774]}],"prevLine":"        // so we later avoid reversing the result","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        auto* end = ::nlohmann::detail::to_chars(begin, begin + number_buffer.size(), x);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18832]}],"prevLine":"        auto* begin = number_buffer.data();","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            const auto end = std::remove(number_buffer.begin(), number_buffer.begin() + len, thousands_sep);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            std::fill(end, number_buffer.end(), '\\0');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18855]}],"prevLine":"            // NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto): std::remove returns an iterator, see https://github.com/nlohmann/json/issues/3081","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            std::none_of(number_buffer.begin(), number_buffer.begin() + len + 1,","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                         [](char c)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18876]}],"prevLine":"        const bool value_is_int_like =","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"                          std::move(key.get_ref<string_t&>()), (init.begin() + 1)->moved_or_copied()));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22495]}],"prevLine":"            push_back(typename object_t::value_type(","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        return from_cbor(ptr, ptr + len, strict, allow_exceptions, tag_handler);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23703]}],"prevLine":"    {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        return from_msgpack(ptr, ptr + len, strict, allow_exceptions);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23758]}],"prevLine":"    {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        return from_ubjson(ptr, ptr + len, strict, allow_exceptions);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23812]}],"prevLine":"    {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        return from_bson(ptr, ptr + len, strict, allow_exceptions);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23896]}],"prevLine":"    {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"    return nlohmann::json::parse(s, s + n);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"}","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24478]}],"prevLine":"{","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2564","currLine":"                            return (mant == 0)","falseAlarm":false,"level":1,"message":"There should be no 'floating to integral' implicit cast. Consider inspecting the return statement of the function.","nextLine":"                            ? std::numeric_limits<double>::infinity()","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10012]}],"prevLine":"                        case 31:","sastId":"MISRA-CPP-5-0-5"}
{"code":"V2564","currLine":"                            return (mant == 0)","falseAlarm":false,"level":1,"message":"There should be no 'floating to integral' implicit cast. Consider inspecting the return statement of the function.","nextLine":"                            ? std::numeric_limits<double>::infinity()","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11559]}],"prevLine":"                        case 31:","sastId":"MISRA-CPP-5-0-5"}
{"code":"V2565","currLine":"std::size_t hash(const BasicJsonType& j)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 6023, 6046.","nextLine":"{","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6023,6046]}],"prevLine":"template<typename BasicJsonType>","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    bool parse_bson_internal()","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 9313, 9323, 9519, 9437.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9313,9323,9519,9437]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    bool parse_bson_array()","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 9535, 9545, 9519, 9442.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9535,9545,9519,9442]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    bool parse_cbor_internal(const bool get_char,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 9565, 9772, 10259.","nextLine":"                             const cbor_tag_handler_t tag_handler)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9565,9772,10259]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    bool parse_cbor_internal(const bool get_char,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 9565, 9827, 10306.","nextLine":"                             const cbor_tag_handler_t tag_handler)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9565,9827,10306]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    bool parse_cbor_internal(const bool get_char,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 9565, 9917.","nextLine":"                             const cbor_tag_handler_t tag_handler)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9565,9917]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    bool get_cbor_string(string_t& result)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 10056, 10123.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10056,10123]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    bool get_cbor_binary(binary_t& result)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 10152, 10223.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10152,10223]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    bool parse_msgpack_internal()","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 10341, 10497, 10954.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10341,10497,10954]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    bool parse_msgpack_internal()","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 10341, 10516, 10925.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10341,10516,10925]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    bool parse_ubjson_internal(const bool get_char = true)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 10975, 10977, 11612, 11705.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10975,10977,11612,11705]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    bool parse_ubjson_internal(const bool get_char = true)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 10975, 10977, 11615, 11782.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10975,10977,11615,11782]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    bool get_ubjson_ndarray_size(std::vector<size_t>& dim)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 11089, 11095, 11413, 11304.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11089,11095,11413,11304]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    static void flatten(const string_t& reference_string,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 14541, 14559.","nextLine":"                        const BasicJsonType& value,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14541,14559]}],"prevLine":"    template<typename BasicJsonType>","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    void write_cbor(const BasicJsonType& j)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 15129, 15336.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15129,15336]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    void write_msgpack(const BasicJsonType& j)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 15453, 15647.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15453,15647]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    void write_ubjson(const BasicJsonType& j, const bool use_count,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 15779, 15872.","nextLine":"                      const bool use_type, const bool add_prefix = true,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15779,15872]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    void write_ubjson(const BasicJsonType& j, const bool use_count,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 15779, 15930, 16691.","nextLine":"                      const bool use_type, const bool add_prefix = true,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15779,15930,16691]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    void write_bson_array(const string_t& name,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 16170, 16180, 16261.","nextLine":"                          const typename BasicJsonType::array_t& value)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16170,16180,16261]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    void write_bson_object(const typename BasicJsonType::object_t& value)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 16314, 16320, 16258, 16141.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16314,16320,16258,16141]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    void dump(const BasicJsonType& val,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 18116, 18151.","nextLine":"              const bool pretty_print,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18116,18151]}],"prevLine":"    */","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    basic_json& operator=(basic_json other) noexcept (","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 20536, 20550.","nextLine":"        std::is_nothrow_move_constructible<value_t>::value&&","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20536,20550]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/operator=/","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    static basic_json diff(const basic_json& source, const basic_json& target,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 24285, 24316.","nextLine":"                           const std::string& path = \"\")","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24285,24316]}],"prevLine":"    JSON_HEDLEY_WARN_UNUSED_RESULT","sastId":"MISRA-C-17.2"}
{"code":"V2565","currLine":"    void merge_patch(const basic_json& apply_patch)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 24427, 24443.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24427,24443]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/merge_patch/","sastId":"MISRA-C-17.2"}
{"code":"V2570","currLine":"    JSON_ASSERT(!f.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    for (auto pos = s.find(f);                // find first occurrence of f","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[2974]}],"prevLine":"{","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(anchor.m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5265]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            return 0;              // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6105]}],"prevLine":"        default:                   // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_file != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6197]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            JSON_ASSERT(utf8_bytes_index == 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6455]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"            JSON_ASSERT(utf8_bytes_index == 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6456]}],"prevLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6460]}],"prevLine":"        // use buffer","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        return utf8_bytes[utf8_bytes_index++];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6461]}],"prevLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6881]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6882]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6891]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6892]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_array());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6913]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(ref_stack.back()->is_array());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6914]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6956]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(object_element);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6964]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        *object_element = BasicJsonType(std::forward<Value>(v));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6965]}],"prevLine":"        JSON_ASSERT(ref_stack.back()->is_object());","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7101]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7102]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7157]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7158]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7208]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7243]}],"prevLine":"        // we now only expect arrays and objects","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        // check if we should store an element for the current key","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7253]}],"prevLine":"        // object","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(!key_keep_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        const bool store_element = key_keep_stack.back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7255]}],"prevLine":"        // check if we should store an element for the current key","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        *object_element = std::move(value);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7264]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(loc != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7519]}],"prevLine":"        const auto* loc = localeconv();","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(current == 'u');","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        int codepoint = 0;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7545]}],"prevLine":"        // this function only makes sense after reading `\\u`","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(0x0000 <= codepoint && codepoint <= 0xFFFF);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        return codepoint;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7571]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        add(current);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7592]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(current == '\\\"');","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7633]}],"prevLine":"        // we entered the function by reading an open quote","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                            JSON_ASSERT(0x00 <= codepoint && codepoint <= 0x10FFFF);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7753]}],"prevLine":"                            // result of the above calculation yields a proper codepoint","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8382]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8629]}],"prevLine":"            // we checked the number format before","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8645]}],"prevLine":"            // we checked the number format before","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8662]}],"prevLine":"        // we checked the number format before","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(char_traits<char_type>::to_char_type(current) == literal_text[0]);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        for (std::size_t i = 1; i < length; ++i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8676]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"            JSON_ASSERT(!token_string.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            token_string.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8768]}],"prevLine":"        {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9279]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                        return false;        // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9962]}],"prevLine":"                    default:                 // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10005]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10006]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11552]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11553]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12089]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(!states.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12575]}],"prevLine":"                    // are effectively jumping to the beginning of this if.","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(!states.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12629]}],"prevLine":"                // are effectively jumping to the beginning of this if.","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12971]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13068]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13112]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13151]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                return m_it.object_iterator->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13157]}],"prevLine":"            {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                return *m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13163]}],"prevLine":"            {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13195]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                return &(m_it.object_iterator->second);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13201]}],"prevLine":"            {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                return &*m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13207]}],"prevLine":"            {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13248]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13299]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13346]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13391]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13447]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13526]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13555]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13593]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(reference_token[pos] == '~');","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14513]}],"prevLine":"            {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(oa);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15093]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15846]}],"prevLine":"                {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    oa->write_character(to_char_type('$'));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15892]}],"prevLine":"                {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15944]}],"prevLine":"                {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                return 0ul;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16240]}],"prevLine":"            default:","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16287]}],"prevLine":"            default:","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(x.e == y.e);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(x.f >= y.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16980]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(x.f >= y.f);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16981]}],"prevLine":"        JSON_ASSERT(x.e == y.e);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(x.f != 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17057]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(delta >= 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17076]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17077]}],"prevLine":"        JSON_ASSERT(delta >= 0);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17099]}],"prevLine":"{","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17100]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(e >= -1500);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(e <=  1500);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17380]}],"prevLine":"    // NB: log_10(2) ~= 78913 / 2^18","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(e <=  1500);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    const int f = kAlpha - e - 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17381]}],"prevLine":"    JSON_ASSERT(e >= -1500);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(index >= 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17386]}],"prevLine":"    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17387]}],"prevLine":"    JSON_ASSERT(index >= 0);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17390]}],"prevLine":"    const cached_power cached = kCachedPowers[static_cast<std::size_t>(index)];","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17391]}],"prevLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(len >= 1);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(dist <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17457]}],"prevLine":"{","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(dist <= delta);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(rest <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17458]}],"prevLine":"    JSON_ASSERT(len >= 1);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(rest <= delta);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(ten_k > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17459]}],"prevLine":"    JSON_ASSERT(dist <= delta);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(ten_k > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17460]}],"prevLine":"    JSON_ASSERT(rest <= delta);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(buf[len - 1] != '0');","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        buf[len - 1]--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17485]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(M_plus.e <= kGamma);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17513]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(M_plus.e <= kGamma);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17514]}],"prevLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(p1 > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17535]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17571]}],"prevLine":"        //","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(p2 > delta);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17658]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        p2 *= 10;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17669]}],"prevLine":"        //","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17678]}],"prevLine":"        //","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(m_plus.e == v.e);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17739]}],"prevLine":"{","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(m_plus.e == v.e);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17740]}],"prevLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17801]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17802]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(e > -1000);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(e <  1000);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17838]}],"prevLine":"{","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(e <  1000);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17839]}],"prevLine":"    JSON_ASSERT(e > -1000);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(min_exp < 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(max_exp > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17891]}],"prevLine":"{","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(max_exp > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17892]}],"prevLine":"    JSON_ASSERT(min_exp < 0);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(k > n);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17918]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17976]}],"prevLine":"    static_cast<void>(last); // maybe unused - fix warning","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18001]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(len <= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18011]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18018]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18019]}],"prevLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18020]}],"prevLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18156]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18157]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18184]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    o->write_character('\\\"');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18185]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18226]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    dump(val.m_data.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18247]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18381]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18580]}],"prevLine":"                        default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18641]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(n_chars < number_buffer.size() - 1);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18770]}],"prevLine":"        // spare 1 byte for '\\0'","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(len > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        // check if buffer was large enough","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18847]}],"prevLine":"        // negative value indicates an error","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(static_cast<std::size_t>(len) < number_buffer.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18849]}],"prevLine":"        // check if buffer was large enough","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"            JSON_ASSERT((end - number_buffer.begin()) <= len);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            len = (end - number_buffer.begin());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18857]}],"prevLine":"            std::fill(end, number_buffer.end(), '\\0');","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(byte < utf8d.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        const std::uint8_t type = utf8d[byte];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18931]}],"sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(index < utf8d.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        state = utf8d[index];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18941]}],"prevLine":"        const std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        return x; // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18953]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(x < 0 && x < (std::numeric_limits<number_integer_t>::max)()); // NOLINT(misc-redundant-expression)","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        return static_cast<number_unsigned_t>(-(x + 1)) + 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18968]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(obj != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        return obj.release();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19694]}],"prevLine":"        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19989]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19990]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19991]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19992]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20198]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_data.m_type == val.type());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        set_parents();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20200]}],"prevLine":"        }","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(first.m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(last.m_object != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20339]}],"prevLine":"    {","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(last.m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20340]}],"prevLine":"        JSON_ASSERT(first.m_object != nullptr);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21452]}],"prevLine":"            auto it = m_data.m_value.object->find(key);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21507]}],"prevLine":"            auto it = m_data.m_value.object->find(std::forward<KeyType>(key));","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"        JSON_ASSERT(m_data.m_value.array != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22574]}],"prevLine":"        iterator result(this);","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2570","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24104]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23676]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23692]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23718]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23733]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23748]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23772]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23787]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23802]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23826]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23841]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bjdata).sax_parse(input_format_t::bjdata, &sdp, strict);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23856]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bjdata).sax_parse(input_format_t::bjdata, &sdp, strict);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23871]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23886]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23910]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2578","currLine":"    JSON_ASSERT(!f.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    for (auto pos = s.find(f);                // find first occurrence of f","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[2974]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(!f.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    for (auto pos = s.find(f);                // find first occurrence of f","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[2974]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(anchor.m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5265]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(anchor.m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5265]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            return 0;              // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6105]}],"prevLine":"        default:                   // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            return 0;              // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6105]}],"prevLine":"        default:                   // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_file != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6197]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_file != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6197]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            JSON_ASSERT(utf8_bytes_index == 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6455]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            JSON_ASSERT(utf8_bytes_index == 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6455]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(utf8_bytes_index == 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6456]}],"prevLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(utf8_bytes_index == 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6456]}],"prevLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6460]}],"prevLine":"        // use buffer","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6460]}],"prevLine":"        // use buffer","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        return utf8_bytes[utf8_bytes_index++];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6461]}],"prevLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        return utf8_bytes[utf8_bytes_index++];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6461]}],"prevLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6881]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6881]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6882]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6882]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6891]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6891]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6892]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6892]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_array());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6913]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_array());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6913]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_array());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6914]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_array());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6914]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6956]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6956]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(object_element);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6964]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(object_element);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6964]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        *object_element = BasicJsonType(std::forward<Value>(v));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6965]}],"prevLine":"        JSON_ASSERT(ref_stack.back()->is_object());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        *object_element = BasicJsonType(std::forward<Value>(v));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6965]}],"prevLine":"        JSON_ASSERT(ref_stack.back()->is_object());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7101]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7101]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7102]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7102]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7157]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7157]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7158]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7158]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7208]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7208]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7243]}],"prevLine":"        // we now only expect arrays and objects","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7243]}],"prevLine":"        // we now only expect arrays and objects","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        // check if we should store an element for the current key","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7253]}],"prevLine":"        // object","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        // check if we should store an element for the current key","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7253]}],"prevLine":"        // object","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!key_keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        const bool store_element = key_keep_stack.back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7255]}],"prevLine":"        // check if we should store an element for the current key","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(!key_keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        const bool store_element = key_keep_stack.back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7255]}],"prevLine":"        // check if we should store an element for the current key","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        *object_element = std::move(value);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7264]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        *object_element = std::move(value);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7264]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(loc != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7519]}],"prevLine":"        const auto* loc = localeconv();","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(loc != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7519]}],"prevLine":"        const auto* loc = localeconv();","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(current == 'u');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        int codepoint = 0;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7545]}],"prevLine":"        // this function only makes sense after reading `\\u`","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(current == 'u');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        int codepoint = 0;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7545]}],"prevLine":"        // this function only makes sense after reading `\\u`","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(0x0000 <= codepoint && codepoint <= 0xFFFF);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        return codepoint;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7571]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(0x0000 <= codepoint && codepoint <= 0xFFFF);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        return codepoint;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7571]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        add(current);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7592]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        add(current);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7592]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(current == '\\\"');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7633]}],"prevLine":"        // we entered the function by reading an open quote","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(current == '\\\"');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7633]}],"prevLine":"        // we entered the function by reading an open quote","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                            JSON_ASSERT(0x00 <= codepoint && codepoint <= 0x10FFFF);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7753]}],"prevLine":"                            // result of the above calculation yields a proper codepoint","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                            JSON_ASSERT(0x00 <= codepoint && codepoint <= 0x10FFFF);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7753]}],"prevLine":"                            // result of the above calculation yields a proper codepoint","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8382]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8382]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8629]}],"prevLine":"            // we checked the number format before","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8629]}],"prevLine":"            // we checked the number format before","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8645]}],"prevLine":"            // we checked the number format before","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8645]}],"prevLine":"            // we checked the number format before","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8662]}],"prevLine":"        // we checked the number format before","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8662]}],"prevLine":"        // we checked the number format before","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(char_traits<char_type>::to_char_type(current) == literal_text[0]);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        for (std::size_t i = 1; i < length; ++i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8676]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(char_traits<char_type>::to_char_type(current) == literal_text[0]);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        for (std::size_t i = 1; i < length; ++i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8676]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(!token_string.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            token_string.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8768]}],"prevLine":"        {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(!token_string.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            token_string.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8768]}],"prevLine":"        {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                static_cast<void>((std::snprintf)(cs.data(), cs.size(), \"<U+%.4X>\", static_cast<unsigned char>(c))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the third function argument.","nextLine":"                result += cs.data();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8831]}],"prevLine":"                std::array<char, 9> cs{{}};","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9279]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9279]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                static_cast<void>((std::snprintf)(cr.data(), cr.size(), \"%.2hhX\", static_cast<unsigned char>(element_type))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the third function argument.","nextLine":"                const std::string cr_str{cr.data()};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9477]}],"prevLine":"                std::array<char, 3> cr{{}};","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                        return false;        // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9962]}],"prevLine":"                    default:                 // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                        return false;        // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9962]}],"prevLine":"                    default:                 // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10005]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10005]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10006]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10006]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11552]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11552]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11553]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11553]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        static_cast<void>((std::snprintf)(cr.data(), cr.size(), \"%.2hhX\", static_cast<unsigned char>(current))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the third function argument.","nextLine":"        return std::string{cr.data()};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12049]}],"prevLine":"        std::array<char, 3> cr{{}};","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12089]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12089]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(!states.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12575]}],"prevLine":"                    // are effectively jumping to the beginning of this if.","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(!states.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12575]}],"prevLine":"                    // are effectively jumping to the beginning of this if.","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(!states.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12629]}],"prevLine":"                // are effectively jumping to the beginning of this if.","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(!states.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12629]}],"prevLine":"                // are effectively jumping to the beginning of this if.","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12971]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12971]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13068]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13068]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13112]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13112]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13151]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13151]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return m_it.object_iterator->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13157]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                return m_it.object_iterator->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13157]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return *m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13163]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                return *m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13163]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13195]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13195]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return &(m_it.object_iterator->second);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13201]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                return &(m_it.object_iterator->second);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13201]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return &*m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13207]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                return &*m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13207]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13248]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13248]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13299]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13299]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13346]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13346]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13391]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13391]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13447]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13447]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13526]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13526]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13555]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13555]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13593]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13593]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(reference_token[pos] == '~');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14513]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(reference_token[pos] == '~');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14513]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(oa);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15093]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(oa);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15093]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15846]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15846]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    oa->write_character(to_char_type('$'));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15892]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    oa->write_character(to_char_type('$'));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15892]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15944]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15944]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return 0ul;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16240]}],"prevLine":"            default:","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                return 0ul;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16240]}],"prevLine":"            default:","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16287]}],"prevLine":"            default:","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16287]}],"prevLine":"            default:","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(x.e == y.e);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(x.f >= y.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16980]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(x.e == y.e);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(x.f >= y.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16980]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(x.f >= y.f);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16981]}],"prevLine":"        JSON_ASSERT(x.e == y.e);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(x.f >= y.f);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16981]}],"prevLine":"        JSON_ASSERT(x.e == y.e);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(x.f != 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17057]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(x.f != 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17057]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(delta >= 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17076]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(delta >= 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17076]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17077]}],"prevLine":"        JSON_ASSERT(delta >= 0);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17077]}],"prevLine":"        JSON_ASSERT(delta >= 0);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17099]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17099]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17100]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17100]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(e >= -1500);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(e <=  1500);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17380]}],"prevLine":"    // NB: log_10(2) ~= 78913 / 2^18","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(e >= -1500);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(e <=  1500);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17380]}],"prevLine":"    // NB: log_10(2) ~= 78913 / 2^18","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(e <=  1500);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    const int f = kAlpha - e - 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17381]}],"prevLine":"    JSON_ASSERT(e >= -1500);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(e <=  1500);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    const int f = kAlpha - e - 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17381]}],"prevLine":"    JSON_ASSERT(e >= -1500);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(index >= 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17386]}],"prevLine":"    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(index >= 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17386]}],"prevLine":"    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17387]}],"prevLine":"    JSON_ASSERT(index >= 0);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17387]}],"prevLine":"    JSON_ASSERT(index >= 0);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17390]}],"prevLine":"    const cached_power cached = kCachedPowers[static_cast<std::size_t>(index)];","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17390]}],"prevLine":"    const cached_power cached = kCachedPowers[static_cast<std::size_t>(index)];","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17391]}],"prevLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17391]}],"prevLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(len >= 1);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(dist <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17457]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(len >= 1);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(dist <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17457]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(dist <= delta);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(rest <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17458]}],"prevLine":"    JSON_ASSERT(len >= 1);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(dist <= delta);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(rest <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17458]}],"prevLine":"    JSON_ASSERT(len >= 1);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(rest <= delta);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(ten_k > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17459]}],"prevLine":"    JSON_ASSERT(dist <= delta);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(rest <= delta);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(ten_k > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17459]}],"prevLine":"    JSON_ASSERT(dist <= delta);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(ten_k > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17460]}],"prevLine":"    JSON_ASSERT(rest <= delta);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(ten_k > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17460]}],"prevLine":"    JSON_ASSERT(rest <= delta);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(buf[len - 1] != '0');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        buf[len - 1]--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17485]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(buf[len - 1] != '0');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        buf[len - 1]--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17485]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(M_plus.e <= kGamma);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17513]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(M_plus.e <= kGamma);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17513]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(M_plus.e <= kGamma);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17514]}],"prevLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(M_plus.e <= kGamma);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17514]}],"prevLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(p1 > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17535]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(p1 > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17535]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17571]}],"prevLine":"        //","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17571]}],"prevLine":"        //","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(p2 > delta);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17658]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(p2 > delta);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17658]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        p2 *= 10;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17669]}],"prevLine":"        //","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        p2 *= 10;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17669]}],"prevLine":"        //","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17678]}],"prevLine":"        //","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17678]}],"prevLine":"        //","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(m_plus.e == v.e);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17739]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(m_plus.e == v.e);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17739]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(m_plus.e == v.e);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17740]}],"prevLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(m_plus.e == v.e);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17740]}],"prevLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17801]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17801]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17802]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17802]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(e > -1000);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(e <  1000);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17838]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(e > -1000);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(e <  1000);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17838]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(e <  1000);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17839]}],"prevLine":"    JSON_ASSERT(e > -1000);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(e <  1000);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17839]}],"prevLine":"    JSON_ASSERT(e > -1000);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(min_exp < 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(max_exp > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17891]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(min_exp < 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(max_exp > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17891]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(max_exp > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17892]}],"prevLine":"    JSON_ASSERT(min_exp < 0);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(max_exp > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17892]}],"prevLine":"    JSON_ASSERT(min_exp < 0);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(k > n);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17918]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(k > n);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17918]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17976]}],"prevLine":"    static_cast<void>(last); // maybe unused - fix warning","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17976]}],"prevLine":"    static_cast<void>(last); // maybe unused - fix warning","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18001]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18001]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(len <= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18011]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(len <= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18011]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18018]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18018]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18019]}],"prevLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18019]}],"prevLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18020]}],"prevLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18020]}],"prevLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"{}\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18128]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"{\\n\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18134]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                        o->write_characters(\"\\\": \", 3);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                        dump(i->second, true, ensure_ascii, indent_step, new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18150]}],"prevLine":"                        dump_escaped(i->first, ensure_ascii);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                        o->write_characters(\",\\n\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18152]}],"prevLine":"                        dump(i->second, true, ensure_ascii, indent_step, new_indent);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18156]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18156]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18157]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18157]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"\\\": \", 3);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    dump(i->second, true, ensure_ascii, indent_step, new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18161]}],"prevLine":"                    dump_escaped(i->first, ensure_ascii);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                        o->write_characters(\"\\\":\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                        dump(i->second, false, ensure_ascii, indent_step, current_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18178]}],"prevLine":"                        dump_escaped(i->first, ensure_ascii);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18184]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18184]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    o->write_character('\\\"');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18185]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    o->write_character('\\\"');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18185]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"\\\":\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    dump(i->second, false, ensure_ascii, indent_step, current_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18188]}],"prevLine":"                    dump_escaped(i->first, ensure_ascii);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"[]\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18201]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"[\\n\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18207]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                        o->write_characters(\",\\n\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18222]}],"prevLine":"                        dump(*i, true, ensure_ascii, indent_step, new_indent);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18226]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18226]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    dump(val.m_data.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18247]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    dump(val.m_data.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18247]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"{\\n\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18268]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"\\\"bytes\\\": [\", 10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18279]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                            o->write_characters(\", \", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18287]}],"prevLine":"                            dump_integer(*i);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"],\\n\", 3);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18292]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"\\\"subtype\\\": \", 11);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    if (val.m_data.m_value.binary->has_subtype())","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18295]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                        o->write_characters(\"null\", 4);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18302]}],"prevLine":"                    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"{\\\"bytes\\\":[\", 10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18310]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"],\\\"subtype\\\":\", 12);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    if (val.m_data.m_value.binary->has_subtype())","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18323]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                        o->write_characters(\"null}\", 5);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18331]}],"prevLine":"                    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"true\", 4);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18341]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    o->write_characters(\"false\", 5);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18345]}],"prevLine":"                {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                o->write_characters(\"<discarded>\", 11);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18370]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                o->write_characters(\"null\", 4);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18376]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18381]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18381]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 7, \"\\\\u%04x\",","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the third function argument.","nextLine":"                                                                      static_cast<std::uint16_t>(codepoint)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18478]}],"prevLine":"                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 13, \"\\\\u%04x\\\\u%04x\",","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the third function argument.","nextLine":"                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18485]}],"prevLine":"                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18580]}],"prevLine":"                        default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18580]}],"prevLine":"                        default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                        o->write_characters(\"\\\\ufffd\", 6);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18631]}],"prevLine":"                    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                        o->write_characters(\"\\xEF\\xBF\\xBD\", 3);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18635]}],"prevLine":"                    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18641]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18641]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(n_chars < number_buffer.size() - 1);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18770]}],"prevLine":"        // spare 1 byte for '\\0'","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(n_chars < number_buffer.size() - 1);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18770]}],"prevLine":"        // spare 1 byte for '\\0'","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            o->write_characters(\"null\", 4);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18813]}],"prevLine":"        {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        std::ptrdiff_t len = (std::snprintf)(number_buffer.data(), number_buffer.size(), \"%.*g\", d, x);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the third function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18844]}],"prevLine":"        // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(len > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        // check if buffer was large enough","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18847]}],"prevLine":"        // negative value indicates an error","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(len > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        // check if buffer was large enough","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18847]}],"prevLine":"        // negative value indicates an error","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(static_cast<std::size_t>(len) < number_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18849]}],"prevLine":"        // check if buffer was large enough","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(static_cast<std::size_t>(len) < number_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18849]}],"prevLine":"        // check if buffer was large enough","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT((end - number_buffer.begin()) <= len);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            len = (end - number_buffer.begin());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18857]}],"prevLine":"            std::fill(end, number_buffer.end(), '\\0');","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT((end - number_buffer.begin()) <= len);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            len = (end - number_buffer.begin());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18857]}],"prevLine":"            std::fill(end, number_buffer.end(), '\\0');","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            o->write_characters(\".0\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18884]}],"prevLine":"        {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(byte < utf8d.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        const std::uint8_t type = utf8d[byte];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18931]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(byte < utf8d.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        const std::uint8_t type = utf8d[byte];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18931]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(index < utf8d.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        state = utf8d[index];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18941]}],"prevLine":"        const std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(index < utf8d.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        state = utf8d[index];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18941]}],"prevLine":"        const std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        return x; // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18953]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        return x; // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18953]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(x < 0 && x < (std::numeric_limits<number_integer_t>::max)()); // NOLINT(misc-redundant-expression)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        return static_cast<number_unsigned_t>(-(x + 1)) + 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18968]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(x < 0 && x < (std::numeric_limits<number_integer_t>::max)()); // NOLINT(misc-redundant-expression)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        return static_cast<number_unsigned_t>(-(x + 1)) + 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18968]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_THROW(std::out_of_range(\"key not found\"));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19123]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_THROW(std::out_of_range(\"key not found\"));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19138]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_THROW(std::out_of_range(\"key not found\"));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19151]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_THROW(std::out_of_range(\"key not found\"));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19166]}],"sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(obj != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        return obj.release();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19694]}],"prevLine":"        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(obj != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        return obj.release();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19694]}],"prevLine":"        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19989]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19989]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19990]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19990]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19991]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19991]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19992]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19992]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20198]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20198]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_data.m_type == val.type());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        set_parents();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20200]}],"prevLine":"        }","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_data.m_type == val.type());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        set_parents();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20200]}],"prevLine":"        }","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(first.m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(last.m_object != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20339]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(first.m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(last.m_object != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20339]}],"prevLine":"    {","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(last.m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20340]}],"prevLine":"        JSON_ASSERT(first.m_object != nullptr);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(last.m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20340]}],"prevLine":"        JSON_ASSERT(first.m_object != nullptr);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21452]}],"prevLine":"            auto it = m_data.m_value.object->find(key);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21452]}],"prevLine":"            auto it = m_data.m_value.object->find(key);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21507]}],"prevLine":"            auto it = m_data.m_value.object->find(std::forward<KeyType>(key));","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21507]}],"prevLine":"            auto it = m_data.m_value.object->find(std::forward<KeyType>(key));","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_data.m_value.array != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22574]}],"prevLine":"        iterator result(this);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"        JSON_ASSERT(m_data.m_value.array != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22574]}],"prevLine":"        iterator result(this);","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24104]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24104]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2600","currLine":"        return std::fgetc(m_file);","falseAlarm":false,"level":1,"message":"The function with the 'fgetc' name should not be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6209]}],"prevLine":"    {","sastId":"MISRA-CPP-27-0-1"}
{"code":"V2600","currLine":"                static_cast<void>((std::snprintf)(cs.data(), cs.size(), \"<U+%.4X>\", static_cast<unsigned char>(c))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","falseAlarm":false,"level":1,"message":"The function with the 'snprintf' name should not be used.","nextLine":"                result += cs.data();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8831]}],"prevLine":"                std::array<char, 9> cs{{}};","sastId":"MISRA-CPP-27-0-1"}
{"code":"V2600","currLine":"                static_cast<void>((std::snprintf)(cr.data(), cr.size(), \"%.2hhX\", static_cast<unsigned char>(element_type))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","falseAlarm":false,"level":1,"message":"The function with the 'snprintf' name should not be used.","nextLine":"                const std::string cr_str{cr.data()};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9477]}],"prevLine":"                std::array<char, 3> cr{{}};","sastId":"MISRA-CPP-27-0-1"}
{"code":"V2600","currLine":"        static_cast<void>((std::snprintf)(cr.data(), cr.size(), \"%.2hhX\", static_cast<unsigned char>(current))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","falseAlarm":false,"level":1,"message":"The function with the 'snprintf' name should not be used.","nextLine":"        return std::string{cr.data()};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12049]}],"prevLine":"        std::array<char, 3> cr{{}};","sastId":"MISRA-CPP-27-0-1"}
{"code":"V2600","currLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 7, \"\\\\u%04x\",","falseAlarm":false,"level":1,"message":"The function with the 'snprintf' name should not be used.","nextLine":"                                                                      static_cast<std::uint16_t>(codepoint)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18478]}],"prevLine":"                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"MISRA-CPP-27-0-1"}
{"code":"V2600","currLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 13, \"\\\\u%04x\\\\u%04x\",","falseAlarm":false,"level":1,"message":"The function with the 'snprintf' name should not be used.","nextLine":"                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18485]}],"prevLine":"                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"MISRA-CPP-27-0-1"}
{"code":"V2600","currLine":"        std::ptrdiff_t len = (std::snprintf)(number_buffer.data(), number_buffer.size(), \"%.*g\", d, x);","falseAlarm":false,"level":1,"message":"The function with the 'snprintf' name should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18844]}],"prevLine":"        // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"MISRA-CPP-27-0-1"}
{"code":"V2600","currLine":"            const auto end = std::remove(number_buffer.begin(), number_buffer.begin() + len, thousands_sep);","falseAlarm":false,"level":1,"message":"The function with the 'remove' name should not be used.","nextLine":"            std::fill(end, number_buffer.end(), '\\0');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18855]}],"prevLine":"            // NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto): std::remove returns an iterator, see https://github.com/nlohmann/json/issues/3081","sastId":"MISRA-CPP-27-0-1"}
{"code":"V3503","currLine":"                goto scan_number_any1;","falseAlarm":false,"level":1,"message":"The 'goto' statement shouldn't jump to a label declared earlier.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8454,8438]}],"prevLine":"                add(current);","sastId":"AUTOSAR-M6-6-2"}
{"code":"V3503","currLine":"                goto scan_number_decimal2;","falseAlarm":false,"level":1,"message":"The 'goto' statement shouldn't jump to a label declared earlier.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8517,8501]}],"prevLine":"                add(current);","sastId":"AUTOSAR-M6-6-2"}
{"code":"V3503","currLine":"                goto scan_number_any2;","falseAlarm":false,"level":1,"message":"The 'goto' statement shouldn't jump to a label declared earlier.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8608,8592]}],"prevLine":"                add(current);","sastId":"AUTOSAR-M6-6-2"}
{"code":"V3508","currLine":"    return ::strlen(cstr) + concat_length(rest...);","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"}","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4255]}],"prevLine":"    // cppcheck-suppress ignoredReturnValue","sastId":"AUTOSAR-M18-0-5"}
{"code":"V3508","currLine":"    auto length = std::strlen(reinterpret_cast<const char*>(b));","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"    const auto* ptr = reinterpret_cast<const char*>(b);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6591]}],"prevLine":"{","sastId":"AUTOSAR-M18-0-5"}
{"code":"V3509","currLine":"    union json_value","falseAlarm":false,"level":1,"message":"Unions should not be used.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19728]}],"prevLine":"    */","sastId":"AUTOSAR-M9-5-1"}
{"code":"V3511","currLine":"        else if (number_type == token_type::value_integer)","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8640]}],"prevLine":"        }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                else if (N <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15288]}],"prevLine":"                // LCOV_EXCL_START","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                else if (N <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15326]}],"prevLine":"                // LCOV_EXCL_START","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                    else if (j.m_data.m_value.binary->subtype() <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15360]}],"prevLine":"                    }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                else if (N <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15389]}],"prevLine":"                // LCOV_EXCL_START","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                else if (N <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15428]}],"prevLine":"                // LCOV_EXCL_START","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                    else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15501]}],"prevLine":"                    }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                    else if (j.m_data.m_value.number_integer >= (std::numeric_limits<std::int64_t>::min)() &&","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                             j.m_data.m_value.number_integer <= (std::numeric_limits<std::int64_t>::max)())","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15536]}],"prevLine":"                    }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                else if (j.m_data.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15572]}],"prevLine":"                }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                else if (N <= (std::numeric_limits<std::uint32_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15608]}],"prevLine":"                }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                else if (N <= (std::numeric_limits<std::uint32_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15637]}],"prevLine":"                }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                else if (N <= (std::numeric_limits<std::uint32_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15711]}],"prevLine":"                }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                else if (N <= (std::numeric_limits<std::uint32_t>::max)())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15750]}],"prevLine":"                }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"        else if (dtype == 'D')","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16757]}],"prevLine":"        }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                    else if (current_item.is_object())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19905]}],"prevLine":"                    }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                else if (is_binary())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21765]}],"prevLine":"                }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"                else if (is_binary())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21836]}],"prevLine":"                }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"        JSON_IMPLEMENT_OPERATOR( ==, true, false, false)","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"#ifdef __GNUC__","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22994]}],"prevLine":"        const_reference lhs = *this;","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"        JSON_IMPLEMENT_OPERATOR(<=>, // *NOPAD*","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"                                std::partial_ordering::equivalent,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23027]}],"prevLine":"        // we compare types.","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3511","currLine":"            else if (parent.is_array())","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24130]}],"prevLine":"            }","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3512","currLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u) & 0x1Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6347]}],"prevLine":"            {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes_filled = 2;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6348]}],"prevLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u) & 0x1Fu));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u) & 0x0Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6353]}],"prevLine":"            {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6354]}],"prevLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u) & 0x0Fu));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes_filled = 3;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6355]}],"prevLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | ((static_cast<unsigned int>(wc) >> 18u) & 0x07u));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 12u) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6360]}],"prevLine":"            {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 12u) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6361]}],"prevLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | ((static_cast<unsigned int>(wc) >> 18u) & 0x07u));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6362]}],"prevLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 12u) & 0x3Fu));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes_filled = 4;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6363]}],"prevLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6405]}],"prevLine":"            {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes_filled = 2;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6406]}],"prevLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u)));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6411]}],"prevLine":"            {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6412]}],"prevLine":"                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u)));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                utf8_bytes_filled = 3;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6413]}],"prevLine":"                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                    const auto charcode = 0x10000u + (((static_cast<unsigned int>(wc) & 0x3FFu) << 10u) | (wc2 & 0x3FFu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | (charcode >> 18u));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6421]}],"prevLine":"                    const auto wc2 = static_cast<unsigned int>(input.get_character());","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | (charcode >> 18u));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 12u) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6422]}],"prevLine":"                    const auto charcode = 0x10000u + (((static_cast<unsigned int>(wc) & 0x3FFu) << 10u) | (wc2 & 0x3FFu));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                    utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 12u) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 6u) & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6423]}],"prevLine":"                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | (charcode >> 18u));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                    utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 6u) & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (charcode & 0x3Fu));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6424]}],"prevLine":"                    utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 12u) & 0x3Fu));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                    utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (charcode & 0x3Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    utf8_bytes_filled = 4;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6425]}],"prevLine":"                    utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 6u) & 0x3Fu));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        const auto factors = { 12u, 8u, 4u, 0u };","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        for (const auto factor : factors)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7548]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x30u) << factor);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7555]}],"prevLine":"            {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x37u) << factor);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7559]}],"prevLine":"            {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x57u) << factor);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7563]}],"prevLine":"            {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                                        (static_cast<unsigned int>(codepoint1) << 10u)","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                                        // low surrogate occupies the least significant 15 bits","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7723]}],"prevLine":"                                                        // high surrogate occupies the most significant 22 bits","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                                        - 0x35FDC00u);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7729]}],"prevLine":"                                                        // (0xD800 << 10) + DC00 - 0x10000 = 0x35FDC00","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                add(static_cast<char_int_type>(0xC0u | (static_cast<unsigned int>(codepoint) >> 6u)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7764]}],"prevLine":"                                // 2-byte characters: 110xxxxx 10xxxxxx","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7765]}],"prevLine":"                                add(static_cast<char_int_type>(0xC0u | (static_cast<unsigned int>(codepoint) >> 6u)));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                add(static_cast<char_int_type>(0xE0u | (static_cast<unsigned int>(codepoint) >> 12u)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7770]}],"prevLine":"                                // 3-byte characters: 1110xxxx 10xxxxxx 10xxxxxx","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7771]}],"prevLine":"                                add(static_cast<char_int_type>(0xE0u | (static_cast<unsigned int>(codepoint) >> 12u)));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7772]}],"prevLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                add(static_cast<char_int_type>(0xF0u | (static_cast<unsigned int>(codepoint) >> 18u)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 12u) & 0x3Fu)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7777]}],"prevLine":"                                // 4-byte characters: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 12u) & 0x3Fu)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7778]}],"prevLine":"                                add(static_cast<char_int_type>(0xF0u | (static_cast<unsigned int>(codepoint) >> 18u)));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7779]}],"prevLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 12u) & 0x3Fu)));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7780]}],"prevLine":"                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                           conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9773]}],"prevLine":"                return get_cbor_array(","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                return get_cbor_object(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9827]}],"prevLine":"            case 0xB7:","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                const auto half = static_cast<unsigned int>((byte1 << 8u) + byte2);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                const double val = [&half]","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10000]}],"prevLine":"                // is shown in Fig. 3.","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                    const int exp = (half >> 10u) & 0x1Fu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    const unsigned int mant = half & 0x3FFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10003]}],"prevLine":"                {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                    const unsigned int mant = half & 0x3FFu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10004]}],"prevLine":"                    const int exp = (half >> 10u) & 0x1Fu;","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                return sax->number_float((half & 0x8000u) != 0","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                         ? static_cast<number_float_t>(-val)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10019]}],"prevLine":"                }();","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                return get_string(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10091]}],"prevLine":"            {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                return get_binary(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10187]}],"prevLine":"            {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                return get_msgpack_object(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10497]}],"prevLine":"            case 0x8F:","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                return get_msgpack_array(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10516]}],"prevLine":"            case 0x9F:","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                return get_string(input_format_t::msgpack, static_cast<unsigned int>(current) & 0x1Fu, result);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10765]}],"prevLine":"            {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                const auto half = static_cast<unsigned int>((byte2 << 8u) + byte1);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                const double val = [&half]","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11547]}],"prevLine":"                // is shown in Fig. 3.","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                    const int exp = (half >> 10u) & 0x1Fu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    const unsigned int mant = half & 0x3FFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11550]}],"prevLine":"                {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                    const unsigned int mant = half & 0x3FFu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11551]}],"prevLine":"                    const int exp = (half >> 10u) & 0x1Fu;","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                return sax->number_float((half & 0x8000u) != 0","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                         ? static_cast<number_float_t>(-val)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11566]}],"prevLine":"                }();","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        return /*id*/ 1ul + name.size() + /*zero-terminator*/1u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16009]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        return /*id*/ 1ul + name.size() + /*zero-terminator*/1u;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16009]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"            name.size() + 1u);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16021]}],"prevLine":"            reinterpret_cast<const CharType*>(name.c_str()),","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        return sizeof(std::int32_t) + value.size() + 1ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16049]}],"prevLine":"    {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        write_number<std::int32_t>(static_cast<std::int32_t>(value.size() + 1ul), true);","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"        oa->write_characters(","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16060]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        std::size_t array_index = 0ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16149]}],"prevLine":"    {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        return sizeof(std::int32_t) + embedded_document_size + 1ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16156]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        return sizeof(std::int32_t) + value.size() + 1ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16164]}],"prevLine":"    {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        std::size_t array_index = 0ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16176]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                return header_size + 1ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16220]}],"prevLine":"            case value_t::boolean:","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                return header_size + 8ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16223]}],"prevLine":"            case value_t::number_float:","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                return header_size + 0ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16235]}],"prevLine":"            case value_t::null:","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                return 0ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"                // LCOV_EXCL_STOP","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16241]}],"prevLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        return sizeof(std::int32_t) + document_size + 1ul;","falseAlarm":false,"level":1,"message":"Literal suffix 'ul' should not contain lowercase characters.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16307]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        const std::uint64_t u_lo = x.f & 0xFFFFFFFFu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t u_hi = x.f >> 32u;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17017]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        const std::uint64_t u_hi = x.f >> 32u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17018]}],"prevLine":"        const std::uint64_t u_lo = x.f & 0xFFFFFFFFu;","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t v_hi = y.f >> 32u;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17019]}],"prevLine":"        const std::uint64_t u_hi = x.f >> 32u;","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        const std::uint64_t v_hi = y.f >> 32u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17020]}],"prevLine":"        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        const std::uint64_t p0_hi = p0 >> 32u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17027]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t p1_hi = p1 >> 32u;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17028]}],"prevLine":"        const std::uint64_t p0_hi = p0 >> 32u;","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        const std::uint64_t p1_hi = p1 >> 32u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17029]}],"prevLine":"        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        const std::uint64_t p2_hi = p2 >> 32u;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17030]}],"prevLine":"        const std::uint64_t p1_hi = p1 >> 32u;","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        const std::uint64_t p2_hi = p2 >> 32u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17031]}],"prevLine":"        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        Q += std::uint64_t{1} << (64u - 32u - 1u); // round, ties up","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17044]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        const std::uint64_t h = p3 + p2_hi + p1_hi + (Q >> 32u);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17046]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        while ((x.f >> 63u) == 0)","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17059]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"            x.f <<= 1u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            x.e--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17061]}],"prevLine":"        {","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                                                      static_cast<std::uint16_t>(0xDC00u + (codepoint & 0x3FFu))));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18486]}],"prevLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 13, \"\\\\u%04x\\\\u%04x\",","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                                                                      static_cast<std::uint16_t>(0xDC00u + (codepoint & 0x3FFu))));","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                                    bytes += 12;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18487]}],"prevLine":"                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"            x = x / 10000u;","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"            n_digits += 4;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18676]}],"prevLine":"            }","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                ? (byte & 0x3fu) | (codep << 6u)","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"                : (0xFFu >> type) & (byte);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18937]}],"prevLine":"        codep = (state != UTF8_ACCEPT)","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"                : (0xFFu >> type) & (byte);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18938]}],"prevLine":"                ? (byte & 0x3fu) | (codep << 6u)","sastId":"AUTOSAR-M2-13-4"}
{"code":"V3512","currLine":"        const std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);","falseAlarm":false,"level":1,"message":"Literal suffix 'u' should not contain lowercase characters.","nextLine":"        JSON_ASSERT(index < utf8d.size());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18940]}],"sastId":"AUTOSAR-M2-13-4"}
{"code":"V3513","currLine":"        switch (anchor.m_object->type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5267,5270,5281,5293]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"    switch (j.type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6031,6034,6039,6051,6061,6067,6073,6079,6085,6091,6104]}],"prevLine":"    const auto type = static_cast<std::size_t>(j.type());","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (t)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7437,7439,7441,7443,7445,7447,7451,7453,7455,7457,7459,7461,7463,7465,7467,7469,7472]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"            switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7638,7641,7648,7796,7802,7808,7814,7820,7826,7832,7838,7844,7850,7856,7862,7868,7874,7880,7886,7892,7898,7904,7910,7916,7922,7928,7934,7940,7946,7952,7958,7964,7970,7976,7982,8204]}],"prevLine":"            // get next character","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"                    switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7656,7787]}],"prevLine":"                {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8219,8222,8241,8276]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"                    switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8226,8231]}],"prevLine":"                {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"                    switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8245,8248,8254,8269]}],"prevLine":"                {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"                            switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8256,8258,8261]}],"prevLine":"                        {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8352,8354,8360,8374,8381]}],"prevLine":"        // state (init): we just found out we need to scan a number","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8388,8390,8404,8410]}],"prevLine":"        number_type = token_type::value_integer;","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8419,8421,8428,8434]}],"prevLine":"        // state: we just parse a zero (maybe with a leading minus sign)","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8440,8451,8457,8464,8470]}],"prevLine":"        // state: we just parsed a number 0-9 (maybe with a leading minus sign)","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8477,8488,8494]}],"prevLine":"        number_type = token_type::value_float;","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8503,8514,8521,8527]}],"prevLine":"        // we just parsed at least one number after a decimal point","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8534,8537,8552,8558]}],"prevLine":"        number_type = token_type::value_float;","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8568,8579,8585]}],"prevLine":"        // we just parsed an exponent sign","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8594,8605,8611]}],"prevLine":"        // we just parsed a number after the exponent or exponent sign","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8906,8909,8911,8913,8915,8917,8919,8923,8928,8933,8940,8954,8960,8964]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (format)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9258,9278]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (element_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9420,9422,9428,9435,9440,9445,9452,9457,9462,9468,9474]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (get_char ? get() : current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9568,9571,9598,9601,9607,9613,9619,9649,9652,9658,9664,9670,9706,9741,9771,9775,9781,9787,9793,9799,9826,9829,9835,9841,9847,9853,9874,9967,9970,9973,9976,10024,10030,10036]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"                switch (tag_handler)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9876,9878,9885,9920,9961]}],"prevLine":"            {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"                        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9924,9954]}],"prevLine":"                        // use binary subtype and store in binary container","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"                    switch (exp)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10007,10009,10011,10015]}],"prevLine":"                    JSON_ASSERT(mant <= 1024);","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10063,10089,10094,10100,10106,10112,10118,10132]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10159,10185,10190,10197,10204,10211,10218,10232]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (get())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10343,10346,10477,10496,10515,10553,10559,10562,10565,10578,10584,10590,10596,10602,10608,10614,10620,10626,10632,10638,10644,10650,10656,10662,10700,10703]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10729,10763,10768,10774,10780,10786]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10814,10816,10823,10830,10837,10847,10857,10867,10875,10883,10891,10899,10907]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (current)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11006,11008,11014,11020,11026,11032,11038,11048,11058]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (prefix)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11161,11163,11174,11190,11206,11222,11243,11258,11273,11293]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (prefix)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11446,11448,11451,11453,11456,11459,11465,11471,11477,11483,11489,11499,11509,11519,11571,11577,11583,11588,11605,11611,11614]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"                    switch (exp)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11554,11556,11558,11562]}],"prevLine":"                    JSON_ASSERT(mant <= 1024);","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (result_number)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11856,11858,11860,11862,11878]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (format)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12065,12088]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"                switch (last_token)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12362,12364,12409,12506,12513,12533]}],"prevLine":"                // invariant: get_token() was called before each iteration","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (m_object->m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13153,13155,13161]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (m_object->m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13197,13199,13205]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (m_object->m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13348,13350,13353,13364]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (m_object->m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13393,13398,13409]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (m_object->m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13528,13533,13544]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (m_object->m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13557,13562]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"            switch (ptr->type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14388,14450]}],"prevLine":"        {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (j.type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16208,16210,16213,16216,16219,16222,16225,16228,16231,16234,16239]}],"prevLine":"        const auto header_size = calc_bson_entry_header_size(name, j);","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (j.type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16255,16257,16260,16263,16266,16269,16272,16275,16278,16281,16286]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (j.type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16546,16548,16551,16554,16588,16626,16629,16633,16636,16640]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (val.m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18122,18124,18197,18256,18264,18337,18350,18356,18362,18368,18374,18380]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"            switch (decode(state, codepoint, byte))","falseAlarm":false,"level":1,"message":"Instantiation of serializer < basic_json >: Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18414,18416]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"                    switch (codepoint)","falseAlarm":false,"level":1,"message":"Instantiation of serializer < basic_json >: Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18418,18469]}],"prevLine":"                {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"                    switch (error_handler)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18518,18579]}],"prevLine":"                {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"            switch (error_handler)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18610,18640]}],"prevLine":"            // we finish reading, but do not accept: string was incomplete","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (val.type())","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20165,20197]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22213,22215,22221,22227,22240]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22252,22254,22260,22266,22279]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22291,22293,22299,22313]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        JSON_IMPLEMENT_OPERATOR( ==, true, false, false)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"#ifdef __GNUC__","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22994]}],"prevLine":"        const_reference lhs = *this;","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        JSON_IMPLEMENT_OPERATOR(<=>, // *NOPAD*","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"                                std::partial_ordering::equivalent,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23027]}],"prevLine":"        // we compare types.","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"        switch (m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23465,23467,23469,23471,23473,23475,23477,23479,23484]}],"prevLine":"    {","sastId":"AUTOSAR-M6-4-5"}
{"code":"V3513","currLine":"            switch (parent.m_data.m_type)","falseAlarm":false,"level":1,"message":"Every switch-clause should be terminated by an unconditional 'break' or 'throw' statement.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24063,24103]}],"sastId":"AUTOSAR-M6-4-5"}
{"code":"V3514","currLine":"        default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"            JSON_THROW(type_error::create(302, concat(\"type must be number, but is \", j.type_name()), &j));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4705]}],"prevLine":"        case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"        default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"            JSON_THROW(type_error::create(302, concat(\"type must be number, but is \", j.type_name()), &j));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4998]}],"prevLine":"        case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"                        default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                            break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8234]}],"sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"                            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9914]}],"prevLine":"                            }","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11068]}],"sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11349]}],"sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"                default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                    JSON_THROW(detail::type_error::create(313, \"invalid value to unflatten\", &j));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14132]}],"prevLine":"                case detail::value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"                default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                    JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", reference_token, \"'\"), ptr));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14213]}],"prevLine":"                case detail::value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"                default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                    JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", reference_token, \"'\"), ptr));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14264]}],"prevLine":"                case detail::value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"                default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                    JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", reference_token, \"'\"), ptr));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14320]}],"prevLine":"                case detail::value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"                default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                    JSON_THROW(detail::out_of_range::create(404, detail::concat(\"unresolved reference token '\", reference_token, \"'\"), ptr));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14371]}],"prevLine":"                case detail::value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15119]}],"prevLine":"            case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15445]}],"prevLine":"            case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15767]}],"prevLine":"            case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15986]}],"prevLine":"            case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"                default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19960]}],"prevLine":"                case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20373]}],"prevLine":"            case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                JSON_THROW(invalid_iterator::create(206, detail::concat(\"cannot construct with iterators from \", first.m_object->type_name()), first.m_object));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20431]}],"prevLine":"            case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20509]}],"prevLine":"            case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                JSON_THROW(type_error::create(307, detail::concat(\"cannot use erase() with \", type_name()), this));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21792]}],"prevLine":"            case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                JSON_THROW(type_error::create(307, detail::concat(\"cannot use erase() with \", type_name()), this));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21865]}],"prevLine":"            case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3514","currLine":"            default:","falseAlarm":false,"level":1,"message":"The 'default' statement should, beside 'break' or 'throw' statements, contain either a statement or a comment.","nextLine":"                break;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22386]}],"prevLine":"            case value_t::discarded:","sastId":"AUTOSAR-M6-4-6"}
{"code":"V3515","currLine":"    seed ^= h + 0x9e3779b9 + (seed << 6U) + (seed >> 2U);","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"    return seed;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6007]}],"prevLine":"{","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xAB70FE17C79AC6CA, -1060, -300 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xFF77B1FCBEBCDC4F, -1034, -292 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17294]}],"prevLine":"        {","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xFF77B1FCBEBCDC4F, -1034, -292 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xBE5691EF416BD60C, -1007, -284 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17295]}],"prevLine":"            { 0xAB70FE17C79AC6CA, -1060, -300 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xBE5691EF416BD60C, -1007, -284 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x8DD01FAD907FFC3C,  -980, -276 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17296]}],"prevLine":"            { 0xFF77B1FCBEBCDC4F, -1034, -292 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x8DD01FAD907FFC3C,  -980, -276 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xD3515C2831559A83,  -954, -268 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17297]}],"prevLine":"            { 0xBE5691EF416BD60C, -1007, -284 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xD3515C2831559A83,  -954, -268 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x9D71AC8FADA6C9B5,  -927, -260 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17298]}],"prevLine":"            { 0x8DD01FAD907FFC3C,  -980, -276 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x9D71AC8FADA6C9B5,  -927, -260 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xEA9C227723EE8BCB,  -901, -252 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17299]}],"prevLine":"            { 0xD3515C2831559A83,  -954, -268 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xEA9C227723EE8BCB,  -901, -252 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xAECC49914078536D,  -874, -244 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17300]}],"prevLine":"            { 0x9D71AC8FADA6C9B5,  -927, -260 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xAECC49914078536D,  -874, -244 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x823C12795DB6CE57,  -847, -236 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17301]}],"prevLine":"            { 0xEA9C227723EE8BCB,  -901, -252 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x823C12795DB6CE57,  -847, -236 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xC21094364DFB5637,  -821, -228 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17302]}],"prevLine":"            { 0xAECC49914078536D,  -874, -244 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xC21094364DFB5637,  -821, -228 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x9096EA6F3848984F,  -794, -220 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17303]}],"prevLine":"            { 0x823C12795DB6CE57,  -847, -236 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x9096EA6F3848984F,  -794, -220 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xD77485CB25823AC7,  -768, -212 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17304]}],"prevLine":"            { 0xC21094364DFB5637,  -821, -228 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xD77485CB25823AC7,  -768, -212 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xA086CFCD97BF97F4,  -741, -204 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17305]}],"prevLine":"            { 0x9096EA6F3848984F,  -794, -220 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xA086CFCD97BF97F4,  -741, -204 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xEF340A98172AACE5,  -715, -196 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17306]}],"prevLine":"            { 0xD77485CB25823AC7,  -768, -212 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xEF340A98172AACE5,  -715, -196 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xB23867FB2A35B28E,  -688, -188 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17307]}],"prevLine":"            { 0xA086CFCD97BF97F4,  -741, -204 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xB23867FB2A35B28E,  -688, -188 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x84C8D4DFD2C63F3B,  -661, -180 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17308]}],"prevLine":"            { 0xEF340A98172AACE5,  -715, -196 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x84C8D4DFD2C63F3B,  -661, -180 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xC5DD44271AD3CDBA,  -635, -172 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17309]}],"prevLine":"            { 0xB23867FB2A35B28E,  -688, -188 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xC5DD44271AD3CDBA,  -635, -172 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x936B9FCEBB25C996,  -608, -164 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17310]}],"prevLine":"            { 0x84C8D4DFD2C63F3B,  -661, -180 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x936B9FCEBB25C996,  -608, -164 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xDBAC6C247D62A584,  -582, -156 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17311]}],"prevLine":"            { 0xC5DD44271AD3CDBA,  -635, -172 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xDBAC6C247D62A584,  -582, -156 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xA3AB66580D5FDAF6,  -555, -148 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17312]}],"prevLine":"            { 0x936B9FCEBB25C996,  -608, -164 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xA3AB66580D5FDAF6,  -555, -148 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xF3E2F893DEC3F126,  -529, -140 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17313]}],"prevLine":"            { 0xDBAC6C247D62A584,  -582, -156 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xF3E2F893DEC3F126,  -529, -140 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xB5B5ADA8AAFF80B8,  -502, -132 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17314]}],"prevLine":"            { 0xA3AB66580D5FDAF6,  -555, -148 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xB5B5ADA8AAFF80B8,  -502, -132 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x87625F056C7C4A8B,  -475, -124 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17315]}],"prevLine":"            { 0xF3E2F893DEC3F126,  -529, -140 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x87625F056C7C4A8B,  -475, -124 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xC9BCFF6034C13053,  -449, -116 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17316]}],"prevLine":"            { 0xB5B5ADA8AAFF80B8,  -502, -132 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xC9BCFF6034C13053,  -449, -116 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x964E858C91BA2655,  -422, -108 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17317]}],"prevLine":"            { 0x87625F056C7C4A8B,  -475, -124 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x964E858C91BA2655,  -422, -108 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xDFF9772470297EBD,  -396, -100 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17318]}],"prevLine":"            { 0xC9BCFF6034C13053,  -449, -116 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xDFF9772470297EBD,  -396, -100 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xA6DFBD9FB8E5B88F,  -369,  -92 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17319]}],"prevLine":"            { 0x964E858C91BA2655,  -422, -108 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xA6DFBD9FB8E5B88F,  -369,  -92 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xF8A95FCF88747D94,  -343,  -84 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17320]}],"prevLine":"            { 0xDFF9772470297EBD,  -396, -100 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xF8A95FCF88747D94,  -343,  -84 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xB94470938FA89BCF,  -316,  -76 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17321]}],"prevLine":"            { 0xA6DFBD9FB8E5B88F,  -369,  -92 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xB94470938FA89BCF,  -316,  -76 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x8A08F0F8BF0F156B,  -289,  -68 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17322]}],"prevLine":"            { 0xF8A95FCF88747D94,  -343,  -84 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x8A08F0F8BF0F156B,  -289,  -68 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xCDB02555653131B6,  -263,  -60 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17323]}],"prevLine":"            { 0xB94470938FA89BCF,  -316,  -76 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xCDB02555653131B6,  -263,  -60 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x993FE2C6D07B7FAC,  -236,  -52 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17324]}],"prevLine":"            { 0x8A08F0F8BF0F156B,  -289,  -68 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x993FE2C6D07B7FAC,  -236,  -52 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xE45C10C42A2B3B06,  -210,  -44 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17325]}],"prevLine":"            { 0xCDB02555653131B6,  -263,  -60 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xE45C10C42A2B3B06,  -210,  -44 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xAA242499697392D3,  -183,  -36 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17326]}],"prevLine":"            { 0x993FE2C6D07B7FAC,  -236,  -52 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xAA242499697392D3,  -183,  -36 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xFD87B5F28300CA0E,  -157,  -28 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17327]}],"prevLine":"            { 0xE45C10C42A2B3B06,  -210,  -44 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xFD87B5F28300CA0E,  -157,  -28 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xBCE5086492111AEB,  -130,  -20 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17328]}],"prevLine":"            { 0xAA242499697392D3,  -183,  -36 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xBCE5086492111AEB,  -130,  -20 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x8CBCCC096F5088CC,  -103,  -12 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17329]}],"prevLine":"            { 0xFD87B5F28300CA0E,  -157,  -28 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x8CBCCC096F5088CC,  -103,  -12 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xD1B71758E219652C,   -77,   -4 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17330]}],"prevLine":"            { 0xBCE5086492111AEB,  -130,  -20 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xD1B71758E219652C,   -77,   -4 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x9C40000000000000,   -50,    4 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17331]}],"prevLine":"            { 0x8CBCCC096F5088CC,  -103,  -12 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x9C40000000000000,   -50,    4 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xE8D4A51000000000,   -24,   12 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17332]}],"prevLine":"            { 0xD1B71758E219652C,   -77,   -4 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xE8D4A51000000000,   -24,   12 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xAD78EBC5AC620000,     3,   20 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17333]}],"prevLine":"            { 0x9C40000000000000,   -50,    4 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xAD78EBC5AC620000,     3,   20 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x813F3978F8940984,    30,   28 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17334]}],"prevLine":"            { 0xE8D4A51000000000,   -24,   12 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x813F3978F8940984,    30,   28 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xC097CE7BC90715B3,    56,   36 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17335]}],"prevLine":"            { 0xAD78EBC5AC620000,     3,   20 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xC097CE7BC90715B3,    56,   36 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x8F7E32CE7BEA5C70,    83,   44 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17336]}],"prevLine":"            { 0x813F3978F8940984,    30,   28 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x8F7E32CE7BEA5C70,    83,   44 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xD5D238A4ABE98068,   109,   52 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17337]}],"prevLine":"            { 0xC097CE7BC90715B3,    56,   36 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xD5D238A4ABE98068,   109,   52 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x9F4F2726179A2245,   136,   60 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17338]}],"prevLine":"            { 0x8F7E32CE7BEA5C70,    83,   44 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x9F4F2726179A2245,   136,   60 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xED63A231D4C4FB27,   162,   68 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17339]}],"prevLine":"            { 0xD5D238A4ABE98068,   109,   52 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xED63A231D4C4FB27,   162,   68 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xB0DE65388CC8ADA8,   189,   76 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17340]}],"prevLine":"            { 0x9F4F2726179A2245,   136,   60 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xB0DE65388CC8ADA8,   189,   76 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x83C7088E1AAB65DB,   216,   84 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17341]}],"prevLine":"            { 0xED63A231D4C4FB27,   162,   68 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x83C7088E1AAB65DB,   216,   84 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xC45D1DF942711D9A,   242,   92 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17342]}],"prevLine":"            { 0xB0DE65388CC8ADA8,   189,   76 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xC45D1DF942711D9A,   242,   92 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x924D692CA61BE758,   269,  100 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17343]}],"prevLine":"            { 0x83C7088E1AAB65DB,   216,   84 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x924D692CA61BE758,   269,  100 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xDA01EE641A708DEA,   295,  108 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17344]}],"prevLine":"            { 0xC45D1DF942711D9A,   242,   92 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xDA01EE641A708DEA,   295,  108 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xA26DA3999AEF774A,   322,  116 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17345]}],"prevLine":"            { 0x924D692CA61BE758,   269,  100 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xA26DA3999AEF774A,   322,  116 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xF209787BB47D6B85,   348,  124 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17346]}],"prevLine":"            { 0xDA01EE641A708DEA,   295,  108 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xF209787BB47D6B85,   348,  124 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xB454E4A179DD1877,   375,  132 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17347]}],"prevLine":"            { 0xA26DA3999AEF774A,   322,  116 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xB454E4A179DD1877,   375,  132 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x865B86925B9BC5C2,   402,  140 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17348]}],"prevLine":"            { 0xF209787BB47D6B85,   348,  124 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x865B86925B9BC5C2,   402,  140 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xC83553C5C8965D3D,   428,  148 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17349]}],"prevLine":"            { 0xB454E4A179DD1877,   375,  132 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xC83553C5C8965D3D,   428,  148 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x952AB45CFA97A0B3,   455,  156 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17350]}],"prevLine":"            { 0x865B86925B9BC5C2,   402,  140 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x952AB45CFA97A0B3,   455,  156 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xDE469FBD99A05FE3,   481,  164 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17351]}],"prevLine":"            { 0xC83553C5C8965D3D,   428,  148 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xDE469FBD99A05FE3,   481,  164 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xA59BC234DB398C25,   508,  172 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17352]}],"prevLine":"            { 0x952AB45CFA97A0B3,   455,  156 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xA59BC234DB398C25,   508,  172 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xF6C69A72A3989F5C,   534,  180 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17353]}],"prevLine":"            { 0xDE469FBD99A05FE3,   481,  164 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xF6C69A72A3989F5C,   534,  180 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xB7DCBF5354E9BECE,   561,  188 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17354]}],"prevLine":"            { 0xA59BC234DB398C25,   508,  172 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xB7DCBF5354E9BECE,   561,  188 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x88FCF317F22241E2,   588,  196 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17355]}],"prevLine":"            { 0xF6C69A72A3989F5C,   534,  180 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x88FCF317F22241E2,   588,  196 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xCC20CE9BD35C78A5,   614,  204 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17356]}],"prevLine":"            { 0xB7DCBF5354E9BECE,   561,  188 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xCC20CE9BD35C78A5,   614,  204 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x98165AF37B2153DF,   641,  212 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17357]}],"prevLine":"            { 0x88FCF317F22241E2,   588,  196 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xE2A0B5DC971F303A,   667,  220 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xA8D9D1535CE3B396,   694,  228 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17359]}],"prevLine":"            { 0x98165AF37B2153DF,   641,  212 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xA8D9D1535CE3B396,   694,  228 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xFB9B7CD9A4A7443C,   720,  236 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17360]}],"prevLine":"            { 0xE2A0B5DC971F303A,   667,  220 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xFB9B7CD9A4A7443C,   720,  236 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xBB764C4CA7A44410,   747,  244 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17361]}],"prevLine":"            { 0xA8D9D1535CE3B396,   694,  228 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xBB764C4CA7A44410,   747,  244 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x8BAB8EEFB6409C1A,   774,  252 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17362]}],"prevLine":"            { 0xFB9B7CD9A4A7443C,   720,  236 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x8BAB8EEFB6409C1A,   774,  252 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xD01FEF10A657842C,   800,  260 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17363]}],"prevLine":"            { 0xBB764C4CA7A44410,   747,  244 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xD01FEF10A657842C,   800,  260 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x9B10A4E5E9913129,   827,  268 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17364]}],"prevLine":"            { 0x8BAB8EEFB6409C1A,   774,  252 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x9B10A4E5E9913129,   827,  268 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xE7109BFBA19C0C9D,   853,  276 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17365]}],"prevLine":"            { 0xD01FEF10A657842C,   800,  260 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xE7109BFBA19C0C9D,   853,  276 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xAC2820D9623BF429,   880,  284 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17366]}],"prevLine":"            { 0x9B10A4E5E9913129,   827,  268 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xAC2820D9623BF429,   880,  284 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x80444B5E7AA7CF85,   907,  292 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17367]}],"prevLine":"            { 0xE7109BFBA19C0C9D,   853,  276 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x80444B5E7AA7CF85,   907,  292 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xBF21E44003ACDD2D,   933,  300 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17368]}],"prevLine":"            { 0xAC2820D9623BF429,   880,  284 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xBF21E44003ACDD2D,   933,  300 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x8E679C2F5E44FF8F,   960,  308 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17369]}],"prevLine":"            { 0x80444B5E7AA7CF85,   907,  292 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x8E679C2F5E44FF8F,   960,  308 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0xD433179D9C8CB841,   986,  316 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17370]}],"prevLine":"            { 0xBF21E44003ACDD2D,   933,  300 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0xD433179D9C8CB841,   986,  316 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"            { 0x9E19DB92B4E31BA9,  1013,  324 },","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17371]}],"prevLine":"            { 0x8E679C2F5E44FF8F,   960,  308 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3515","currLine":"            { 0x9E19DB92B4E31BA9,  1013,  324 },","falseAlarm":false,"level":1,"message":"All integer constants of unsigned type should have 'U' suffix.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17372]}],"prevLine":"            { 0xD433179D9C8CB841,   986,  316 },","sastId":"AUTOSAR-M2-13-3"}
{"code":"V3526","currLine":"    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 10000000) + (minor * 100000) + (patch)))","falseAlarm":false,"level":1,"message":"Each parameter of the macro should be surrounded by parentheses. Consider inspecting parameters 'major', 'minor' of the 'JSON_HEDLEY_MSVC_VERSION_CHECK' macro.","nextLine":"#elif defined(_MSC_VER) && (_MSC_VER >= 1200)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[425]}],"prevLine":"#elif defined(_MSC_VER) && (_MSC_VER >= 1400)","sastId":"AUTOSAR-M16-0-6"}
{"code":"V3526","currLine":"    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 1000000) + (minor * 10000) + (patch)))","falseAlarm":false,"level":1,"message":"Each parameter of the macro should be surrounded by parentheses. Consider inspecting parameters 'major', 'minor' of the 'JSON_HEDLEY_MSVC_VERSION_CHECK' macro.","nextLine":"#else","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[427]}],"prevLine":"#elif defined(_MSC_VER) && (_MSC_VER >= 1200)","sastId":"AUTOSAR-M16-0-6"}
{"code":"V3526","currLine":"    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_VER >= ((major * 100) + (minor)))","falseAlarm":false,"level":1,"message":"Each parameter of the macro should be surrounded by parentheses. Consider inspecting the 'major' parameter of the 'JSON_HEDLEY_MSVC_VERSION_CHECK' macro.","nextLine":"#endif","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[429]}],"prevLine":"#else","sastId":"AUTOSAR-M16-0-6"}
{"code":"V3527","currLine":"    std::transform(j.rbegin(), j.rend(),","falseAlarm":false,"level":1,"message":"The return value of non-void function 'transform' should be used.","nextLine":"                   std::front_inserter(l), [](const BasicJsonType & i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4786]}],"prevLine":"    l.clear();","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"    std::transform(j.begin(), j.end(), std::begin(l),","falseAlarm":false,"level":1,"message":"The return value of non-void function 'transform' should be used.","nextLine":"                   [](const BasicJsonType & elem)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4803]}],"prevLine":"    l.resize(j.size());","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"    std::transform(j.begin(), j.end(),","falseAlarm":false,"level":1,"message":"The return value of non-void function 'transform' should be used.","nextLine":"                   std::inserter(ret, end(ret)), [](const BasicJsonType & i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4851]}],"prevLine":"    ret.reserve(j.size());","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"    std::transform(","falseAlarm":false,"level":1,"message":"The return value of non-void function 'transform' should be used.","nextLine":"        j.begin(), j.end(), std::inserter(ret, end(ret)),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4871]}],"prevLine":"    ConstructibleArrayType ret;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"    std::transform(","falseAlarm":false,"level":1,"message":"The return value of non-void function 'transform' should be used.","nextLine":"        inner_object->begin(), inner_object->end(),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4945]}],"prevLine":"    using value_type = typename ConstructibleObjectType::value_type;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'emplace' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5062]}],"prevLine":"        }","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'emplace' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5082]}],"prevLine":"        }","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            std::copy(std::begin(arr), std::end(arr), j.m_data.m_value.array->begin());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'copy' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5591]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7551]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_LIKELY(*range <= current && current <= *(++range))) // NOLINT(bugprone-inc-dec-in-conditions)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7597]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8877]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                get_ignore_noop();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_ignore_noop' should be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9287]}],"prevLine":"            {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9291]}],"prevLine":"            {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, \"cstring\")))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9343]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                        get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"                        return get_cbor_binary(b) && sax->binary(b);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9957]}],"prevLine":"                        }","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                    get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"                    if (JSON_HEDLEY_UNLIKELY(!get_cbor_string(key) || !sax->key(key)))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10300]}],"prevLine":"                {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(!get_msgpack_string(key) || !sax->key(key)))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10948]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            get(); ","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10998]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                get_ignore_noop();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_ignore_noop' should be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11137]}],"prevLine":"                dim.push_back(dimlen);","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        get_ignore_noop();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_ignore_noop' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11383]}],"sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            get_ignore_noop();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_ignore_noop' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(current != '#'))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11401]}],"sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, \"char\")))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11590]}],"prevLine":"            {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                get_ignore_noop();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_ignore_noop' should be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11725]}],"prevLine":"                }","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                get_ignore_noop();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_ignore_noop' should be used.","nextLine":"                key.clear();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11807]}],"prevLine":"                }","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, \"number\")))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11833]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11910]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, \"number\")))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11939]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        std::memcpy(&result, vec.data(), sizeof(NumberType));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memcpy' should be used.","nextLine":"        return true;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11957]}],"prevLine":"        // step 2: convert array into number of type T and return","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, \"string\")))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11983]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            get();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get' should be used.","nextLine":"            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, \"binary\")))","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12016]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        get_token();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_token' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12249]}],"prevLine":"        // read first token","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                sdp.parse_error(m_lexer.get_position(),","falseAlarm":false,"level":1,"message":"The return value of non-void function 'parse_error' should be used.","nextLine":"                                m_lexer.get_token_string(),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12272]}],"prevLine":"            {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                sdp.parse_error(m_lexer.get_position(),","falseAlarm":false,"level":1,"message":"The return value of non-void function 'parse_error' should be used.","nextLine":"                                m_lexer.get_token_string(),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12300]}],"prevLine":"            {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                        get_token();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_token' should be used.","nextLine":"                        continue;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12405]}],"prevLine":"                        // parse values","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                    get_token();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_token' should be used.","nextLine":"                    continue;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12559]}],"prevLine":"                    // parse a new value","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                get_token();","falseAlarm":false,"level":1,"message":"The return value of non-void function 'get_token' should be used.","nextLine":"                continue;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12613]}],"prevLine":"                // parse values","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        reference_tokens.insert(reference_tokens.end(),","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"                                ptr.reference_tokens.begin(),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13906]}],"prevLine":"    {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        v.insert(v.end(), s, s + length);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14979]}],"prevLine":"    {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        stream.put(c);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'put' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14998]}],"prevLine":"    {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        stream.write(s, static_cast<std::streamsize>(length));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'write' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15004]}],"prevLine":"    {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        str.append(s, length);","falseAlarm":false,"level":1,"message":"Instantiation of output_string_adapter < uint8_t, basic_string < uint8_t, char_traits < uint8_t >, allocator < uint8_t > > >: The return value of non-void function 'append' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15029]}],"prevLine":"    {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        std::memcpy(vec.data(), &n, sizeof(NumberType));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memcpy' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16789]}],"prevLine":"        std::array<CharType, sizeof(NumberType)> vec{};","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        std::memcpy(&result, &x, sizeof(x));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memcpy' should be used.","nextLine":"        return result;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16847]}],"prevLine":"        CharType result;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"    std::memcpy(&target, &source, sizeof(Source));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memcpy' should be used.","nextLine":"    return target;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16961]}],"prevLine":"    Target target;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        std::memset(buf + k, '0', static_cast<size_t>(n) - static_cast<size_t>(k));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memset' should be used.","nextLine":"        // Make it look like a floating-point number (#362, #378)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17906]}],"sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memmove' should be used.","nextLine":"        buf[n] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17920]}],"sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        std::memmove(buf + (2 + static_cast<size_t>(-n)), buf, static_cast<size_t>(k));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memmove' should be used.","nextLine":"        buf[0] = '0';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17930]}],"sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        std::memset(buf + 2, '0', static_cast<size_t>(-n));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memset' should be used.","nextLine":"        return buf + (2U + static_cast<size_t>(-n) + static_cast<size_t>(k));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17933]}],"prevLine":"        buf[1] = '.';","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        std::memmove(buf + 2, buf + 1, static_cast<size_t>(k) - 1);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'memmove' should be used.","nextLine":"        buf[1] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17949]}],"sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        Container::emplace_back(key, std::forward<T>(t));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'emplace_back' should be used.","nextLine":"        return {std::prev(this->end()), true};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19070]}],"prevLine":"        }","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        Container::emplace_back(std::forward<KeyType>(key), std::forward<T>(t));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'emplace_back' should be used.","nextLine":"        return {std::prev(this->end()), true};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19085]}],"prevLine":"        }","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            insert(*it);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19358]}],"prevLine":"        {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'construct' should be used.","nextLine":"        JSON_ASSERT(obj != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19693]}],"prevLine":"        std::unique_ptr<T, decltype(deleter)> obj(AllocatorTraits::allocate(alloc, 1), deleter);","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                    std::move(array->begin(), array->end(), std::back_inserter(stack));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'move' should be used.","nextLine":"                }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19880]}],"prevLine":"                    stack.reserve(array->size());","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                        std::move(current_item.m_data.m_value.array->begin(), current_item.m_data.m_value.array->end(), std::back_inserter(stack));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'move' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19901]}],"prevLine":"                    {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        swap(m_data.m_type, other.m_data.m_type);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        swap(m_data.m_value, other.m_data.m_value);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20548]}],"prevLine":"        using std::swap;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        swap(m_data.m_value, other.m_data.m_value);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        json_base_class_t::operator=(std::move(other));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20549]}],"prevLine":"        swap(m_data.m_type, other.m_data.m_type);","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        json_base_class_t::operator=(std::move(other));","falseAlarm":false,"level":1,"message":"The return value of non-void function '=' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20550]}],"prevLine":"        swap(m_data.m_value, other.m_data.m_value);","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        set_parent(m_data.m_value.array->back(), old_capacity);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'set_parent' should be used.","nextLine":"        // if val is moved from, basic_json move constructor marks it null, so we do not call the destructor","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22412]}],"prevLine":"        m_data.m_value.array->push_back(std::move(val));","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        set_parent(m_data.m_value.array->back(), old_capacity);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'set_parent' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22445]}],"prevLine":"        m_data.m_value.array->push_back(val);","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        set_parent(res.first->second);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'set_parent' should be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22476]}],"prevLine":"        auto res = m_data.m_value.object->insert(val);","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        set_parent(res.first->second);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'set_parent' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22557]}],"prevLine":"        auto res = m_data.m_value.object->emplace(std::forward<Args>(args)...);","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        std::swap(m_data.m_type, other.m_data.m_type);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        std::swap(m_data.m_value, other.m_data.m_value);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22774]}],"prevLine":"    {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        std::swap(m_data.m_value, other.m_data.m_value);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22775]}],"prevLine":"        std::swap(m_data.m_type, other.m_data.m_type);","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            swap(*(m_data.m_value.array), other);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22802]}],"prevLine":"            using std::swap;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            swap(*(m_data.m_value.object), other);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22818]}],"prevLine":"            using std::swap;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            swap(*(m_data.m_value.string), other);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22834]}],"prevLine":"            using std::swap;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            swap(*(m_data.m_value.binary), other);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22850]}],"prevLine":"            using std::swap;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"            swap(*(m_data.m_value.binary), other);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'swap' should be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22866]}],"prevLine":"            using std::swap;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        o.width(0);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'width' should be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23287]}],"prevLine":"        // reset width to 0 for subsequent calls to this stream","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        to_cbor(j, result);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'to_cbor' should be used.","nextLine":"        return result;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23545]}],"prevLine":"        std::vector<std::uint8_t> result;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        to_msgpack(j, result);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'to_msgpack' should be used.","nextLine":"        return result;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23568]}],"prevLine":"        std::vector<std::uint8_t> result;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        to_ubjson(j, result, use_size, use_type);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'to_ubjson' should be used.","nextLine":"        return result;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23593]}],"prevLine":"        std::vector<std::uint8_t> result;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        to_bjdata(j, result, use_size, use_type);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'to_bjdata' should be used.","nextLine":"        return result;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23620]}],"prevLine":"        std::vector<std::uint8_t> result;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"        to_bson(j, result);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'to_bson' should be used.","nextLine":"        return result;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23645]}],"prevLine":"        std::vector<std::uint8_t> result;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                result.at(top_pointer);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'at' should be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24054]}],"prevLine":"            {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                        parent.insert(parent.begin() + static_cast<difference_type>(idx), val);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24090]}],"prevLine":"                        // default case: insert add offset","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                    parent.erase(it);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'erase' should be used.","nextLine":"                }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24123]}],"prevLine":"                {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                parent.erase(json_pointer::template array_index<basic_json_t>(last_path));","falseAlarm":false,"level":1,"message":"The return value of non-void function 'erase' should be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24133]}],"prevLine":"                // note erase performs range check","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                    result.insert(result.end(), temp_diff.begin(), temp_diff.end());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"                    ++i;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24317]}],"prevLine":"                    auto temp_diff = diff(source[i], target[i], detail::concat(path, '/', std::to_string(i)));","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                    result.insert(result.begin() + end_index, object(","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24330]}],"prevLine":"                    // indices","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                        result.insert(result.end(), temp_diff.begin(), temp_diff.end());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'insert' should be used.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24365]}],"prevLine":"                        auto temp_diff = diff(it.value(), target[it.key()], path_key);","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"                    erase(it.key());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'erase' should be used.","nextLine":"                }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24439]}],"prevLine":"                {","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3529","currLine":"                static_cast<double>(static_cast<float>(n)) == static_cast<double>(n))","falseAlarm":false,"level":1,"message":"Floating-point expressions should not be directly tested for equality or inequality. It is better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16809]}],"prevLine":"                static_cast<double>(n) <= static_cast<double>((std::numeric_limits<float>::max)()) &&","sastId":"AUTOSAR-M6-2-2"}
{"code":"V3538","currLine":"using string_can_append_op = decltype(std::declval<StringType&>() += std::declval < Arg && > ());","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4275]}],"prevLine":"template<typename StringType, typename Arg>","sastId":"AUTOSAR-M6-2-1"}
{"code":"V3538","currLine":"            object_element = &(ref_stack.back()->m_data.m_value.object->operator[](val) = discarded);","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7080]}],"prevLine":"        {","sastId":"AUTOSAR-M6-2-1"}
{"code":"V3538","currLine":"        return current = ia.get_character();","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used. Consider inspecting the expression: 'current = ia.get_character()'.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11900]}],"prevLine":"        ++chars_read;","sastId":"AUTOSAR-M6-2-1"}
{"code":"V3538","currLine":"        return last_token = m_lexer.scan();","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used. Consider inspecting the expression: 'last_token = m_lexer.scan()'.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12644]}],"prevLine":"    {","sastId":"AUTOSAR-M6-2-1"}
{"code":"V3538","currLine":"        return *this /= std::to_string(array_idx);","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used. Consider inspecting the expression: '* this /= std::to_string(array_idx)'.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13924]}],"prevLine":"    {","sastId":"AUTOSAR-M6-2-1"}
{"code":"V3538","currLine":"        return json_pointer(lhs) /= rhs;","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used. Consider inspecting the expression: 'json_pointer(lhs) /= rhs'.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13932]}],"prevLine":"    {","sastId":"AUTOSAR-M6-2-1"}
{"code":"V3538","currLine":"        return json_pointer(lhs) /= std::move(token);","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used. Consider inspecting the expression: 'json_pointer(lhs) /= std::move(token)'.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13939]}],"prevLine":"    {","sastId":"AUTOSAR-M6-2-1"}
{"code":"V3538","currLine":"        return json_pointer(lhs) /= array_idx;","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used. Consider inspecting the expression: 'json_pointer(lhs) /= array_idx'.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13946]}],"prevLine":"    {","sastId":"AUTOSAR-M6-2-1"}
{"code":"V3538","currLine":"            return result += calc_bson_element_size(el.first, el.second);","falseAlarm":false,"level":1,"message":"The result of an assignment expression should not be used.","nextLine":"        });","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16304]}],"prevLine":"        {","sastId":"AUTOSAR-M6-2-1"}
{"code":"V3539","currLine":"    return input_adapter(ptr, ptr + length);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"}","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6593]}],"prevLine":"    const auto* ptr = reinterpret_cast<const char*>(b);","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"    return input_adapter(array, array + N);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"}","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6599]}],"prevLine":"{","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        : ia(reinterpret_cast<const char*>(b), reinterpret_cast<const char*>(b) + l) {}","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6615]}],"prevLine":"    span_input_adapter(CharT b, std::size_t l)","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        JSON_ASSERT(char_traits<char_type>::to_char_type(current) == literal_text[0]);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        for (std::size_t i = 1; i < length; ++i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8676]}],"prevLine":"    {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            if (JSON_HEDLEY_UNLIKELY(char_traits<char_type>::to_char_type(get()) != literal_text[i]))","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8679]}],"prevLine":"        {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        v.insert(v.end(), s, s + length);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14979]}],"prevLine":"    {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        JSON_ASSERT(buf[len - 1] != '0');","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf[len - 1]--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17485]}],"prevLine":"    {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        buf[len - 1]--;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        rest += ten_k;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17486]}],"prevLine":"        JSON_ASSERT(buf[len - 1] != '0');","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        //","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17572]}],"prevLine":"        JSON_ASSERT(d <= 9);","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        //","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17679]}],"prevLine":"        JSON_ASSERT(d <= 9);","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        std::memset(buf + k, '0', static_cast<size_t>(n) - static_cast<size_t>(k));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        // Make it look like a floating-point number (#362, #378)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17906]}],"sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        buf[n + 0] = '.';","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf[n + 1] = '0';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17908]}],"prevLine":"        // Make it look like a floating-point number (#362, #378)","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        buf[n + 1] = '0';","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return buf + (static_cast<size_t>(n) + 2);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17909]}],"prevLine":"        buf[n + 0] = '.';","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        return buf + (static_cast<size_t>(n) + 2);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17910]}],"prevLine":"        buf[n + 1] = '0';","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf[n] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17920]}],"sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        buf[n] = '.';","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return buf + (static_cast<size_t>(k) + 1U);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17921]}],"prevLine":"        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        return buf + (static_cast<size_t>(k) + 1U);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17922]}],"prevLine":"        buf[n] = '.';","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        std::memmove(buf + (2 + static_cast<size_t>(-n)), buf, static_cast<size_t>(k));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf[0] = '0';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17930]}],"sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        buf[0] = '0';","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf[1] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17931]}],"prevLine":"        std::memmove(buf + (2 + static_cast<size_t>(-n)), buf, static_cast<size_t>(k));","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        buf[1] = '.';","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        std::memset(buf + 2, '0', static_cast<size_t>(-n));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17932]}],"prevLine":"        buf[0] = '0';","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        std::memset(buf + 2, '0', static_cast<size_t>(-n));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return buf + (2U + static_cast<size_t>(-n) + static_cast<size_t>(k));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17933]}],"prevLine":"        buf[1] = '.';","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        return buf + (2U + static_cast<size_t>(-n) + static_cast<size_t>(k));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17934]}],"prevLine":"        std::memset(buf + 2, '0', static_cast<size_t>(-n));","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        buf += 1;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17942]}],"sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        std::memmove(buf + 2, buf + 1, static_cast<size_t>(k) - 1);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf[1] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17949]}],"sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        buf[1] = '.';","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        buf += 1 + static_cast<size_t>(k);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17950]}],"prevLine":"        std::memmove(buf + 2, buf + 1, static_cast<size_t>(k) - 1);","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        buf += 1 + static_cast<size_t>(k);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17951]}],"prevLine":"        buf[1] = '.';","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 7, \"\\\\u%04x\",","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                                                                      static_cast<std::uint16_t>(codepoint)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18478]}],"prevLine":"                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 13, \"\\\\u%04x\\\\u%04x\",","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18485]}],"prevLine":"                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        buffer_ptr += n_chars;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18774]}],"prevLine":"        // so we later avoid reversing the result","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        auto* end = ::nlohmann::detail::to_chars(begin, begin + number_buffer.size(), x);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18832]}],"prevLine":"        auto* begin = number_buffer.data();","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            const auto end = std::remove(number_buffer.begin(), number_buffer.begin() + len, thousands_sep);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            std::fill(end, number_buffer.end(), '\\0');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18855]}],"prevLine":"            // NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto): std::remove returns an iterator, see https://github.com/nlohmann/json/issues/3081","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            std::none_of(number_buffer.begin(), number_buffer.begin() + len + 1,","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                         [](char c)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18876]}],"prevLine":"        const bool value_is_int_like =","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"                          std::move(key.get_ref<string_t&>()), (init.begin() + 1)->moved_or_copied()));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22495]}],"prevLine":"            push_back(typename object_t::value_type(","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        return from_cbor(ptr, ptr + len, strict, allow_exceptions, tag_handler);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23703]}],"prevLine":"    {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        return from_msgpack(ptr, ptr + len, strict, allow_exceptions);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23758]}],"prevLine":"    {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        return from_ubjson(ptr, ptr + len, strict, allow_exceptions);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23812]}],"prevLine":"    {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        return from_bson(ptr, ptr + len, strict, allow_exceptions);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23896]}],"prevLine":"    {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"    return nlohmann::json::parse(s, s + n);","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"}","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24478]}],"prevLine":"{","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3540","currLine":"                            return (mant == 0)","falseAlarm":false,"level":1,"message":"There should be no 'floating to integral' implicit cast. Consider inspecting the return statement of the function.","nextLine":"                            ? std::numeric_limits<double>::infinity()","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10012]}],"prevLine":"                        case 31:","sastId":"AUTOSAR-M5-0-5"}
{"code":"V3540","currLine":"                            return (mant == 0)","falseAlarm":false,"level":1,"message":"There should be no 'floating to integral' implicit cast. Consider inspecting the return statement of the function.","nextLine":"                            ? std::numeric_limits<double>::infinity()","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11559]}],"prevLine":"                        case 31:","sastId":"AUTOSAR-M5-0-5"}
{"code":"V3541","currLine":"std::size_t hash(const BasicJsonType& j)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 6023, 6046.","nextLine":"{","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6023,6046]}],"prevLine":"template<typename BasicJsonType>","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    bool parse_bson_internal()","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 9313, 9323, 9519, 9437.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9313,9323,9519,9437]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    bool parse_bson_array()","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 9535, 9545, 9519, 9442.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9535,9545,9519,9442]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    bool parse_cbor_internal(const bool get_char,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 9565, 9772, 10259.","nextLine":"                             const cbor_tag_handler_t tag_handler)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9565,9772,10259]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    bool parse_cbor_internal(const bool get_char,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 9565, 9827, 10306.","nextLine":"                             const cbor_tag_handler_t tag_handler)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9565,9827,10306]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    bool parse_cbor_internal(const bool get_char,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 9565, 9917.","nextLine":"                             const cbor_tag_handler_t tag_handler)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9565,9917]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    bool get_cbor_string(string_t& result)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 10056, 10123.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10056,10123]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    bool get_cbor_binary(binary_t& result)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 10152, 10223.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10152,10223]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    bool parse_msgpack_internal()","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 10341, 10497, 10954.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10341,10497,10954]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    bool parse_msgpack_internal()","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 10341, 10516, 10925.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10341,10516,10925]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    bool parse_ubjson_internal(const bool get_char = true)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 10975, 10977, 11612, 11705.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10975,10977,11612,11705]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    bool parse_ubjson_internal(const bool get_char = true)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 10975, 10977, 11615, 11782.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10975,10977,11615,11782]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    bool get_ubjson_ndarray_size(std::vector<size_t>& dim)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 11089, 11095, 11413, 11304.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11089,11095,11413,11304]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    static void flatten(const string_t& reference_string,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 14541, 14559.","nextLine":"                        const BasicJsonType& value,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14541,14559]}],"prevLine":"    template<typename BasicJsonType>","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    void write_cbor(const BasicJsonType& j)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 15129, 15336.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15129,15336]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    void write_msgpack(const BasicJsonType& j)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 15453, 15647.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15453,15647]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    void write_ubjson(const BasicJsonType& j, const bool use_count,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 15779, 15872.","nextLine":"                      const bool use_type, const bool add_prefix = true,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15779,15872]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    void write_ubjson(const BasicJsonType& j, const bool use_count,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 15779, 15930, 16691.","nextLine":"                      const bool use_type, const bool add_prefix = true,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15779,15930,16691]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    void write_bson_array(const string_t& name,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 16170, 16180, 16261.","nextLine":"                          const typename BasicJsonType::array_t& value)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16170,16180,16261]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    void write_bson_object(const typename BasicJsonType::object_t& value)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 16314, 16320, 16258, 16141.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16314,16320,16258,16141]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    void dump(const BasicJsonType& val,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 18116, 18151.","nextLine":"              const bool pretty_print,","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18116,18151]}],"prevLine":"    */","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    basic_json& operator=(basic_json other) noexcept (","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 20536, 20550.","nextLine":"        std::is_nothrow_move_constructible<value_t>::value&&","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20536,20550]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/operator=/","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    static basic_json diff(const basic_json& source, const basic_json& target,","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 24285, 24316.","nextLine":"                           const std::string& path = \"\")","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24285,24316]}],"prevLine":"    JSON_HEDLEY_WARN_UNUSED_RESULT","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3541","currLine":"    void merge_patch(const basic_json& apply_patch)","falseAlarm":false,"level":1,"message":"Functions should contain neither direct nor indirect recursion call. Check lines: 24427, 24443.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24427,24443]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/merge_patch/","sastId":"AUTOSAR-A7-5-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(!f.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    for (auto pos = s.find(f);                // find first occurrence of f","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[2974]}],"prevLine":"{","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(anchor.m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5265]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            return 0;              // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6105]}],"prevLine":"        default:                   // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_file != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6197]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            JSON_ASSERT(utf8_bytes_index == 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6455]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"            JSON_ASSERT(utf8_bytes_index == 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6456]}],"prevLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6460]}],"prevLine":"        // use buffer","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        return utf8_bytes[utf8_bytes_index++];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6461]}],"prevLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6881]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6882]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6891]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6892]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_array());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6913]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(ref_stack.back()->is_array());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6914]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6956]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(object_element);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6964]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        *object_element = BasicJsonType(std::forward<Value>(v));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6965]}],"prevLine":"        JSON_ASSERT(ref_stack.back()->is_object());","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7101]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7102]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7157]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7158]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7208]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7243]}],"prevLine":"        // we now only expect arrays and objects","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        // check if we should store an element for the current key","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7253]}],"prevLine":"        // object","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(!key_keep_stack.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        const bool store_element = key_keep_stack.back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7255]}],"prevLine":"        // check if we should store an element for the current key","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        *object_element = std::move(value);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7264]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(loc != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7519]}],"prevLine":"        const auto* loc = localeconv();","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(current == 'u');","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        int codepoint = 0;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7545]}],"prevLine":"        // this function only makes sense after reading `\\u`","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(0x0000 <= codepoint && codepoint <= 0xFFFF);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        return codepoint;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7571]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        add(current);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7592]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(current == '\\\"');","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7633]}],"prevLine":"        // we entered the function by reading an open quote","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                            JSON_ASSERT(0x00 <= codepoint && codepoint <= 0x10FFFF);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7753]}],"prevLine":"                            // result of the above calculation yields a proper codepoint","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8382]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8629]}],"prevLine":"            // we checked the number format before","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8645]}],"prevLine":"            // we checked the number format before","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8662]}],"prevLine":"        // we checked the number format before","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(char_traits<char_type>::to_char_type(current) == literal_text[0]);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        for (std::size_t i = 1; i < length; ++i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8676]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"            JSON_ASSERT(!token_string.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            token_string.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8768]}],"prevLine":"        {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9279]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                        return false;        // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9962]}],"prevLine":"                    default:                 // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10005]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10006]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11552]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11553]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12089]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(!states.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12575]}],"prevLine":"                    // are effectively jumping to the beginning of this if.","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(!states.empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12629]}],"prevLine":"                // are effectively jumping to the beginning of this if.","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12971]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13068]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13112]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13151]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                return m_it.object_iterator->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13157]}],"prevLine":"            {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                return *m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13163]}],"prevLine":"            {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13195]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                return &(m_it.object_iterator->second);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13201]}],"prevLine":"            {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                return &*m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13207]}],"prevLine":"            {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13248]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13299]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13346]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13391]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13447]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13526]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13555]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13593]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(reference_token[pos] == '~');","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14513]}],"prevLine":"            {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(oa);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15093]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15846]}],"prevLine":"                {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    oa->write_character(to_char_type('$'));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15892]}],"prevLine":"                {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15944]}],"prevLine":"                {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                return 0ul;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16240]}],"prevLine":"            default:","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16287]}],"prevLine":"            default:","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(x.e == y.e);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(x.f >= y.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16980]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(x.f >= y.f);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16981]}],"prevLine":"        JSON_ASSERT(x.e == y.e);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(x.f != 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17057]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(delta >= 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17076]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17077]}],"prevLine":"        JSON_ASSERT(delta >= 0);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17099]}],"prevLine":"{","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17100]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(e >= -1500);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(e <=  1500);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17380]}],"prevLine":"    // NB: log_10(2) ~= 78913 / 2^18","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(e <=  1500);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    const int f = kAlpha - e - 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17381]}],"prevLine":"    JSON_ASSERT(e >= -1500);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(index >= 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17386]}],"prevLine":"    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17387]}],"prevLine":"    JSON_ASSERT(index >= 0);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17390]}],"prevLine":"    const cached_power cached = kCachedPowers[static_cast<std::size_t>(index)];","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17391]}],"prevLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(len >= 1);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(dist <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17457]}],"prevLine":"{","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(dist <= delta);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(rest <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17458]}],"prevLine":"    JSON_ASSERT(len >= 1);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(rest <= delta);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(ten_k > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17459]}],"prevLine":"    JSON_ASSERT(dist <= delta);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(ten_k > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17460]}],"prevLine":"    JSON_ASSERT(rest <= delta);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(buf[len - 1] != '0');","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        buf[len - 1]--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17485]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(M_plus.e <= kGamma);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17513]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(M_plus.e <= kGamma);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17514]}],"prevLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(p1 > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17535]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17571]}],"prevLine":"        //","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(p2 > delta);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17658]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        p2 *= 10;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17669]}],"prevLine":"        //","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17678]}],"prevLine":"        //","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(m_plus.e == v.e);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17739]}],"prevLine":"{","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(m_plus.e == v.e);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17740]}],"prevLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17801]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17802]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(e > -1000);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(e <  1000);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17838]}],"prevLine":"{","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(e <  1000);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17839]}],"prevLine":"    JSON_ASSERT(e > -1000);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(min_exp < 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(max_exp > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17891]}],"prevLine":"{","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(max_exp > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17892]}],"prevLine":"    JSON_ASSERT(min_exp < 0);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(k > n);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17918]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17976]}],"prevLine":"    static_cast<void>(last); // maybe unused - fix warning","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18001]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(len <= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18011]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18018]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18019]}],"prevLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18020]}],"prevLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18156]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18157]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18184]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    o->write_character('\\\"');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18185]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18226]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    dump(val.m_data.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18247]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18381]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18580]}],"prevLine":"                        default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18641]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(n_chars < number_buffer.size() - 1);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18770]}],"prevLine":"        // spare 1 byte for '\\0'","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(len > 0);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        // check if buffer was large enough","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18847]}],"prevLine":"        // negative value indicates an error","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(static_cast<std::size_t>(len) < number_buffer.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18849]}],"prevLine":"        // check if buffer was large enough","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"            JSON_ASSERT((end - number_buffer.begin()) <= len);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            len = (end - number_buffer.begin());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18857]}],"prevLine":"            std::fill(end, number_buffer.end(), '\\0');","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(byte < utf8d.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        const std::uint8_t type = utf8d[byte];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18931]}],"sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(index < utf8d.size());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        state = utf8d[index];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18941]}],"prevLine":"        const std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        return x; // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18953]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(x < 0 && x < (std::numeric_limits<number_integer_t>::max)()); // NOLINT(misc-redundant-expression)","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        return static_cast<number_unsigned_t>(-(x + 1)) + 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18968]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(obj != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        return obj.release();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19694]}],"prevLine":"        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19989]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19990]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19991]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19992]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20198]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_data.m_type == val.type());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        set_parents();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20200]}],"prevLine":"        }","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(first.m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"        JSON_ASSERT(last.m_object != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20339]}],"prevLine":"    {","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(last.m_object != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20340]}],"prevLine":"        JSON_ASSERT(first.m_object != nullptr);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21452]}],"prevLine":"            auto it = m_data.m_value.object->find(key);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21507]}],"prevLine":"            auto it = m_data.m_value.object->find(std::forward<KeyType>(key));","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"        JSON_ASSERT(m_data.m_value.array != nullptr);","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22574]}],"prevLine":"        iterator result(this);","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3545","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"Operands of the '||' operator should have bool essential type.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24104]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23676]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23692]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23718]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23733]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23748]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23772]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23787]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23802]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23826]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23841]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bjdata).sax_parse(input_format_t::bjdata, &sdp, strict);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23856]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bjdata).sax_parse(input_format_t::bjdata, &sdp, strict);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23871]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23886]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"        return res ? result : basic_json(value_t::discarded);","falseAlarm":false,"level":1,"message":"Conversions between pointers and integer types should not be performed. Consider inspecting the first argument of the 'basic_json' function call.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23910]}],"prevLine":"        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3551","currLine":"    JSON_ASSERT(!f.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    for (auto pos = s.find(f);                // find first occurrence of f","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[2974]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(!f.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    for (auto pos = s.find(f);                // find first occurrence of f","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[2974]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(anchor.m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5265]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(anchor.m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5265]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            return 0;              // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6105]}],"prevLine":"        default:                   // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            return 0;              // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6105]}],"prevLine":"        default:                   // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_file != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6197]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_file != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6197]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            JSON_ASSERT(utf8_bytes_index == 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6455]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            JSON_ASSERT(utf8_bytes_index == 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6455]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(utf8_bytes_index == 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6456]}],"prevLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(utf8_bytes_index == 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6456]}],"prevLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6460]}],"prevLine":"        // use buffer","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6460]}],"prevLine":"        // use buffer","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        return utf8_bytes[utf8_bytes_index++];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6461]}],"prevLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        return utf8_bytes[utf8_bytes_index++];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6461]}],"prevLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6881]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6881]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6882]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6882]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6891]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6891]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6892]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6892]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_array());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6913]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_array());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6913]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_array());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6914]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_array());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6914]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6956]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6956]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(object_element);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6964]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(object_element);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6964]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        *object_element = BasicJsonType(std::forward<Value>(v));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6965]}],"prevLine":"        JSON_ASSERT(ref_stack.back()->is_object());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        *object_element = BasicJsonType(std::forward<Value>(v));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6965]}],"prevLine":"        JSON_ASSERT(ref_stack.back()->is_object());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7101]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7101]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7102]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7102]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7157]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7157]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7158]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7158]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7208]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7208]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7243]}],"prevLine":"        // we now only expect arrays and objects","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7243]}],"prevLine":"        // we now only expect arrays and objects","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        // check if we should store an element for the current key","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7253]}],"prevLine":"        // object","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        // check if we should store an element for the current key","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7253]}],"prevLine":"        // object","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!key_keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        const bool store_element = key_keep_stack.back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7255]}],"prevLine":"        // check if we should store an element for the current key","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(!key_keep_stack.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        const bool store_element = key_keep_stack.back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7255]}],"prevLine":"        // check if we should store an element for the current key","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        *object_element = std::move(value);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7264]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        *object_element = std::move(value);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7264]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(loc != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7519]}],"prevLine":"        const auto* loc = localeconv();","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(loc != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7519]}],"prevLine":"        const auto* loc = localeconv();","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(current == 'u');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        int codepoint = 0;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7545]}],"prevLine":"        // this function only makes sense after reading `\\u`","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(current == 'u');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        int codepoint = 0;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7545]}],"prevLine":"        // this function only makes sense after reading `\\u`","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(0x0000 <= codepoint && codepoint <= 0xFFFF);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        return codepoint;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7571]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(0x0000 <= codepoint && codepoint <= 0xFFFF);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        return codepoint;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7571]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        add(current);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7592]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        add(current);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7592]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(current == '\\\"');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7633]}],"prevLine":"        // we entered the function by reading an open quote","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(current == '\\\"');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7633]}],"prevLine":"        // we entered the function by reading an open quote","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                            JSON_ASSERT(0x00 <= codepoint && codepoint <= 0x10FFFF);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7753]}],"prevLine":"                            // result of the above calculation yields a proper codepoint","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                            JSON_ASSERT(0x00 <= codepoint && codepoint <= 0x10FFFF);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7753]}],"prevLine":"                            // result of the above calculation yields a proper codepoint","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8382]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8382]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8629]}],"prevLine":"            // we checked the number format before","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8629]}],"prevLine":"            // we checked the number format before","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8645]}],"prevLine":"            // we checked the number format before","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8645]}],"prevLine":"            // we checked the number format before","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8662]}],"prevLine":"        // we checked the number format before","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8662]}],"prevLine":"        // we checked the number format before","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(char_traits<char_type>::to_char_type(current) == literal_text[0]);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        for (std::size_t i = 1; i < length; ++i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8676]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(char_traits<char_type>::to_char_type(current) == literal_text[0]);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        for (std::size_t i = 1; i < length; ++i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8676]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(!token_string.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            token_string.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8768]}],"prevLine":"        {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(!token_string.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            token_string.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8768]}],"prevLine":"        {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                static_cast<void>((std::snprintf)(cs.data(), cs.size(), \"<U+%.4X>\", static_cast<unsigned char>(c))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the third function argument.","nextLine":"                result += cs.data();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8831]}],"prevLine":"                std::array<char, 9> cs{{}};","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9279]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9279]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                static_cast<void>((std::snprintf)(cr.data(), cr.size(), \"%.2hhX\", static_cast<unsigned char>(element_type))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the third function argument.","nextLine":"                const std::string cr_str{cr.data()};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9477]}],"prevLine":"                std::array<char, 3> cr{{}};","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                        return false;        // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9962]}],"prevLine":"                    default:                 // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                        return false;        // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9962]}],"prevLine":"                    default:                 // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10005]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10005]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10006]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10006]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11552]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11552]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11553]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11553]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        static_cast<void>((std::snprintf)(cr.data(), cr.size(), \"%.2hhX\", static_cast<unsigned char>(current))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the third function argument.","nextLine":"        return std::string{cr.data()};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12049]}],"prevLine":"        std::array<char, 3> cr{{}};","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12089]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12089]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(!states.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12575]}],"prevLine":"                    // are effectively jumping to the beginning of this if.","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(!states.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12575]}],"prevLine":"                    // are effectively jumping to the beginning of this if.","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(!states.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12629]}],"prevLine":"                // are effectively jumping to the beginning of this if.","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(!states.empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12629]}],"prevLine":"                // are effectively jumping to the beginning of this if.","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12971]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12971]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13068]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13068]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13112]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13112]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13151]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13151]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return m_it.object_iterator->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13157]}],"prevLine":"            {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                return m_it.object_iterator->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13157]}],"prevLine":"            {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return *m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13163]}],"prevLine":"            {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                return *m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13163]}],"prevLine":"            {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13195]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13195]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return &(m_it.object_iterator->second);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13201]}],"prevLine":"            {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                return &(m_it.object_iterator->second);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13201]}],"prevLine":"            {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return &*m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13207]}],"prevLine":"            {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                return &*m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13207]}],"prevLine":"            {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13248]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13248]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13299]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13299]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13346]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13346]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13391]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13391]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13447]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13447]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13526]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13526]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13555]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13555]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13593]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13593]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(reference_token[pos] == '~');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14513]}],"prevLine":"            {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(reference_token[pos] == '~');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14513]}],"prevLine":"            {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(oa);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15093]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(oa);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15093]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15846]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15846]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    oa->write_character(to_char_type('$'));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15892]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    oa->write_character(to_char_type('$'));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15892]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15944]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15944]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return 0ul;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16240]}],"prevLine":"            default:","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                return 0ul;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16240]}],"prevLine":"            default:","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16287]}],"prevLine":"            default:","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16287]}],"prevLine":"            default:","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(x.e == y.e);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(x.f >= y.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16980]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(x.e == y.e);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(x.f >= y.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16980]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(x.f >= y.f);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16981]}],"prevLine":"        JSON_ASSERT(x.e == y.e);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(x.f >= y.f);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16981]}],"prevLine":"        JSON_ASSERT(x.e == y.e);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(x.f != 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17057]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(x.f != 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17057]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(delta >= 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17076]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(delta >= 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17076]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17077]}],"prevLine":"        JSON_ASSERT(delta >= 0);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17077]}],"prevLine":"        JSON_ASSERT(delta >= 0);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17099]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17099]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17100]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17100]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(e >= -1500);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(e <=  1500);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17380]}],"prevLine":"    // NB: log_10(2) ~= 78913 / 2^18","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(e >= -1500);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(e <=  1500);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17380]}],"prevLine":"    // NB: log_10(2) ~= 78913 / 2^18","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(e <=  1500);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    const int f = kAlpha - e - 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17381]}],"prevLine":"    JSON_ASSERT(e >= -1500);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(e <=  1500);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    const int f = kAlpha - e - 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17381]}],"prevLine":"    JSON_ASSERT(e >= -1500);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(index >= 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17386]}],"prevLine":"    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(index >= 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17386]}],"prevLine":"    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17387]}],"prevLine":"    JSON_ASSERT(index >= 0);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17387]}],"prevLine":"    JSON_ASSERT(index >= 0);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17390]}],"prevLine":"    const cached_power cached = kCachedPowers[static_cast<std::size_t>(index)];","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17390]}],"prevLine":"    const cached_power cached = kCachedPowers[static_cast<std::size_t>(index)];","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17391]}],"prevLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17391]}],"prevLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(len >= 1);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(dist <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17457]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(len >= 1);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(dist <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17457]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(dist <= delta);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(rest <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17458]}],"prevLine":"    JSON_ASSERT(len >= 1);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(dist <= delta);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(rest <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17458]}],"prevLine":"    JSON_ASSERT(len >= 1);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(rest <= delta);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(ten_k > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17459]}],"prevLine":"    JSON_ASSERT(dist <= delta);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(rest <= delta);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(ten_k > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17459]}],"prevLine":"    JSON_ASSERT(dist <= delta);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(ten_k > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17460]}],"prevLine":"    JSON_ASSERT(rest <= delta);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(ten_k > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17460]}],"prevLine":"    JSON_ASSERT(rest <= delta);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(buf[len - 1] != '0');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        buf[len - 1]--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17485]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(buf[len - 1] != '0');","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        buf[len - 1]--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17485]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(M_plus.e <= kGamma);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17513]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(M_plus.e <= kGamma);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17513]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(M_plus.e <= kGamma);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17514]}],"prevLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(M_plus.e <= kGamma);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17514]}],"prevLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(p1 > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17535]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(p1 > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17535]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17571]}],"prevLine":"        //","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17571]}],"prevLine":"        //","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(p2 > delta);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17658]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(p2 > delta);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17658]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        p2 *= 10;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17669]}],"prevLine":"        //","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        p2 *= 10;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17669]}],"prevLine":"        //","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17678]}],"prevLine":"        //","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17678]}],"prevLine":"        //","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(m_plus.e == v.e);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17739]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(m_plus.e == v.e);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17739]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(m_plus.e == v.e);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17740]}],"prevLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(m_plus.e == v.e);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17740]}],"prevLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17801]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17801]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17802]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17802]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(e > -1000);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(e <  1000);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17838]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(e > -1000);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(e <  1000);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17838]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(e <  1000);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17839]}],"prevLine":"    JSON_ASSERT(e > -1000);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(e <  1000);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17839]}],"prevLine":"    JSON_ASSERT(e > -1000);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(min_exp < 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(max_exp > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17891]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(min_exp < 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(max_exp > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17891]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(max_exp > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17892]}],"prevLine":"    JSON_ASSERT(min_exp < 0);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(max_exp > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17892]}],"prevLine":"    JSON_ASSERT(min_exp < 0);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(k > n);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17918]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(k > n);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17918]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17976]}],"prevLine":"    static_cast<void>(last); // maybe unused - fix warning","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17976]}],"prevLine":"    static_cast<void>(last); // maybe unused - fix warning","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18001]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18001]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(len <= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18011]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(len <= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18011]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18018]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18018]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18019]}],"prevLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18019]}],"prevLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18020]}],"prevLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18020]}],"prevLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"{}\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18128]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"{\\n\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18134]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                        o->write_characters(\"\\\": \", 3);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                        dump(i->second, true, ensure_ascii, indent_step, new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18150]}],"prevLine":"                        dump_escaped(i->first, ensure_ascii);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                        o->write_characters(\",\\n\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18152]}],"prevLine":"                        dump(i->second, true, ensure_ascii, indent_step, new_indent);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18156]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18156]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18157]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18157]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"\\\": \", 3);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    dump(i->second, true, ensure_ascii, indent_step, new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18161]}],"prevLine":"                    dump_escaped(i->first, ensure_ascii);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                        o->write_characters(\"\\\":\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                        dump(i->second, false, ensure_ascii, indent_step, current_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18178]}],"prevLine":"                        dump_escaped(i->first, ensure_ascii);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18184]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18184]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    o->write_character('\\\"');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18185]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    o->write_character('\\\"');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18185]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"\\\":\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    dump(i->second, false, ensure_ascii, indent_step, current_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18188]}],"prevLine":"                    dump_escaped(i->first, ensure_ascii);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"[]\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18201]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"[\\n\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18207]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                        o->write_characters(\",\\n\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18222]}],"prevLine":"                        dump(*i, true, ensure_ascii, indent_step, new_indent);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18226]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18226]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    dump(val.m_data.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18247]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    dump(val.m_data.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18247]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"{\\n\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18268]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"\\\"bytes\\\": [\", 10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18279]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                            o->write_characters(\", \", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18287]}],"prevLine":"                            dump_integer(*i);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"],\\n\", 3);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18292]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"\\\"subtype\\\": \", 11);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    if (val.m_data.m_value.binary->has_subtype())","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18295]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                        o->write_characters(\"null\", 4);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18302]}],"prevLine":"                    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"{\\\"bytes\\\":[\", 10);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18310]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"],\\\"subtype\\\":\", 12);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    if (val.m_data.m_value.binary->has_subtype())","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18323]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                        o->write_characters(\"null}\", 5);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18331]}],"prevLine":"                    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"true\", 4);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18341]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    o->write_characters(\"false\", 5);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18345]}],"prevLine":"                {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                o->write_characters(\"<discarded>\", 11);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18370]}],"prevLine":"            {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                o->write_characters(\"null\", 4);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18376]}],"prevLine":"            {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18381]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18381]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 7, \"\\\\u%04x\",","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the third function argument.","nextLine":"                                                                      static_cast<std::uint16_t>(codepoint)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18478]}],"prevLine":"                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 13, \"\\\\u%04x\\\\u%04x\",","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the third function argument.","nextLine":"                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18485]}],"prevLine":"                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18580]}],"prevLine":"                        default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18580]}],"prevLine":"                        default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                        o->write_characters(\"\\\\ufffd\", 6);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18631]}],"prevLine":"                    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                        o->write_characters(\"\\xEF\\xBF\\xBD\", 3);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18635]}],"prevLine":"                    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18641]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18641]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(n_chars < number_buffer.size() - 1);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18770]}],"prevLine":"        // spare 1 byte for '\\0'","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(n_chars < number_buffer.size() - 1);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18770]}],"prevLine":"        // spare 1 byte for '\\0'","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            o->write_characters(\"null\", 4);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18813]}],"prevLine":"        {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        std::ptrdiff_t len = (std::snprintf)(number_buffer.data(), number_buffer.size(), \"%.*g\", d, x);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the third function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18844]}],"prevLine":"        // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(len > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        // check if buffer was large enough","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18847]}],"prevLine":"        // negative value indicates an error","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(len > 0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        // check if buffer was large enough","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18847]}],"prevLine":"        // negative value indicates an error","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(static_cast<std::size_t>(len) < number_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18849]}],"prevLine":"        // check if buffer was large enough","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(static_cast<std::size_t>(len) < number_buffer.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18849]}],"prevLine":"        // check if buffer was large enough","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT((end - number_buffer.begin()) <= len);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            len = (end - number_buffer.begin());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18857]}],"prevLine":"            std::fill(end, number_buffer.end(), '\\0');","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT((end - number_buffer.begin()) <= len);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            len = (end - number_buffer.begin());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18857]}],"prevLine":"            std::fill(end, number_buffer.end(), '\\0');","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            o->write_characters(\".0\", 2);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18884]}],"prevLine":"        {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(byte < utf8d.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        const std::uint8_t type = utf8d[byte];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18931]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(byte < utf8d.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        const std::uint8_t type = utf8d[byte];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18931]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(index < utf8d.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        state = utf8d[index];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18941]}],"prevLine":"        const std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(index < utf8d.size());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        state = utf8d[index];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18941]}],"prevLine":"        const std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        return x; // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18953]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        return x; // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18953]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(x < 0 && x < (std::numeric_limits<number_integer_t>::max)()); // NOLINT(misc-redundant-expression)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        return static_cast<number_unsigned_t>(-(x + 1)) + 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18968]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(x < 0 && x < (std::numeric_limits<number_integer_t>::max)()); // NOLINT(misc-redundant-expression)","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        return static_cast<number_unsigned_t>(-(x + 1)) + 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18968]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_THROW(std::out_of_range(\"key not found\"));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19123]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_THROW(std::out_of_range(\"key not found\"));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19138]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_THROW(std::out_of_range(\"key not found\"));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19151]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_THROW(std::out_of_range(\"key not found\"));","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19166]}],"sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(obj != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        return obj.release();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19694]}],"prevLine":"        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(obj != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        return obj.release();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19694]}],"prevLine":"        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19989]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19989]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19990]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19990]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19991]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19991]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19992]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19992]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20198]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20198]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_data.m_type == val.type());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        set_parents();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20200]}],"prevLine":"        }","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_data.m_type == val.type());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        set_parents();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20200]}],"prevLine":"        }","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(first.m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"        JSON_ASSERT(last.m_object != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20339]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(first.m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"        JSON_ASSERT(last.m_object != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20339]}],"prevLine":"    {","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(last.m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20340]}],"prevLine":"        JSON_ASSERT(first.m_object != nullptr);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(last.m_object != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20340]}],"prevLine":"        JSON_ASSERT(first.m_object != nullptr);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21452]}],"prevLine":"            auto it = m_data.m_value.object->find(key);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21452]}],"prevLine":"            auto it = m_data.m_value.object->find(key);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21507]}],"prevLine":"            auto it = m_data.m_value.object->find(std::forward<KeyType>(key));","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21507]}],"prevLine":"            auto it = m_data.m_value.object->find(std::forward<KeyType>(key));","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_data.m_value.array != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22574]}],"prevLine":"        iterator result(this);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"        JSON_ASSERT(m_data.m_value.array != nullptr);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22574]}],"prevLine":"        iterator result(this);","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24104]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24104]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3554","currLine":"        return std::fgetc(m_file);","falseAlarm":false,"level":1,"message":"The function with the 'fgetc' name should not be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6209]}],"prevLine":"    {","sastId":"AUTOSAR-M27-0-1"}
{"code":"V3554","currLine":"                static_cast<void>((std::snprintf)(cs.data(), cs.size(), \"<U+%.4X>\", static_cast<unsigned char>(c))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","falseAlarm":false,"level":1,"message":"The function with the 'snprintf' name should not be used.","nextLine":"                result += cs.data();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8831]}],"prevLine":"                std::array<char, 9> cs{{}};","sastId":"AUTOSAR-M27-0-1"}
{"code":"V3554","currLine":"                static_cast<void>((std::snprintf)(cr.data(), cr.size(), \"%.2hhX\", static_cast<unsigned char>(element_type))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","falseAlarm":false,"level":1,"message":"The function with the 'snprintf' name should not be used.","nextLine":"                const std::string cr_str{cr.data()};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9477]}],"prevLine":"                std::array<char, 3> cr{{}};","sastId":"AUTOSAR-M27-0-1"}
{"code":"V3554","currLine":"        static_cast<void>((std::snprintf)(cr.data(), cr.size(), \"%.2hhX\", static_cast<unsigned char>(current))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","falseAlarm":false,"level":1,"message":"The function with the 'snprintf' name should not be used.","nextLine":"        return std::string{cr.data()};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12049]}],"prevLine":"        std::array<char, 3> cr{{}};","sastId":"AUTOSAR-M27-0-1"}
{"code":"V3554","currLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 7, \"\\\\u%04x\",","falseAlarm":false,"level":1,"message":"The function with the 'snprintf' name should not be used.","nextLine":"                                                                      static_cast<std::uint16_t>(codepoint)));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18478]}],"prevLine":"                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"AUTOSAR-M27-0-1"}
{"code":"V3554","currLine":"                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 13, \"\\\\u%04x\\\\u%04x\",","falseAlarm":false,"level":1,"message":"The function with the 'snprintf' name should not be used.","nextLine":"                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18485]}],"prevLine":"                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"AUTOSAR-M27-0-1"}
{"code":"V3554","currLine":"        std::ptrdiff_t len = (std::snprintf)(number_buffer.data(), number_buffer.size(), \"%.*g\", d, x);","falseAlarm":false,"level":1,"message":"The function with the 'snprintf' name should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18844]}],"prevLine":"        // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)","sastId":"AUTOSAR-M27-0-1"}
{"code":"V3554","currLine":"            const auto end = std::remove(number_buffer.begin(), number_buffer.begin() + len, thousands_sep);","falseAlarm":false,"level":1,"message":"The function with the 'remove' name should not be used.","nextLine":"            std::fill(end, number_buffer.end(), '\\0');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18855]}],"prevLine":"            // NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto): std::remove returns an iterator, see https://github.com/nlohmann/json/issues/3081","sastId":"AUTOSAR-M27-0-1"}
{"code":"V102","currLine":"        buffer_ptr += n_chars;","falseAlarm":false,"level":2,"message":"Usage of non memsize type for pointer arithmetic.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18774]}],"prevLine":"        // so we later avoid reversing the result"}
{"code":"V104","currLine":"    seed ^= h + 0x9e3779b9 + (seed << 6U) + (seed >> 2U);","falseAlarm":false,"level":2,"message":"Implicit conversion of '0x9e3779b9' to memsize type in an arithmetic expression: h + 0x9e3779b9","nextLine":"    return seed;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6007]}],"prevLine":"{"}
{"code":"V104","currLine":"        std::memset(buf + k, '0', static_cast<size_t>(n) - static_cast<size_t>(k));","falseAlarm":false,"level":2,"message":"Implicit conversion of 'k' to memsize type in an arithmetic expression: buf + k","nextLine":"        // Make it look like a floating-point number (#362, #378)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17906]}]}
{"code":"V104","currLine":"        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));","falseAlarm":false,"level":2,"message":"Implicit conversion of 'n' to memsize type in an arithmetic expression: buf + n","nextLine":"        buf[n] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17920]}]}
{"code":"V104","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":2,"message":"Implicit type conversion to memsize type in an arithmetic expression.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18001]}]}
{"code":"V104","currLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","falseAlarm":false,"level":2,"message":"Implicit conversion of 'kMaxExp + 2' to memsize type in an arithmetic expression: last - first >= kMaxExp + 2","nextLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18018]}]}
{"code":"V104","currLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":2,"message":"Implicit type conversion to memsize type in an arithmetic expression.","nextLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18019]}],"prevLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);"}
{"code":"V104","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","falseAlarm":false,"level":2,"message":"Implicit type conversion to memsize type in an arithmetic expression.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18020]}],"prevLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);"}
{"code":"V104","currLine":"        JSON_ASSERT(n_chars < number_buffer.size() - 1);","falseAlarm":false,"level":2,"message":"Implicit conversion of 'n_chars' to memsize type in an arithmetic expression: n_chars < number_buffer.size() - 1","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18770]}],"prevLine":"        // spare 1 byte for '\\0'"}
{"code":"V106","currLine":"                        o->write_characters(indent_string.c_str(), new_indent);","falseAlarm":false,"level":2,"message":"Implicit type conversion second argument 'new_indent' of function 'write_characters' to memsize type.","nextLine":"                        o->write_character('\\\"');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18147]}],"prevLine":"                    {"}
{"code":"V106","currLine":"                    o->write_characters(indent_string.c_str(), new_indent);","falseAlarm":false,"level":2,"message":"Implicit type conversion second argument 'new_indent' of function 'write_characters' to memsize type.","nextLine":"                    o->write_character('\\\"');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18158]}],"prevLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());"}
{"code":"V106","currLine":"                    o->write_characters(indent_string.c_str(), current_indent);","falseAlarm":false,"level":2,"message":"Implicit type conversion second argument 'current_indent' of function 'write_characters' to memsize type.","nextLine":"                    o->write_character('}');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18165]}],"prevLine":"                    o->write_character('\\n');"}
{"code":"V106","currLine":"                        o->write_characters(indent_string.c_str(), new_indent);","falseAlarm":false,"level":2,"message":"Implicit type conversion second argument 'new_indent' of function 'write_characters' to memsize type.","nextLine":"                        dump(*i, true, ensure_ascii, indent_step, new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18220]}],"prevLine":"                    {"}
{"code":"V106","currLine":"                    o->write_characters(indent_string.c_str(), new_indent);","falseAlarm":false,"level":2,"message":"Implicit type conversion second argument 'new_indent' of function 'write_characters' to memsize type.","nextLine":"                    dump(val.m_data.m_value.array->back(), true, ensure_ascii, indent_step, new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18227]}],"prevLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());"}
{"code":"V106","currLine":"                    o->write_characters(indent_string.c_str(), current_indent);","falseAlarm":false,"level":2,"message":"Implicit type conversion second argument 'current_indent' of function 'write_characters' to memsize type.","nextLine":"                    o->write_character(']');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18231]}],"prevLine":"                    o->write_character('\\n');"}
{"code":"V106","currLine":"                    o->write_characters(indent_string.c_str(), new_indent);","falseAlarm":false,"level":2,"message":"Implicit type conversion second argument 'new_indent' of function 'write_characters' to memsize type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18277]}]}
{"code":"V106","currLine":"                    o->write_characters(indent_string.c_str(), new_indent);","falseAlarm":false,"level":2,"message":"Implicit type conversion second argument 'new_indent' of function 'write_characters' to memsize type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18293]}],"prevLine":"                    o->write_characters(\"],\\n\", 3);"}
{"code":"V106","currLine":"                    o->write_characters(indent_string.c_str(), current_indent);","falseAlarm":false,"level":2,"message":"Implicit type conversion second argument 'current_indent' of function 'write_characters' to memsize type.","nextLine":"                    o->write_character('}');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18305]}],"prevLine":"                    o->write_character('\\n');"}
{"code":"V106","currLine":"        o->write_characters(number_buffer.data(), n_chars);","falseAlarm":false,"level":2,"message":"Implicit type conversion second argument 'n_chars' of function 'write_characters' to memsize type.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18797]}]}
{"code":"V108","currLine":"        JSON_ASSERT(buf[len - 1] != '0');","falseAlarm":false,"level":2,"message":"Incorrect index type: buf[not a memsize-type]. Use memsize type instead.","nextLine":"        buf[len - 1]--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17485]}],"prevLine":"    {"}
{"code":"V108","currLine":"        buf[len - 1]--;","falseAlarm":false,"level":2,"message":"Incorrect index type: buf[not a memsize-type]. Use memsize type instead.","nextLine":"        rest += ten_k;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17486]}],"prevLine":"        JSON_ASSERT(buf[len - 1] != '0');"}
{"code":"V108","currLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","falseAlarm":false,"level":2,"message":"Incorrect index type: buffer[not a memsize-type]. Use memsize type instead.","nextLine":"        //","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17572]}],"prevLine":"        JSON_ASSERT(d <= 9);"}
{"code":"V108","currLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","falseAlarm":false,"level":2,"message":"Incorrect index type: buffer[not a memsize-type]. Use memsize type instead.","nextLine":"        //","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17679]}],"prevLine":"        JSON_ASSERT(d <= 9);"}
{"code":"V108","currLine":"        buf[n + 0] = '.';","falseAlarm":false,"level":2,"message":"Incorrect index type: buf[not a memsize-type]. Use memsize type instead.","nextLine":"        buf[n + 1] = '0';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17908]}],"prevLine":"        // Make it look like a floating-point number (#362, #378)"}
{"code":"V108","currLine":"        buf[n + 1] = '0';","falseAlarm":false,"level":2,"message":"Incorrect index type: buf[not a memsize-type]. Use memsize type instead.","nextLine":"        return buf + (static_cast<size_t>(n) + 2);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17909]}],"prevLine":"        buf[n + 0] = '.';"}
{"code":"V108","currLine":"        buf[n] = '.';","falseAlarm":false,"level":2,"message":"Incorrect index type: buf[not a memsize-type]. Use memsize type instead.","nextLine":"        return buf + (static_cast<size_t>(k) + 1U);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17921]}],"prevLine":"        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));"}
{"code":"V108","currLine":"            *(--buffer_ptr) = digits_to_99[digits_index][1];","falseAlarm":false,"level":2,"message":"Incorrect index type: digits_to_99[not a memsize-type]. Use memsize type instead.","nextLine":"            *(--buffer_ptr) = digits_to_99[digits_index][0];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18782]}],"prevLine":"            abs_value /= 100;"}
{"code":"V108","currLine":"            *(--buffer_ptr) = digits_to_99[digits_index][0];","falseAlarm":false,"level":2,"message":"Incorrect index type: digits_to_99[not a memsize-type]. Use memsize type instead.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18783]}],"prevLine":"            *(--buffer_ptr) = digits_to_99[digits_index][1];"}
{"code":"V108","currLine":"            *(--buffer_ptr) = digits_to_99[digits_index][1];","falseAlarm":false,"level":2,"message":"Incorrect index type: digits_to_99[not a memsize-type]. Use memsize type instead.","nextLine":"            *(--buffer_ptr) = digits_to_99[digits_index][0];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18789]}],"prevLine":"            const auto digits_index = static_cast<unsigned>(abs_value);"}
{"code":"V108","currLine":"            *(--buffer_ptr) = digits_to_99[digits_index][0];","falseAlarm":false,"level":2,"message":"Incorrect index type: digits_to_99[not a memsize-type]. Use memsize type instead.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18790]}],"prevLine":"            *(--buffer_ptr) = digits_to_99[digits_index][1];"}
{"code":"V112","currLine":"                utf8_bytes_filled = 4;","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: ...es_filled = 4;.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6364]}],"prevLine":"                utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));"}
{"code":"V112","currLine":"                    utf8_bytes_filled = 4;","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: ...es_filled = 4;.","nextLine":"                }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6426]}],"prevLine":"                    utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (charcode & 0x3Fu));"}
{"code":"V112","currLine":"        const auto factors = { 12u, 8u, 4u, 0u };","falseAlarm":false,"level":2,"message":"Dangerous magic number 4u used: ...{ 12u, 8u, 4u, 0u };.","nextLine":"        for (const auto factor : factors)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7548]}]}
{"code":"V112","currLine":"                return sax->number_integer(static_cast<std::int8_t>(0x20 - 1 - current));","falseAlarm":false,"level":2,"message":"Dangerous magic number 0x20 used: ...td::int8_t>(0x20 - 1 - curre...","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9650]}],"prevLine":"            case 0x37:"}
{"code":"V112","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":2,"message":"Dangerous magic number 32 used: ...xp&& exp <= 32);.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10005]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;"}
{"code":"V112","currLine":"                       get_binary(input_format_t::msgpack, 4, result) &&","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: ...t::msgpack, 4, result) &&.","nextLine":"                       assign_and_return_true(subtype);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10887]}],"prevLine":"                return get_number(input_format_t::msgpack, subtype) &&"}
{"code":"V112","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":2,"message":"Dangerous magic number 32 used: ...xp&& exp <= 32);.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11552]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;"}
{"code":"V112","currLine":"                        write_number(static_cast<std::uint8_t>(0x20 + positive_number));","falseAlarm":false,"level":2,"message":"Dangerous magic number 0x20 used: ...d::uint8_t>(0x20 + positive_...","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15186]}],"prevLine":"                    {"}
{"code":"V112","currLine":"        write_bson_entry_header(name, 0x04); // array","falseAlarm":false,"level":2,"message":"Dangerous magic number 0x04 used: ...eader(name, 0x04);.","nextLine":"        write_number<std::int32_t>(static_cast<std::int32_t>(calc_bson_array_size(value)), true);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16173]}],"prevLine":"    {"}
{"code":"V112","currLine":"        const std::uint64_t u_lo = x.f & 0xFFFFFFFFu;","falseAlarm":false,"level":2,"message":"Dangerous magic number 0xFFFFFFFFu used: ..._lo = x.f & 0xFFFFFFFFu;.","nextLine":"        const std::uint64_t u_hi = x.f >> 32u;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17017]}]}
{"code":"V112","currLine":"        const std::uint64_t u_hi = x.f >> 32u;","falseAlarm":false,"level":2,"message":"Dangerous magic number 32u used: ...hi = x.f >> 32u;.","nextLine":"        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17018]}],"prevLine":"        const std::uint64_t u_lo = x.f & 0xFFFFFFFFu;"}
{"code":"V112","currLine":"        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;","falseAlarm":false,"level":2,"message":"Dangerous magic number 0xFFFFFFFFu used: ..._lo = y.f & 0xFFFFFFFFu;.","nextLine":"        const std::uint64_t v_hi = y.f >> 32u;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17019]}],"prevLine":"        const std::uint64_t u_hi = x.f >> 32u;"}
{"code":"V112","currLine":"        const std::uint64_t v_hi = y.f >> 32u;","falseAlarm":false,"level":2,"message":"Dangerous magic number 32u used: ...hi = y.f >> 32u;.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17020]}],"prevLine":"        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;"}
{"code":"V112","currLine":"        const std::uint64_t p0_hi = p0 >> 32u;","falseAlarm":false,"level":2,"message":"Dangerous magic number 32u used: ..._hi = p0 >> 32u;.","nextLine":"        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17027]}]}
{"code":"V112","currLine":"        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;","falseAlarm":false,"level":2,"message":"Dangerous magic number 0xFFFFFFFFu used: ...1_lo = p1 & 0xFFFFFFFFu;.","nextLine":"        const std::uint64_t p1_hi = p1 >> 32u;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17028]}],"prevLine":"        const std::uint64_t p0_hi = p0 >> 32u;"}
{"code":"V112","currLine":"        const std::uint64_t p1_hi = p1 >> 32u;","falseAlarm":false,"level":2,"message":"Dangerous magic number 32u used: ..._hi = p1 >> 32u;.","nextLine":"        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17029]}],"prevLine":"        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;"}
{"code":"V112","currLine":"        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;","falseAlarm":false,"level":2,"message":"Dangerous magic number 0xFFFFFFFFu used: ...2_lo = p2 & 0xFFFFFFFFu;.","nextLine":"        const std::uint64_t p2_hi = p2 >> 32u;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17030]}],"prevLine":"        const std::uint64_t p1_hi = p1 >> 32u;"}
{"code":"V112","currLine":"        const std::uint64_t p2_hi = p2 >> 32u;","falseAlarm":false,"level":2,"message":"Dangerous magic number 32u used: ..._hi = p2 >> 32u;.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17031]}],"prevLine":"        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;"}
{"code":"V112","currLine":"        Q += std::uint64_t{1} << (64u - 32u - 1u); // round, ties up","falseAlarm":false,"level":2,"message":"Dangerous magic number 32u used: ...} << (64u - 32u - 1u);...","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17044]}]}
{"code":"V112","currLine":"        const std::uint64_t h = p3 + p2_hi + p1_hi + (Q >> 32u);","falseAlarm":false,"level":2,"message":"Dangerous magic number 32u used: ..._hi + (Q >> 32u);.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17046]}]}
{"code":"V112","currLine":"                          ? diyfp(4 * v.f - 1, v.e - 2)  // (B)","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: ? diyfp(4 * v.f - 1,...","nextLine":"                          : diyfp(2 * v.f - 1, v.e - 1); // (A)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17152]}],"prevLine":"    const diyfp m_minus = lower_boundary_is_closer"}
{"code":"V112","currLine":"constexpr int kGamma = -32;","falseAlarm":false,"level":2,"message":"Dangerous magic number 32 used: ...t kGamma = -32;.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17220]}],"prevLine":"constexpr int kAlpha = -60;"}
{"code":"V112","currLine":"        return  4;","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: return  4;.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17437]}],"prevLine":"        pow10 = 1000;"}
{"code":"V112","currLine":"    constexpr int kMinExp = -4;","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: ...kMinExp = -4;.","nextLine":"    // Use digits10 here to increase compatibility with version 2.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18014]}],"prevLine":"    // Format the buffer like printf(\"%.*g\", prec, value)"}
{"code":"V112","currLine":"                        o->write_characters(\"null\", 4);","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: ...ers(\"null\", 4);.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18302]}],"prevLine":"                    {"}
{"code":"V112","currLine":"                    o->write_characters(\"true\", 4);","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: ...ers(\"true\", 4);.","nextLine":"                }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18341]}],"prevLine":"                {"}
{"code":"V112","currLine":"                o->write_characters(\"null\", 4);","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: ...ers(\"null\", 4);.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18376]}],"prevLine":"            {"}
{"code":"V112","currLine":"            n_digits += 4;","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: n_digits += 4;.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18677]}],"prevLine":"            x = x / 10000u;"}
{"code":"V112","currLine":"            o->write_characters(\"null\", 4);","falseAlarm":false,"level":2,"message":"Dangerous magic number 4 used: ...ers(\"null\", 4);.","nextLine":"            return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18813]}],"prevLine":"        {"}
{"code":"V807","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":2,"message":"Decreased performance. Consider creating a pointer to avoid using the 'ref_stack.back()' expression repeatedly.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6956,6958,6960,6961]}]}
{"code":"V807","currLine":"        if (!ref_stack.empty() && ref_stack.back() && ref_stack.back()->is_structured())","falseAlarm":false,"level":2,"message":"Decreased performance. Consider creating a pointer to avoid using the 'ref_stack.back()' expression repeatedly.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7106,7109,7113]}]}
{"code":"V807","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":2,"message":"Decreased performance. Consider creating a pointer to avoid using the 'ref_stack.back()' expression repeatedly.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7243,7246,7248,7249]}],"prevLine":"        // we now only expect arrays and objects"}
{"code":"V831","currLine":"                if (dim.size() == 1 || (dim.size() == 2 && dim.at(0) == 1)) // return normal array size if 1D row vector","falseAlarm":false,"level":2,"message":"Decreased performance. Consider replacing the call to the 'at()' method with the 'operator[]'.","nextLine":"                {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11308]}],"prevLine":"                }"}
{"code":"V833","currLine":"    external_constructor<value_t::array>::construct(j, std::move(arr));","falseAlarm":false,"level":2,"message":"Passing the const-qualified object 'arr' to the 'std::move' function disables move semantics.","nextLine":"}","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5734]}],"prevLine":"{"}
{"code":"V833","currLine":"                return sax->number_float(number_lexer.get_number_float(), std::move(number_string));","falseAlarm":false,"level":2,"message":"Passing the const-qualified object 'number_string' to the 'std::move' function disables move semantics.","nextLine":"            case token_type::uninitialized:","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11863]}],"prevLine":"            case token_type::value_float:"}
{"code":"V2017","currLine":"                            {\"op\", \"remove\"}, {\"path\", path_key}","falseAlarm":false,"level":2,"message":"String literal is identical to 'path' variable name. It is possible that the variable should be used instead of the string literal.","nextLine":"                        }));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24372,24286]}],"prevLine":"                        {"}
{"code":"V2017","currLine":"                            {\"op\", \"add\"}, {\"path\", path_key},","falseAlarm":false,"level":2,"message":"String literal is identical to 'path' variable name. It is possible that the variable should be used instead of the string literal.","nextLine":"                            {\"value\", it.value()}","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24386,24286]}],"prevLine":"                        {"}
{"code":"V122","currLine":"    std::size_t chars_read_total = 0;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    /// the number of characters read in the current line","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[3038]}],"prevLine":"    /// the total number of characters read"}
{"code":"V122","currLine":"    std::size_t chars_read_current_line = 0;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    /// the number of lines read","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[3040]}],"prevLine":"    /// the number of characters read in the current line"}
{"code":"V122","currLine":"    std::size_t lines_read = 0;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[3042]}],"prevLine":"    /// the number of lines read"}
{"code":"V122","currLine":"    const std::size_t byte;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4507]}],"prevLine":"    */"}
{"code":"V122","currLine":"    std::size_t array_index = 0;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    /// last stringified array index","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5199]}],"prevLine":"    /// an index for arrays (used to create key names)"}
{"code":"V122","currLine":"    mutable std::size_t array_index_last = 0;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    /// a string representation of the array index","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5201]}],"prevLine":"    /// last stringified array index"}
{"code":"V122","currLine":"    std::FILE* m_file;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6214]}],"prevLine":"    /// the file pointer to read from"}
{"code":"V122","currLine":"    std::istream* is = nullptr;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    std::streambuf* sb = nullptr;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6273]}],"prevLine":"    /// the associated input stream"}
{"code":"V122","currLine":"    std::streambuf* sb = nullptr;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6274]}],"prevLine":"    std::istream* is = nullptr;"}
{"code":"V122","currLine":"    std::size_t utf8_bytes_index = 0;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    /// number of valid bytes in the utf8_codes array","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6478]}],"prevLine":"    /// index to the utf8_codes array for the next valid byte"}
{"code":"V122","currLine":"    std::size_t utf8_bytes_filled = 0;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6480]}],"prevLine":"    /// number of valid bytes in the utf8_codes array"}
{"code":"V122","currLine":"    BasicJsonType* object_element = nullptr;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    /// whether a syntax error occurred","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6975]}],"prevLine":"    /// helper to hold the reference for the next object element"}
{"code":"V122","currLine":"    BasicJsonType* object_element = nullptr;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    /// whether a syntax error occurred","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7278]}],"prevLine":"    /// helper to hold the reference for the next object element"}
{"code":"V122","currLine":"    const char* error_message = \"\";","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8993]}],"prevLine":"    /// a description of occurred lexer errors"}
{"code":"V122","currLine":"    std::size_t chars_read = 0;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12105]}],"prevLine":"    /// the number of characters read"}
{"code":"V122","currLine":"    json_sax_t* sax = nullptr;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12114]}],"prevLine":"    /// the SAX parser"}
{"code":"V122","currLine":"    difference_type m_it = (std::numeric_limits<std::ptrdiff_t>::min)();","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12742]}],"prevLine":"    /// iterator as signed integer type"}
{"code":"V122","currLine":"    value_type const* value_ref = nullptr;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"};","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14872]}],"prevLine":"    mutable value_type owned_value = nullptr;"}
{"code":"V122","currLine":"    const std::lconv* loc = nullptr;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    /// the locale's thousand separator character","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18980]}],"prevLine":"    /// the locale"}
{"code":"V201","currLine":"                result = static_cast<std::size_t>(number);","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast< std::size_t > (number)","nextLine":"                return true;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11218]}],"prevLine":"                }"}
{"code":"V201","currLine":"        std::memset(buf + k, '0', static_cast<size_t>(n) - static_cast<size_t>(k));","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (k)","nextLine":"        // Make it look like a floating-point number (#362, #378)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17906]}]}
{"code":"V201","currLine":"        std::memset(buf + k, '0', static_cast<size_t>(n) - static_cast<size_t>(k));","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (n)","nextLine":"        // Make it look like a floating-point number (#362, #378)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17906]}]}
{"code":"V201","currLine":"        return buf + (static_cast<size_t>(n) + 2);","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (n)","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17910]}],"prevLine":"        buf[n + 1] = '0';"}
{"code":"V201","currLine":"        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (k)","nextLine":"        buf[n] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17920]}]}
{"code":"V201","currLine":"        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (n)","nextLine":"        buf[n] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17920]}]}
{"code":"V201","currLine":"        return buf + (static_cast<size_t>(k) + 1U);","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (k)","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17922]}],"prevLine":"        buf[n] = '.';"}
{"code":"V201","currLine":"        std::memmove(buf + (2 + static_cast<size_t>(-n)), buf, static_cast<size_t>(k));","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (- n)","nextLine":"        buf[0] = '0';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17930]}]}
{"code":"V201","currLine":"        std::memmove(buf + (2 + static_cast<size_t>(-n)), buf, static_cast<size_t>(k));","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (k)","nextLine":"        buf[0] = '0';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17930]}]}
{"code":"V201","currLine":"        std::memset(buf + 2, '0', static_cast<size_t>(-n));","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (- n)","nextLine":"        return buf + (2U + static_cast<size_t>(-n) + static_cast<size_t>(k));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17933]}],"prevLine":"        buf[1] = '.';"}
{"code":"V201","currLine":"        return buf + (2U + static_cast<size_t>(-n) + static_cast<size_t>(k));","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (- n)","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17934]}],"prevLine":"        std::memset(buf + 2, '0', static_cast<size_t>(-n));"}
{"code":"V201","currLine":"        return buf + (2U + static_cast<size_t>(-n) + static_cast<size_t>(k));","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (k)","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17934]}],"prevLine":"        std::memset(buf + 2, '0', static_cast<size_t>(-n));"}
{"code":"V201","currLine":"        std::memmove(buf + 2, buf + 1, static_cast<size_t>(k) - 1);","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (k)","nextLine":"        buf[1] = '.';","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17949]}]}
{"code":"V201","currLine":"        buf += 1 + static_cast<size_t>(k);","falseAlarm":false,"level":3,"message":"Explicit conversion from 32-bit integer type to memsize type: static_cast<size_t> (k)","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17951]}],"prevLine":"        buf[1] = '.';"}
{"code":"V202","currLine":"        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::object_start, discarded);","falseAlarm":false,"level":3,"message":"Explicit conversion from memsize type to 32-bit integer type: static_cast<int> (ref_stack.size())","nextLine":"        keep_stack.push_back(keep);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7054]}],"prevLine":"        // check callback for object start"}
{"code":"V202","currLine":"        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::key, k);","falseAlarm":false,"level":3,"message":"Explicit conversion from memsize type to 32-bit integer type: static_cast<int> (ref_stack.size())","nextLine":"        key_keep_stack.push_back(keep);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7074]}],"prevLine":"        // check callback for key"}
{"code":"V202","currLine":"            if (!callback(static_cast<int>(ref_stack.size()) - 1, parse_event_t::object_end, *ref_stack.back()))","falseAlarm":false,"level":3,"message":"Explicit conversion from memsize type to 32-bit integer type: static_cast<int> (ref_stack.size())","nextLine":"            {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7090]}],"prevLine":"        {"}
{"code":"V202","currLine":"        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::array_start, discarded);","falseAlarm":false,"level":3,"message":"Explicit conversion from memsize type to 32-bit integer type: static_cast<int> (ref_stack.size())","nextLine":"        keep_stack.push_back(keep);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7124]}],"prevLine":"    {"}
{"code":"V202","currLine":"            keep = callback(static_cast<int>(ref_stack.size()) - 1, parse_event_t::array_end, *ref_stack.back());","falseAlarm":false,"level":3,"message":"Explicit conversion from memsize type to 32-bit integer type: static_cast<int> (ref_stack.size())","nextLine":"            if (keep)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7145]}],"prevLine":"        {"}
{"code":"V202","currLine":"        const bool keep = skip_callback || callback(static_cast<int>(ref_stack.size()), parse_event_t::value, value);","falseAlarm":false,"level":3,"message":"Explicit conversion from memsize type to 32-bit integer type: static_cast<int> (ref_stack.size())","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7221]}],"prevLine":"        // check callback"}
{"code":"V202","currLine":"        write_number<std::int32_t>(static_cast<std::int32_t>(calc_bson_array_size(value)), true);","falseAlarm":false,"level":3,"message":"Explicit conversion from memsize type to 32-bit integer type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16174]}],"prevLine":"        write_bson_entry_header(name, 0x04); // array"}
{"code":"V202","currLine":"        write_number<std::int32_t>(static_cast<std::int32_t>(calc_bson_object_size(value)), true);","falseAlarm":false,"level":3,"message":"Explicit conversion from memsize type to 32-bit integer type.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16316]}],"prevLine":"    {"}
{"code":"V202","currLine":"        s.dump(j, pretty_print, false, static_cast<unsigned int>(indentation));","falseAlarm":false,"level":3,"message":"Explicit conversion from memsize type to 32-bit integer type: static_cast<unsigned int> (indentation)","nextLine":"        return o;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[23291]}],"prevLine":"        serializer s(detail::output_adapter<char>(o), o.fill());"}
{"code":"V206","currLine":"    return *reinterpret_cast<char*>(&num) == 1;","falseAlarm":false,"level":3,"message":"Explicit conversion from 'int *' to 'char *'.","nextLine":"}","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9201]}],"prevLine":"{"}
{"code":"V522","currLine":"                    stack.reserve(array->size());","cwe":690,"falseAlarm":false,"level":3,"message":"There might be dereferencing of a potential null pointer 'array'.","nextLine":"                    std::move(array->begin(), array->end(), std::back_inserter(stack));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19879]}],"prevLine":"                {","sastId":"CERT-MEM52-CPP"}
{"code":"V522","currLine":"                    stack.reserve(object->size());","cwe":690,"falseAlarm":false,"level":3,"message":"There might be dereferencing of a potential null pointer 'object'.","nextLine":"                    for (auto&& it : *object)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19884]}],"prevLine":"                {","sastId":"CERT-MEM52-CPP"}
{"code":"V547","currLine":"                    JSON_ASSERT(mant <= 1024);","cwe":571,"falseAlarm":false,"level":3,"message":"Expression 'mant <= 1024' is always true.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10006]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);"}
{"code":"V547","currLine":"                    JSON_ASSERT(mant <= 1024);","cwe":571,"falseAlarm":false,"level":3,"message":"Expression 'mant <= 1024' is always true.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11553]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);"}
{"code":"V547","currLine":"        JSON_ASSERT(byte < utf8d.size());","cwe":571,"falseAlarm":false,"level":3,"message":"Expression 'byte < utf8d.size()' is always true. The value range of unsigned char type: [0, 255].","nextLine":"        const std::uint8_t type = utf8d[byte];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18931]}]}
{"code":"V550","currLine":"                static_cast<double>(static_cast<float>(n)) == static_cast<double>(n))","cwe":682,"falseAlarm":false,"level":3,"message":"An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon.","nextLine":"        {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16809]}],"prevLine":"                static_cast<double>(n) <= static_cast<double>((std::numeric_limits<float>::max)()) &&","sastId":"CERT-FLP02-C"}
{"code":"V553","currLine":"class binary_reader","falseAlarm":false,"level":3,"message":"The length of 'binary_reader' class's declaration is more than 2000 lines long. You should consider refactoring the code.","nextLine":"{","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9212]}],"prevLine":"template<typename BasicJsonType, typename InputAdapterType, typename SAX = json_sax_dom_parser<BasicJsonType>>"}
{"code":"V553","currLine":"class basic_json // NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)","falseAlarm":false,"level":3,"message":"The length of 'basic_json' class's declaration is more than 2000 lines long. You should consider refactoring the code.","nextLine":"    : public ::nlohmann::detail::json_base_class<CustomBaseClass>","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19402]}],"prevLine":"NLOHMANN_BASIC_JSON_TPL_DECLARATION"}
{"code":"V565","currLine":"                    {","cwe":544,"falseAlarm":false,"level":3,"message":"An empty exception handler. Silent suppression of exceptions can hide the presence of bugs in source code during testing.","nextLine":"                        // ignore out of range errors: success remains false","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24249]}],"prevLine":"                    JSON_INTERNAL_CATCH (out_of_range&)","sastId":"CERT-ERR56-CPP"}
{"code":"V659","currLine":"    const T& operator[](const key_type& key) const","falseAlarm":false,"level":3,"message":"Declarations of functions with 'operator []' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 19089, 19101.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19101,19089]}]}
{"code":"V659","currLine":"    const_reference at(size_type idx) const","falseAlarm":false,"level":3,"message":"Declarations of functions with 'at' name differ in the 'const' keyword only, but the bodies of these functions have different composition. This is suspicious and can possibly be an error. Check lines: 21243, 21266.","nextLine":"    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21266,21243]}],"prevLine":"    /// @sa https://json.nlohmann.me/api/basic_json/at/"}
{"code":"V690","currLine":"class basic_json // NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)","falseAlarm":false,"level":3,"message":"The 'basic_json' class implements a move constructor, but lacks the move assignment operator. It is dangerous to use such a class.","nextLine":"    : public ::nlohmann::detail::json_base_class<CustomBaseClass>","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19402]}],"prevLine":"NLOHMANN_BASIC_JSON_TPL_DECLARATION"}
{"code":"V807","currLine":"            auto seed = combine(type, j.get_binary().size());","falseAlarm":false,"level":3,"message":"Decreased performance. Consider creating a reference to avoid using the 'j.get_binary()' expression repeatedly.","nextLine":"            const auto h = std::hash<bool> {}(j.get_binary().has_subtype());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6093,6094,6096]}],"prevLine":"        {"}
{"code":"V826","currLine":"inline void from_json(const BasicJsonType& j, std::forward_list<T, Allocator>& l)","falseAlarm":false,"level":3,"message":"Consider replacing the 'l' std::forward_list with std::vector. Contiguous placement of elements in memory can be more efficient.","nextLine":"{","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[4779]}],"prevLine":"         enable_if_t<is_getable<BasicJsonType, T>::value, int> = 0>"}
{"code":"V1003","currLine":"    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 10000000) + (minor * 100000) + (patch)))","falseAlarm":false,"level":3,"message":"The macro 'JSON_HEDLEY_MSVC_VERSION_CHECK' is a dangerous expression. The parameters 'major', 'minor' must be surrounded by parentheses.","nextLine":"#elif defined(_MSC_VER) && (_MSC_VER >= 1200)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[425]}],"prevLine":"#elif defined(_MSC_VER) && (_MSC_VER >= 1400)"}
{"code":"V1003","currLine":"    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 1000000) + (minor * 10000) + (patch)))","falseAlarm":false,"level":3,"message":"The macro 'JSON_HEDLEY_MSVC_VERSION_CHECK' is a dangerous expression. The parameters 'major', 'minor' must be surrounded by parentheses.","nextLine":"#else","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[427]}],"prevLine":"#elif defined(_MSC_VER) && (_MSC_VER >= 1200)"}
{"code":"V1003","currLine":"    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_VER >= ((major * 100) + (minor)))","falseAlarm":false,"level":3,"message":"The macro 'JSON_HEDLEY_MSVC_VERSION_CHECK' is a dangerous expression. The parameter 'major' must be surrounded by parentheses.","nextLine":"#endif","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[429]}],"prevLine":"#else"}
{"code":"V2005","currLine":"        j.m_data.m_value = typename BasicJsonType::binary_t(b);","falseAlarm":false,"level":3,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"        j.assert_invariant();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5475]}],"prevLine":"        j.m_data.m_type = value_t::binary;"}
{"code":"V2005","currLine":"        j.m_data.m_value = typename BasicJsonType::binary_t(std::move(b));","falseAlarm":false,"level":3,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"        j.assert_invariant();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5484]}],"prevLine":"        j.m_data.m_type = value_t::binary;"}
{"code":"V2005","currLine":"            root = BasicJsonType(std::forward<Value>(v));","falseAlarm":false,"level":3,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"            return &root;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6952]}],"prevLine":"        {"}
{"code":"V2005","currLine":"        *object_element = BasicJsonType(std::forward<Value>(v));","falseAlarm":false,"level":3,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"        return object_element;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6966]}],"prevLine":"        JSON_ASSERT(object_element);"}
{"code":"V2005","currLine":"        BasicJsonType k = BasicJsonType(val);","falseAlarm":false,"level":3,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7071]}],"prevLine":"    {"}
{"code":"V2005","currLine":"        auto value = BasicJsonType(std::forward<Value>(v));","falseAlarm":false,"level":3,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7218]}],"prevLine":"        // create value"}
{"code":"V2005","currLine":"            const auto number = BasicJsonType(n).dump();","falseAlarm":false,"level":3,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"            write_number_with_ubjson_prefix(number.size(), true, use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16450]}]}
{"code":"V2005","currLine":"            const auto number = BasicJsonType(n).dump();","falseAlarm":false,"level":3,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"            write_number_with_ubjson_prefix(number.size(), true, use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16531]}]}
{"code":"V2005","currLine":"        return operator[](typename object_t::key_type(key));","falseAlarm":false,"level":3,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21464]}],"prevLine":"    {"}
{"code":"V2005","currLine":"        return operator[](typename object_t::key_type(key));","falseAlarm":false,"level":3,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21470]}],"prevLine":"    {"}
{"code":"V2006","currLine":"            is->clear(is->rdstate() & std::ios::eofbit);","falseAlarm":false,"level":3,"message":"Implicit type conversion from enum type to integer type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6237]}],"prevLine":"        {"}
{"code":"V2006","currLine":"            is->clear(is->rdstate() | std::ios::eofbit);","falseAlarm":false,"level":3,"message":"Implicit type conversion from enum type to integer type.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6266]}],"prevLine":"        {"}
{"code":"V2007","currLine":"    static constexpr difference_type end_value = begin_value + 1;","falseAlarm":false,"level":3,"message":"The 'begin_value + 1' expression can be simplified. One of the operands in the '+' operation equals 0. Probably it is a mistake.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12738]}],"prevLine":"    static constexpr difference_type begin_value = 0;"}
{"code":"V2528","currLine":"    JSON_ASSERT(!f.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    for (auto pos = s.find(f);                // find first occurrence of f","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[2974]}],"prevLine":"{","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"            s.replace(pos, f.size(), t),      // replace with t, and","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            pos = s.find(f, pos + t.size()))  // find next occurrence of f","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[2977]}],"prevLine":"            pos != StringType::npos;          // make sure f was found","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(anchor.m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5265]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            return 0;              // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6105]}],"prevLine":"        default:                   // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_file != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6197]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            JSON_ASSERT(utf8_bytes_index == 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6455]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"            JSON_ASSERT(utf8_bytes_index == 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6456]}],"prevLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6460]}],"prevLine":"        // use buffer","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        return utf8_bytes[utf8_bytes_index++];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6461]}],"prevLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6881]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6882]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6891]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6892]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_array());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6913]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(ref_stack.back()->is_array());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6914]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6956]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(object_element);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6964]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        *object_element = BasicJsonType(std::forward<Value>(v));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6965]}],"prevLine":"        JSON_ASSERT(ref_stack.back()->is_object());","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7101]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7102]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7157]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7158]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7208]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7243]}],"prevLine":"        // we now only expect arrays and objects","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        // check if we should store an element for the current key","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7253]}],"prevLine":"        // object","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(!key_keep_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        const bool store_element = key_keep_stack.back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7255]}],"prevLine":"        // check if we should store an element for the current key","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        *object_element = std::move(value);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7264]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(loc != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7519]}],"prevLine":"        const auto* loc = localeconv();","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(current == 'u');","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        int codepoint = 0;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7545]}],"prevLine":"        // this function only makes sense after reading `\\u`","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(0x0000 <= codepoint && codepoint <= 0xFFFF);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        return codepoint;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7571]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        add(current);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7592]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(current == '\\\"');","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7633]}],"prevLine":"        // we entered the function by reading an open quote","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                            JSON_ASSERT(0x00 <= codepoint && codepoint <= 0x10FFFF);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7753]}],"prevLine":"                            // result of the above calculation yields a proper codepoint","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8382]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8629]}],"prevLine":"            // we checked the number format before","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8645]}],"prevLine":"            // we checked the number format before","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8662]}],"prevLine":"        // we checked the number format before","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(char_traits<char_type>::to_char_type(current) == literal_text[0]);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        for (std::size_t i = 1; i < length; ++i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8676]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"            JSON_ASSERT(!token_string.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            token_string.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8768]}],"prevLine":"        {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9279]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                        return false;        // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9962]}],"prevLine":"                    default:                 // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10005]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10006]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11552]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11553]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12089]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(!states.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12575]}],"prevLine":"                    // are effectively jumping to the beginning of this if.","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(!states.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12629]}],"prevLine":"                // are effectively jumping to the beginning of this if.","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12971]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13068]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13112]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13151]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                return m_it.object_iterator->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13157]}],"prevLine":"            {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                return *m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13163]}],"prevLine":"            {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13195]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                return &(m_it.object_iterator->second);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13201]}],"prevLine":"            {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                return &*m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13207]}],"prevLine":"            {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13248]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13299]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13346]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13391]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13447]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13526]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13555]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13593]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"            start = (slash == string_t::npos) ? 0 : slash + 1,","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            // find next slash","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14500]}],"prevLine":"            // (will eventually be 0 if slash == string_t::npos)","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(reference_token[pos] == '~');","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14513]}],"prevLine":"            {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(oa);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15093]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15846]}],"prevLine":"                {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    oa->write_character(to_char_type('$'));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15892]}],"prevLine":"                {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15944]}],"prevLine":"                {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                return 0ul;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16240]}],"prevLine":"            default:","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16287]}],"prevLine":"            default:","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(x.e == y.e);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(x.f >= y.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16980]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(x.f >= y.f);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16981]}],"prevLine":"        JSON_ASSERT(x.e == y.e);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(x.f != 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17057]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(delta >= 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17076]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17077]}],"prevLine":"        JSON_ASSERT(delta >= 0);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17099]}],"prevLine":"{","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17100]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(e >= -1500);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(e <=  1500);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17380]}],"prevLine":"    // NB: log_10(2) ~= 78913 / 2^18","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(e <=  1500);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    const int f = kAlpha - e - 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17381]}],"prevLine":"    JSON_ASSERT(e >= -1500);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(index >= 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17386]}],"prevLine":"    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17387]}],"prevLine":"    JSON_ASSERT(index >= 0);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17390]}],"prevLine":"    const cached_power cached = kCachedPowers[static_cast<std::size_t>(index)];","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17391]}],"prevLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(len >= 1);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(dist <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17457]}],"prevLine":"{","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(dist <= delta);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(rest <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17458]}],"prevLine":"    JSON_ASSERT(len >= 1);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(rest <= delta);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(ten_k > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17459]}],"prevLine":"    JSON_ASSERT(dist <= delta);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(ten_k > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17460]}],"prevLine":"    JSON_ASSERT(rest <= delta);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(buf[len - 1] != '0');","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        buf[len - 1]--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17485]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(M_plus.e <= kGamma);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17513]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(M_plus.e <= kGamma);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17514]}],"prevLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(p1 > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17535]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17571]}],"prevLine":"        //","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(p2 > delta);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17658]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        p2 *= 10;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17669]}],"prevLine":"        //","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17678]}],"prevLine":"        //","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(m_plus.e == v.e);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17739]}],"prevLine":"{","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(m_plus.e == v.e);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17740]}],"prevLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17801]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17802]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(e > -1000);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(e <  1000);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17838]}],"prevLine":"{","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(e <  1000);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17839]}],"prevLine":"    JSON_ASSERT(e > -1000);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(min_exp < 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(max_exp > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17891]}],"prevLine":"{","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(max_exp > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17892]}],"prevLine":"    JSON_ASSERT(min_exp < 0);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(k > n);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17918]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17976]}],"prevLine":"    static_cast<void>(last); // maybe unused - fix warning","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18001]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(len <= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18011]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18018]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18019]}],"prevLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18020]}],"prevLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    for (std::size_t cnt = 0; cnt < val.m_data.m_value.object->size() - 1; ++cnt, ++i)","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18145]}],"prevLine":"                    auto i = val.m_data.m_value.object->cbegin();","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18156]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18157]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    for (std::size_t cnt = 0; cnt < val.m_data.m_value.object->size() - 1; ++cnt, ++i)","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18174]}],"prevLine":"                    auto i = val.m_data.m_value.object->cbegin();","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18184]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    o->write_character('\\\"');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18185]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18226]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    dump(val.m_data.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18247]}],"prevLine":"                    // last element","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18381]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18580]}],"prevLine":"                        default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18641]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(n_chars < number_buffer.size() - 1);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18770]}],"prevLine":"        // spare 1 byte for '\\0'","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(len > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        // check if buffer was large enough","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18847]}],"prevLine":"        // negative value indicates an error","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(static_cast<std::size_t>(len) < number_buffer.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18849]}],"prevLine":"        // check if buffer was large enough","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"            JSON_ASSERT((end - number_buffer.begin()) <= len);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            len = (end - number_buffer.begin());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18857]}],"prevLine":"            std::fill(end, number_buffer.end(), '\\0');","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(byte < utf8d.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        const std::uint8_t type = utf8d[byte];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18931]}],"sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(index < utf8d.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        state = utf8d[index];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18941]}],"prevLine":"        const std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        return x; // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18953]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(x < 0 && x < (std::numeric_limits<number_integer_t>::max)()); // NOLINT(misc-redundant-expression)","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        return static_cast<number_unsigned_t>(-(x + 1)) + 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18968]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(obj != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        return obj.release();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19694]}],"prevLine":"        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19989]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19990]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19991]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19992]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20198]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_data.m_type == val.type());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        set_parents();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20200]}],"prevLine":"        }","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(first.m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(last.m_object != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20339]}],"prevLine":"    {","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(last.m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20340]}],"prevLine":"        JSON_ASSERT(first.m_object != nullptr);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21452]}],"prevLine":"            auto it = m_data.m_value.object->find(key);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21507]}],"prevLine":"            auto it = m_data.m_value.object->find(std::forward<KeyType>(key));","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"        JSON_ASSERT(m_data.m_value.array != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22574]}],"prevLine":"        iterator result(this);","sastId":"MISRA-CPP-5-18-1"}
{"code":"V2528","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24104]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"MISRA-CPP-5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(!f.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    for (auto pos = s.find(f);                // find first occurrence of f","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[2974]}],"prevLine":"{","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"            s.replace(pos, f.size(), t),      // replace with t, and","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            pos = s.find(f, pos + t.size()))  // find next occurrence of f","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[2977]}],"prevLine":"            pos != StringType::npos;          // make sure f was found","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(anchor.m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[5265]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            return 0;              // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6105]}],"prevLine":"        default:                   // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_file != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6197]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            JSON_ASSERT(utf8_bytes_index == 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6455]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"            JSON_ASSERT(utf8_bytes_index == 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6456]}],"prevLine":"            JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6460]}],"prevLine":"        // use buffer","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        return utf8_bytes[utf8_bytes_index++];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6461]}],"prevLine":"        JSON_ASSERT(utf8_bytes_filled > 0);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6881]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6882]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_object());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6891]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6892]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(ref_stack.back()->is_array());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6913]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(ref_stack.back()->is_array());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6914]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6956]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(object_element);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6964]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        *object_element = BasicJsonType(std::forward<Value>(v));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[6965]}],"prevLine":"        JSON_ASSERT(ref_stack.back()->is_object());","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7101]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7102]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(!ref_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(!keep_stack.empty());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7157]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        ref_stack.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7158]}],"prevLine":"        JSON_ASSERT(!ref_stack.empty());","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(!keep_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7208]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7243]}],"prevLine":"        // we now only expect arrays and objects","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(ref_stack.back()->is_object());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        // check if we should store an element for the current key","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7253]}],"prevLine":"        // object","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(!key_keep_stack.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        const bool store_element = key_keep_stack.back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7255]}],"prevLine":"        // check if we should store an element for the current key","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(object_element);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        *object_element = std::move(value);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7264]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(loc != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7519]}],"prevLine":"        const auto* loc = localeconv();","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(current == 'u');","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        int codepoint = 0;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7545]}],"prevLine":"        // this function only makes sense after reading `\\u`","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(0x0000 <= codepoint && codepoint <= 0xFFFF);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        return codepoint;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7571]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        add(current);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7592]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(current == '\\\"');","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7633]}],"prevLine":"        // we entered the function by reading an open quote","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                            JSON_ASSERT(0x00 <= codepoint && codepoint <= 0x10FFFF);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[7753]}],"prevLine":"                            // result of the above calculation yields a proper codepoint","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8382]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8629]}],"prevLine":"            // we checked the number format before","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8645]}],"prevLine":"            // we checked the number format before","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8662]}],"prevLine":"        // we checked the number format before","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(char_traits<char_type>::to_char_type(current) == literal_text[0]);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        for (std::size_t i = 1; i < length; ++i)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8676]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"            JSON_ASSERT(!token_string.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            token_string.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[8768]}],"prevLine":"        {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9279]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                        return false;        // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[9962]}],"prevLine":"                    default:                 // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10005]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[10006]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    JSON_ASSERT(mant <= 1024);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11552]}],"prevLine":"                    const unsigned int mant = half & 0x3FFu;","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(mant <= 1024);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    switch (exp)","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[11553]}],"prevLine":"                    JSON_ASSERT(0 <= exp&& exp <= 32);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12089]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(!states.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12575]}],"prevLine":"                    // are effectively jumping to the beginning of this if.","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(!states.empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                states.pop_back();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12629]}],"prevLine":"                // are effectively jumping to the beginning of this if.","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[12971]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13068]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13112]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13151]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                return m_it.object_iterator->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13157]}],"prevLine":"            {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                return *m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13163]}],"prevLine":"            {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13195]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(m_it.object_iterator != m_object->m_data.m_value.object->end());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                return &(m_it.object_iterator->second);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13201]}],"prevLine":"            {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(m_it.array_iterator != m_object->m_data.m_value.array->end());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                return &*m_it.array_iterator;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13207]}],"prevLine":"            {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13248]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13299]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13346]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13391]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13447]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13526]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13555]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[13593]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"            start = (slash == string_t::npos) ? 0 : slash + 1,","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            // find next slash","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14500]}],"prevLine":"            // (will eventually be 0 if slash == string_t::npos)","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(reference_token[pos] == '~');","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[14513]}],"prevLine":"            {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(oa);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15093]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15846]}],"prevLine":"                {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    oa->write_character(to_char_type('$'));","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15892]}],"prevLine":"                {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(use_count);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[15944]}],"prevLine":"                {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                return 0ul;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16240]}],"prevLine":"            default:","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                return;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16287]}],"prevLine":"            default:","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(x.e == y.e);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(x.f >= y.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16980]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(x.f >= y.f);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[16981]}],"prevLine":"        JSON_ASSERT(x.e == y.e);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(x.f != 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17057]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(delta >= 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17076]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(((x.f << delta) >> delta) == x.f);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17077]}],"prevLine":"        JSON_ASSERT(delta >= 0);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17099]}],"prevLine":"{","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17100]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(e >= -1500);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(e <=  1500);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17380]}],"prevLine":"    // NB: log_10(2) ~= 78913 / 2^18","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(e <=  1500);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    const int f = kAlpha - e - 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17381]}],"prevLine":"    JSON_ASSERT(e >= -1500);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(index >= 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17386]}],"prevLine":"    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17387]}],"prevLine":"    JSON_ASSERT(index >= 0);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17390]}],"prevLine":"    const cached_power cached = kCachedPowers[static_cast<std::size_t>(index)];","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(kGamma >= cached.e + e + 64);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17391]}],"prevLine":"    JSON_ASSERT(kAlpha <= cached.e + e + 64);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(len >= 1);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(dist <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17457]}],"prevLine":"{","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(dist <= delta);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(rest <= delta);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17458]}],"prevLine":"    JSON_ASSERT(len >= 1);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(rest <= delta);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(ten_k > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17459]}],"prevLine":"    JSON_ASSERT(dist <= delta);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(ten_k > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17460]}],"prevLine":"    JSON_ASSERT(rest <= delta);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(buf[len - 1] != '0');","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        buf[len - 1]--;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17485]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(M_plus.e <= kGamma);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17513]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(M_plus.e <= kGamma);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17514]}],"prevLine":"    JSON_ASSERT(M_plus.e >= kAlpha);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(p1 > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17535]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17571]}],"prevLine":"        //","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(p2 > delta);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17658]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        p2 *= 10;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17669]}],"prevLine":"        //","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(d <= 9);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17678]}],"prevLine":"        //","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(m_plus.e == v.e);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17739]}],"prevLine":"{","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(m_plus.e == v.e);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17740]}],"prevLine":"    JSON_ASSERT(m_plus.e == m_minus.e);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(value > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17801]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(value > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17802]}],"prevLine":"    JSON_ASSERT(std::isfinite(value));","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(e > -1000);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(e <  1000);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17838]}],"prevLine":"{","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(e <  1000);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17839]}],"prevLine":"    JSON_ASSERT(e > -1000);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(min_exp < 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(max_exp > 0);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17891]}],"prevLine":"{","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(max_exp > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17892]}],"prevLine":"    JSON_ASSERT(min_exp < 0);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(k > n);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17918]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(std::isfinite(value));","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[17976]}],"prevLine":"    static_cast<void>(last); // maybe unused - fix warning","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18001]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(len <= std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18011]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18018]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18019]}],"prevLine":"    JSON_ASSERT(last - first >= kMaxExp + 2);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18020]}],"prevLine":"    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    for (std::size_t cnt = 0; cnt < val.m_data.m_value.object->size() - 1; ++cnt, ++i)","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18145]}],"prevLine":"                    auto i = val.m_data.m_value.object->cbegin();","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18156]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18157]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    for (std::size_t cnt = 0; cnt < val.m_data.m_value.object->size() - 1; ++cnt, ++i)","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    {","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18174]}],"prevLine":"                    auto i = val.m_data.m_value.object->cbegin();","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18184]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(std::next(i) == val.m_data.m_value.object->cend());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    o->write_character('\\\"');","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18185]}],"prevLine":"                    JSON_ASSERT(i != val.m_data.m_value.object->cend());","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    o->write_characters(indent_string.c_str(), new_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18226]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(!val.m_data.m_value.array->empty());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    dump(val.m_data.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18247]}],"prevLine":"                    // last element","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18381]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"                    }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18580]}],"prevLine":"                        default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18641]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(n_chars < number_buffer.size() - 1);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18770]}],"prevLine":"        // spare 1 byte for '\\0'","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(len > 0);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        // check if buffer was large enough","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18847]}],"prevLine":"        // negative value indicates an error","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(static_cast<std::size_t>(len) < number_buffer.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18849]}],"prevLine":"        // check if buffer was large enough","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"            JSON_ASSERT((end - number_buffer.begin()) <= len);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            len = (end - number_buffer.begin());","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18857]}],"prevLine":"            std::fill(end, number_buffer.end(), '\\0');","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(byte < utf8d.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        const std::uint8_t type = utf8d[byte];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18931]}],"sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(index < utf8d.size());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        state = utf8d[index];","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18941]}],"prevLine":"        const std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        return x; // LCOV_EXCL_LINE","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18953]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(x < 0 && x < (std::numeric_limits<number_integer_t>::max)()); // NOLINT(misc-redundant-expression)","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        return static_cast<number_unsigned_t>(-(x + 1)) + 1;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[18968]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(obj != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        return obj.release();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19694]}],"prevLine":"        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19989]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19990]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::object || m_data.m_value.object != nullptr);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19991]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::array || m_data.m_value.array != nullptr);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_data.m_type != value_t::binary || m_data.m_value.binary != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[19992]}],"prevLine":"        JSON_ASSERT(m_data.m_type != value_t::string || m_data.m_value.string != nullptr);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20198]}],"prevLine":"            default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_data.m_type == val.type());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        set_parents();","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20200]}],"prevLine":"        }","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(first.m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"        JSON_ASSERT(last.m_object != nullptr);","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20339]}],"prevLine":"    {","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(last.m_object != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[20340]}],"prevLine":"        JSON_ASSERT(first.m_object != nullptr);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21452]}],"prevLine":"            auto it = m_data.m_value.object->find(key);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"            JSON_ASSERT(it != m_data.m_value.object->end());","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            return it->second;","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[21507]}],"prevLine":"            auto it = m_data.m_value.object->find(std::forward<KeyType>(key));","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"        JSON_ASSERT(m_data.m_value.array != nullptr);","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[22574]}],"prevLine":"        iterator result(this);","sastId":"AUTOSAR-M5-18-1"}
{"code":"V3519","currLine":"                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE","falseAlarm":false,"level":3,"message":"The comma operator should not be used.","nextLine":"            }","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24104]}],"prevLine":"                default:            // LCOV_EXCL_LINE","sastId":"AUTOSAR-M5-18-1"}
{"code":"V5002","currLine":"                    {","cwe":544,"falseAlarm":false,"level":3,"message":"An empty exception handler. Silent suppression of exceptions can hide the presence of bugs in source code during testing.","nextLine":"                        // ignore out of range errors: success remains false","positions":[{"file":"Z:\\c++\\Project_Template\\include\\json.hpp","lines":[24249]}],"prevLine":"                    JSON_INTERNAL_CATCH (out_of_range&)","sastId":"OWASP-7.4.2, CERT-ERR56-CPP"}
